<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom"><title>Johannes Staffans</title><subtitle>Johannes Staffans' blog</subtitle><generator uri="https://perun.io/" version="0.4.2-SNAPSHOT">Perun</generator><link href="https://jstaffans.github.io/" type="text/html"></link><link href="https://jstaffans.github.io/atom-2.xml" rel="self"></link><link href="https://jstaffans.github.io/atom.xml" rel="first"></link><link href="https://jstaffans.github.io/atom-2.xml" rel="last"></link><link href="https://jstaffans.github.io/atom.xml" rel="previous"></link><updated>2017-11-16T22:02:47Z</updated><id>https://jstaffans.github.io/</id><entry><id>urn:uuid:738cd775-b94a-4931-b111-e434a4059cc1</id><title>Spicing up Java projects with Clojure</title><link href="https://jstaffans.github.io/posts/2015-05-21-clojure-spice.html" type="text/html" title="Spicing up Java projects with Clojure" rel="alternate"></link><published>2017-11-16T22:02:47Z</published><updated>2017-11-16T22:02:47Z</updated><content type="html" xml:base="https://jstaffans.github.io/posts/2015-05-21-clojure-spice.html">&lt;!DOCTYPE html&gt;
&lt;html&gt;&lt;head&gt;&lt;meta charset="utf-8"&gt;&lt;meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible"&gt;&lt;meta content="width=device-width, initial-scale=1, maximum-scale=1" name="viewport"&gt;&lt;meta content="Johannes Staffans" itemprop="author" name="author"&gt;&lt;title&gt;Johannes Staffans - Spicing up Java projects with Clojure&lt;/title&gt;&lt;link href="https://fonts.googleapis.com/css?family=Merriweather:400,700|Open+Sans:400,700" rel="stylesheet"&gt;&lt;link href="/styles/main.css" rel="stylesheet" type="text/css"&gt;&lt;/head&gt;&lt;div&gt;&lt;div class="header"&gt;&lt;div class="header__content clearfix"&gt;&lt;div class="sm-col sm-col-8"&gt;&lt;div&gt;personal website and blog of&lt;/div&gt;&lt;h1 class="header__headline"&gt;&lt;a href="/"&gt;Johannes Staffans&lt;/a&gt;&lt;/h1&gt;&lt;/div&gt;&lt;div class="sm-col flex-column"&gt;&lt;div&gt;&lt;a href="/"&gt;posts&lt;/a&gt;&lt;span&gt; &amp;middot; &lt;/span&gt;&lt;a href="/pages/about.html"&gt;about&lt;/a&gt;&lt;/div&gt;&lt;div class="pt1"&gt;elsewhere&lt;/div&gt;&lt;div&gt;&lt;a href="https://github.com/jstaffans"&gt;github&lt;/a&gt;&lt;span&gt; &amp;middot; &lt;/span&gt;&lt;a href="https://www.linkedin.com/in/jstaffans"&gt;linkedin&lt;/a&gt;&lt;span&gt; &amp;middot; &lt;/span&gt;&lt;a href="https://twitter.com/jstaffans"&gt;@jstaffans&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="clearfix"&gt;&lt;svg class="left border-triangle" version="1.1" xmlns="http://www.w3.org/2000/svg"&gt;&lt;polygon class="mask" points="0,0 30,0 30,30 0,30"&gt;&lt;/polygon&gt;&lt;polygon points="0,15 30,0 30,30"&gt;&lt;/polygon&gt;&lt;/svg&gt;&lt;svg class="right border-triangle" version="1.1" xmlns="http://www.w3.org/2000/svg"&gt;&lt;polygon class="mask" points="0,0 30,0 30,30 0,30"&gt;&lt;/polygon&gt;&lt;polygon points="30,15 0,30 0,0"&gt;&lt;/polygon&gt;&lt;/svg&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="container"&gt;&lt;div&gt;&lt;div class="flex items-baseline justify-between"&gt;&lt;h2&gt;Spicing up Java projects with Clojure&lt;/h2&gt;&lt;div&gt;&lt;span&gt;21.05.2015&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;p&gt;Many engineers with an interest in Clojure are probably working on Java code bases for most of the day. This doesn't have to be the end of the world if you're tickling to write some Clojure code, as there are many ways of bringing Clojure to existing Java-based projects.&lt;/p&gt;
&lt;p&gt;You can opt to build parts of the system separately using Clojure, providing a JAR file that can be used in the main project. It's even relatively straight-forward to write Clojure namespaces alongside the Java packages and do Java-Clojure interop. But there are also some subtler ways of using Clojure with legacy Java code bases. One of those is adding a REPL to your Java application and using it to do REPL-based testing and exploration with Clojure.&lt;/p&gt;
&lt;h3&gt;&lt;a href="#jvm-break-glass-driving-spring-with-clojure" id="jvm-break-glass-driving-spring-with-clojure"&gt;&lt;/a&gt;JVM Break Glass: driving Spring with Clojure&lt;/h3&gt;
&lt;p&gt;An excellent place to start is the &lt;a href="https://github.com/matlux/jvm-breakglass"&gt;JVM Break Glass library&lt;/a&gt;. The purpose of this library is to provide REPL facilities for traditional enterprise Java applications. It works especially well for Spring-based applications. Once you have a REPL running, you can use methods provided by the library to fetch Spring beans and interact with them as you would with any other Java object.&lt;/p&gt;
&lt;p&gt;If your Java application is anything like the ones I've seen, it probably provides a REST API of some sort and is most likely organized into different layers â€” Controllers, Services and so on. In addition to unit tests, I have often seen people using cURL or even a browser as the main tool for test-driving the system, which of course means going through the Controller layer even if the thing we are interested in is actually a piece of business logic in some deeper application layer.&lt;/p&gt;
&lt;p&gt;Being able to play around with beans in the Service layer directly in a running system is a way of focusing exactly on the thing you're interested in and iterating rapidly. This is second nature to Clojurists who do REPL-driven programming all the time, but almost magical to most Java programmers.&lt;/p&gt;
&lt;h4&gt;&lt;a href="#getting-started" id="getting-started"&gt;&lt;/a&gt;Getting started&lt;/h4&gt;
&lt;p&gt;First add the JVM Break Glass library as a dependency to your project:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;net.matlux&lt;span class="nt"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;jvm-breakglass&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;version&amp;gt;&lt;/span&gt;0.0.8&lt;span class="nt"&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Spring then needs to be configured to launch the REPL when the application starts. In this example, we are only interested in having a REPL during local development and not in production, which we can achieve using Spring profiles:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@Bean&lt;/span&gt;
&lt;span class="nd"&gt;@Profile&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"dev"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;NreplServerSpring&lt;/span&gt; &lt;span class="nf"&gt;repl&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;NreplServerSpring&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1112&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will launch an nREPL listening to port 1112 when the application is launched with the JVM option &lt;code&gt;-Dspring.profiles.active=dev&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;With the application running, you can then simply connect to the nREPL server with Leiningen or using whatever Clojure development environment you otherwise use.&lt;/p&gt;
&lt;p&gt;So far, so good. When you have a REPL open, the following will get you started:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use&lt;/span&gt; &lt;span class="ss"&gt;'cl-java-introspector.spring&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use&lt;/span&gt; &lt;span class="ss"&gt;'cl-java-introspector.core&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;nil&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After that, start looking for your beans and play around!&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;filter &lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;.contains&lt;/span&gt; &lt;span class="nv"&gt;%&lt;/span&gt; &lt;span class="s"&gt;"Service"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;get-beans&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="nv"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"paymentService"&lt;/span&gt; &lt;span class="s"&gt;"reportingService"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;def &lt;/span&gt;&lt;span class="nv"&gt;reporting-service&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;get-bean&lt;/span&gt; &lt;span class="s"&gt;"reportingService"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="nv"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="ss"&gt;'user/reporting-service&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;methods-info&lt;/span&gt; &lt;span class="nv"&gt;reporting-service&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;.getPayments&lt;/span&gt; &lt;span class="nv"&gt;reporting-service&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;  &lt;span class="c1"&gt;; no payments yet!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is already quite powerful for exploring APIs, driving Service layer beans and so on. The &lt;a href="https://github.com/matlux/jvm-breakglass"&gt;JVM Break Glass project page&lt;/a&gt; has some other examples of what is possible using the REPL. But besides pure exploration, there are lots more things you can do once you have an nREPL hook into your project.&lt;/p&gt;
&lt;h4&gt;&lt;a href="#data-visualisations-with-incanter" id="data-visualisations-with-incanter"&gt;&lt;/a&gt;Data visualisations with Incanter&lt;/h4&gt;
&lt;p&gt;One way of leveraging Clojure in Java projects is taking advantage of its impressive data processing and analysis capabilities. I recommend the &lt;a href="https://www.packtpub.com/big-data-and-business-intelligence/clojure-data-analysis-cookbook"&gt;Clojure Data Analysis Cookbook&lt;/a&gt; for anyone interested in learning more about patterns for data crunching in Clojure. Here, we'll take a look at how to visualise data using the &lt;a href="http://incanter.org/"&gt;Incanter&lt;/a&gt; library.&lt;/p&gt;
&lt;p&gt;I think visualising data flowing through a live application is one of the best ways of gaining deeper understanding into how the application works. Of course, everything we do here can also be accomplished by logging data and using an external data analysis application, but being able to do it directly in the application brings a whole different level of interactivity to the table.&lt;/p&gt;
&lt;p&gt;First, we'll add one more dependency to our project:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;im.chit&lt;span class="nt"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;vinyasa&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;version&amp;gt;&lt;/span&gt;0.3.4&lt;span class="nt"&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;a href="https://github.com/zcaudate/vinyasa"&gt;vinyasa library&lt;/a&gt; provides a kind of toolbelt for REPL-driven development in Clojure. One of the tools included is a utility called &lt;a href="https://github.com/zcaudate/vinyasa#pull"&gt;pull&lt;/a&gt;. Using this function, Maven dependencies can be pulled in directly from the REPL, without the need for adding dependencies to your project. More importantly, there is no need to restart anything, which makes it perfect for REPL exploration.&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;; This will take a long time the first time you do it because &lt;/span&gt;
&lt;span class="c1"&gt;; incanter has lots of dependencies. After that, the dependencies &lt;/span&gt;
&lt;span class="c1"&gt;; will be cached in your local Maven repository. &lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;pull&lt;/span&gt; &lt;span class="ss"&gt;'incanter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;; lots of dependencies ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As an example, we'll do some exploration of the &lt;a href="http://jstaffans.github.io/blog/2015/03/16/spring-boot.html"&gt;toy payment system&lt;/a&gt; I wrote about in a previous blog post. Given a credit card number, the service will perform a charge of 1,000 â‚¬. There is however a subtle bug â€” the sum always seems to be close to 1,000 â‚¬, but never exactly 1,000 â‚¬. We decide to explore the problem a bit by performing a series of payments using a test credit card number and plotting a histogram of the charged sums.&lt;/p&gt;
&lt;p&gt;As this is more involved than a few lines of code at the REPL, we'll save our work as a .clj file in a special folder: &lt;code&gt;src/exploration/clojure/visualise_payments.clj&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;ns &lt;/span&gt;&lt;span class="nv"&gt;visualise-payments&lt;/span&gt;
 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:require&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;cl-java-introspector.spring&lt;/span&gt; &lt;span class="ss"&gt;:refer&lt;/span&gt; &lt;span class="ss"&gt;:all&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;cl-java-introspector.core&lt;/span&gt; &lt;span class="ss"&gt;:refer&lt;/span&gt; &lt;span class="ss"&gt;:all&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;vinyasa.pull&lt;/span&gt; &lt;span class="ss"&gt;:refer&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;pull&lt;/span&gt;&lt;span class="p"&gt;]]))&lt;/span&gt;

&lt;span class="c1"&gt;; Get the Spring service bean we want to test drive&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;def &lt;/span&gt;&lt;span class="nv"&gt;paymentService&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;get-bean&lt;/span&gt; &lt;span class="s"&gt;"paymentService"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;; Helpers for working with RxJava observables and Java beans&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defn- &lt;/span&gt;&lt;span class="nv"&gt;result-from-observable&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;observable&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;.first&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;.toBlocking&lt;/span&gt; &lt;span class="nv"&gt;observable&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defn- &lt;/span&gt;&lt;span class="nv"&gt;sum-from-result&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;result&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;.getSum&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;.getPayment&lt;/span&gt; &lt;span class="nv"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

&lt;span class="c1"&gt;; create a sequence of test payments &lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defn- &lt;/span&gt;&lt;span class="nv"&gt;do-test-payments&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;n&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;letfn&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="nf"&gt;pay&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;cc-number&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;result-from-observable&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;.doPayment&lt;/span&gt; &lt;span class="nv"&gt;paymentService&lt;/span&gt; &lt;span class="nv"&gt;cc-number&lt;/span&gt;&lt;span class="p"&gt;)))]&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;map &lt;/span&gt;&lt;span class="nv"&gt;pay&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;repeat &lt;/span&gt;&lt;span class="nv"&gt;n&lt;/span&gt; &lt;span class="s"&gt;"TEST_NUMBER"&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;def &lt;/span&gt;&lt;span class="nv"&gt;payments&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;do-test-payments&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;; Pull Incanter dependency for data analysis and graphs&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;pull&lt;/span&gt; &lt;span class="ss"&gt;'incanter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;require&lt;/span&gt;
 &lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;incanter.core&lt;/span&gt; &lt;span class="ss"&gt;:as&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;incanter.charts&lt;/span&gt; &lt;span class="ss"&gt;:as&lt;/span&gt; &lt;span class="nv"&gt;c&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="c1"&gt;; pull statuses and sums into an Incanter dataset&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;def &lt;/span&gt;&lt;span class="nv"&gt;payments-dataset&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;i/dataset&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:status&lt;/span&gt; &lt;span class="ss"&gt;:sum&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;map &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;juxt&lt;/span&gt; &lt;span class="ss"&gt;:status&lt;/span&gt; &lt;span class="nv"&gt;sum-from-result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;payments&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

&lt;span class="c1"&gt;; plot a histogram with the sums&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;i/view&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;c/histogram&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;i/sel&lt;/span&gt; &lt;span class="nv"&gt;payments-dataset&lt;/span&gt; &lt;span class="ss"&gt;:cols&lt;/span&gt; &lt;span class="ss"&gt;:sum&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ss"&gt;:nbins&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Loading this into the REPL will produce an Incanter chart (note that it often opens behind the currently open window, at least on OS X):&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/incanter.png" alt="incanter chart" /&gt;&lt;/p&gt;
&lt;p&gt;The sum seems to follow a Gaussian distribution around 1,000 EUR. We now know something more about the thing we are investigating and can continue from here. This was of course a pretty trivial example â€” at &lt;a href="https://www.komoot.de"&gt;komoot&lt;/a&gt;, I have used a similar approach to investigate e.g. how many active users we have within different radiuses of city centers, only leveraging the application itself and not trawling through database dumps.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note: make sure that the application is started with &lt;code&gt;-Djava.awt.headless=false&lt;/code&gt;, otherwise opening graphics windows with Incanter won't work! Headless mode seems to be the default at least using IntelliJ IDEA.&lt;/strong&gt;&lt;/p&gt;
&lt;h4&gt;&lt;a href="#sample-project" id="sample-project"&gt;&lt;/a&gt;Sample project&lt;/h4&gt;
&lt;p&gt;Have a look at a &lt;a href="https://github.com/jstaffans/pay-me-spring-boot"&gt;sample project on Github&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a href="#other-uses-of-clojure-in-java-applications" id="other-uses-of-clojure-in-java-applications"&gt;&lt;/a&gt;Other uses of Clojure in Java applications&lt;/h3&gt;
&lt;p&gt;We have barely scratched the surface of the potential Clojure has for Java applications. Another area in which I have had success is for example property testing using &lt;a href="https://github.com/clojure/test.check"&gt;test.check&lt;/a&gt;. Testing in general is a good avenue for bringing Clojure into Java projects.&lt;/p&gt;
&lt;p&gt;We didn't really talk about doing REPL-driven development in this article, only about exploring an existing Java application using Clojure. You can definitely do REPL-driven development too, if you use a tool like &lt;a href="http://zeroturnaround.com/software/jrebel/"&gt;JRebel&lt;/a&gt; that is capable of advanced code hot-swapping. It's not as nice as namespace reloading in Clojure, but pretty close!&lt;/p&gt;
&lt;/div&gt;&lt;div&gt;&lt;a href="/"&gt;Back&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="footer"&gt;&lt;p&gt;&amp;copy; 2015-2017 Johannes Staffans&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/html&gt;</content><author><name>Johannes Staffans</name></author><category term="clojure"></category><category term="java"></category></entry><entry><id>urn:uuid:4ab445b8-7191-44f5-a67a-7233e51a3560</id><title>Distributed Matters 2015</title><link href="https://jstaffans.github.io/posts/2015-09-20-distributed-matters.html" type="text/html" title="Distributed Matters 2015" rel="alternate"></link><published>2017-11-16T22:02:47Z</published><updated>2017-11-16T22:02:47Z</updated><content type="html" xml:base="https://jstaffans.github.io/posts/2015-09-20-distributed-matters.html">&lt;!DOCTYPE html&gt;
&lt;html&gt;&lt;head&gt;&lt;meta charset="utf-8"&gt;&lt;meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible"&gt;&lt;meta content="width=device-width, initial-scale=1, maximum-scale=1" name="viewport"&gt;&lt;meta content="Johannes Staffans" itemprop="author" name="author"&gt;&lt;title&gt;Johannes Staffans - Distributed Matters 2015&lt;/title&gt;&lt;link href="https://fonts.googleapis.com/css?family=Merriweather:400,700|Open+Sans:400,700" rel="stylesheet"&gt;&lt;link href="/styles/main.css" rel="stylesheet" type="text/css"&gt;&lt;/head&gt;&lt;div&gt;&lt;div class="header"&gt;&lt;div class="header__content clearfix"&gt;&lt;div class="sm-col sm-col-8"&gt;&lt;div&gt;personal website and blog of&lt;/div&gt;&lt;h1 class="header__headline"&gt;&lt;a href="/"&gt;Johannes Staffans&lt;/a&gt;&lt;/h1&gt;&lt;/div&gt;&lt;div class="sm-col flex-column"&gt;&lt;div&gt;&lt;a href="/"&gt;posts&lt;/a&gt;&lt;span&gt; &amp;middot; &lt;/span&gt;&lt;a href="/pages/about.html"&gt;about&lt;/a&gt;&lt;/div&gt;&lt;div class="pt1"&gt;elsewhere&lt;/div&gt;&lt;div&gt;&lt;a href="https://github.com/jstaffans"&gt;github&lt;/a&gt;&lt;span&gt; &amp;middot; &lt;/span&gt;&lt;a href="https://www.linkedin.com/in/jstaffans"&gt;linkedin&lt;/a&gt;&lt;span&gt; &amp;middot; &lt;/span&gt;&lt;a href="https://twitter.com/jstaffans"&gt;@jstaffans&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="clearfix"&gt;&lt;svg class="left border-triangle" version="1.1" xmlns="http://www.w3.org/2000/svg"&gt;&lt;polygon class="mask" points="0,0 30,0 30,30 0,30"&gt;&lt;/polygon&gt;&lt;polygon points="0,15 30,0 30,30"&gt;&lt;/polygon&gt;&lt;/svg&gt;&lt;svg class="right border-triangle" version="1.1" xmlns="http://www.w3.org/2000/svg"&gt;&lt;polygon class="mask" points="0,0 30,0 30,30 0,30"&gt;&lt;/polygon&gt;&lt;polygon points="30,15 0,30 0,0"&gt;&lt;/polygon&gt;&lt;/svg&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="container"&gt;&lt;div&gt;&lt;div class="flex items-baseline justify-between"&gt;&lt;h2&gt;Distributed Matters 2015&lt;/h2&gt;&lt;div&gt;&lt;span&gt;20.09.2015&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;p&gt;Yesterday, I had the pleasure of attending the Distributed Matters 2015 conference here in Berlin. The conference had re-branded itself for this year, having previously gone under the name of NoSQL Matters. I think broadening the scope to distributed systems was a good move â€” NoSQL was still very much present in the agenda, but my favorite topics were definitely those dealing with distributed systems and communication on a broader scale. All in all, the conference was very library-, technique- and tool-oriented, there were not many talks of the more philosophical kind.&lt;/p&gt;
&lt;p&gt;The venue was the always awesome Kulturbrauerei in the north of Berlin, which works very well for mid-sized conferences like Distributed Matters. I appreciated the fact that there were lots of standing tables around that were perfect spots for meeting people and networking. I always try to be ultra-social during conferences and talk to as many people as possible.&lt;/p&gt;
&lt;h2&gt;&lt;a href="#the-talks" id="the-talks"&gt;&lt;/a&gt;The talks&lt;/h2&gt;
&lt;p&gt;I took copious &lt;a href="https://gist.github.com/jstaffans/ed44a4099a79127280e5"&gt;notes&lt;/a&gt; during the talks that I attended, which were:&lt;/p&gt;
&lt;h3&gt;&lt;a href="#keynote-jepsen-v-kyle-kingsbury-aphyr" id="keynote-jepsen-v-kyle-kingsbury-aphyr"&gt;&lt;/a&gt;Keynote: Jepsen V (Kyle Kingsbury, &lt;a href="https://twitter.com/aphyr"&gt;@aphyr&lt;/a&gt;)&lt;/h3&gt;
&lt;p&gt;Kyle Kingsbury of &lt;a href="https://aphyr.com/tags/jepsen"&gt;Jepsen&lt;/a&gt; fame is certainly an exciting choice of keynote speaker for a conference dealing with distributed systems. His talk was greatly anticipated by the attendees I got to talk to. While I appreciated the hand-drawn slides a lot, I didn't really get anything new out of the keynote that Kyle hasn't already written about on his blog, so it was a bit disappointing for me. There was some interesting stuff towards the end on techniques for testing your architecture (e.g. simulate a network partition with &lt;code&gt;iptables&lt;/code&gt;), but unfortunately those parts were quickly skimmed over due to time constraints.&lt;/p&gt;
&lt;h3&gt;&lt;a href="#lisp-in-the-machine-joe-nash-jna-sh" id="lisp-in-the-machine-joe-nash-jna-sh"&gt;&lt;/a&gt;Lisp in the Machine (Joe Nash, &lt;a href="https://twitter.com/jna_sh"&gt;@jna_sh&lt;/a&gt;)&lt;/h3&gt;
&lt;p&gt;Talking very fast, Joe Nash of Braintree told a story about how his company, whose domain is payment processing, stores transaction data. Events initially land in Postgres, the "live" database. Amazon Redshift is used for reporting and archiving so the events need to be transferred there as well. Previously, this was a big batch job; now, business users enjoy near real-time reporting thanks to a Kafka-based pipeline â€” win!&lt;/p&gt;
&lt;p&gt;Braintree uses Clojure to handle the data pipeline. This makes a lot of sense since they are using lots of JVM technology already. Another improvement has been to incorporate Elasticsearch for transaction searches. Different kinds of data munging needs to happen for Redshift and Elasticsearch and Clojure's data structures are very helpful here.&lt;/p&gt;
&lt;h3&gt;&lt;a href="#a-tale-of-queues-from-activemq-over-hazelcast-to-disque-philipp-krenn-xeraa" id="a-tale-of-queues-from-activemq-over-hazelcast-to-disque-philipp-krenn-xeraa"&gt;&lt;/a&gt;A tale of queues â€” from ActiveMQ over Hazelcast to Disque (Philipp Krenn, &lt;a href="https://twitter.com/xeraa"&gt;@xeraa&lt;/a&gt;)&lt;/h3&gt;
&lt;p&gt;The domain of the company Philipp works at, &lt;a href="https://ecosio.com/en/"&gt;ecosio&lt;/a&gt;, is business process management. Customers basically pass messages through ecosio's systems, where a typical message would be placing an order for some product. There are lots of legacy systems that need connecting, for which Apache Camel is used. Internally, messages first land in MySQL and are then forwarded using a distributed queue. It might be a slightly over-engineered solution, given the relatively low number of messages, but pretty interesting in its execution.&lt;/p&gt;
&lt;p&gt;ecosio has evaluated lots of queuing solutions (see &lt;a href="https://gist.github.com/jstaffans/ed44a4099a79127280e5#a-tale-of-queues--from-activemq-over-hazelcast-to-disque-philipp-krenn"&gt;notes&lt;/a&gt;), finally landing on &lt;a href="https://github.com/antirez/disque"&gt;Disque&lt;/a&gt;. Probably they are the first company to use this alpha software in production, which makes them either brave or stupid! More details on Disque later.&lt;/p&gt;
&lt;h3&gt;&lt;a href="#microservices-at-soundcloud-phil-calÃ§ado-pcalcado" id="microservices-at-soundcloud-phil-calÃ§ado-pcalcado"&gt;&lt;/a&gt;Microservices at SoundCloud (Phil CalÃ§ado, &lt;a href="https://twitter.com/pcalcado"&gt;@pcalcado&lt;/a&gt;)&lt;/h3&gt;
&lt;p&gt;Phil has recently written about &lt;a href="http://philcalcado.com/2015/09/08/how_we_ended_up_with_microservices.html"&gt;how SoundCloud ended up with microservices&lt;/a&gt; and his talk at Distributed Matters went into further detail about what the service architecture SoundCloud has ended up with looks like. He noted that following the &lt;a href="http://12factor.net/"&gt;Twelve-Factor App pattern&lt;/a&gt; from the beginning was a big boon. Also, having standardised reporting and administration interfaces for all services helps a lot with maintainability. This was the first time I heard about &lt;a href="https://github.com/twitter/twitter-server"&gt;twitter-server&lt;/a&gt;, which seems like a pretty good anti-bike-shedding weapon when it comes to discussing how to best set up services.&lt;/p&gt;
&lt;p&gt;SoundCloud do 20 % time projects, one of which has been &lt;a href="http://prometheus.io/"&gt;Prometheus&lt;/a&gt;, a monitoring and alerting toolkit that seems pretty full-featured and is definitely something I will be trying out!&lt;/p&gt;
&lt;h3&gt;&lt;a href="#simcity-buildit-building-highly-scalable-and-cost-efficient-server-architecture-matti-palosuo" id="simcity-buildit-building-highly-scalable-and-cost-efficient-server-architecture-matti-palosuo"&gt;&lt;/a&gt;SimCity BuildIt â€“ Building Highly Scalable and Cost Efficient Server Architecture (Matti Palosuo)&lt;/h3&gt;
&lt;p&gt;Matti leads the team building the Java/Spring Boot-based backend for the hugely popular mobile game, SimCity BuildIt. Some 8 million transactions are handled on any given day. The data model is relatively simple â€” a player ID and the player's associated information. Redis is used as the main database, holding data on the "live" set of players (anyone who has logged in to the game during the last few months). The team has built its own Java tool called Anteater which handles distributed configuration, sharding and transactions in Redis. Anteater doesn't seem to be open-source â€” bummer!&lt;/p&gt;
&lt;p&gt;MongoDB is used as the archive and backup database. If a player logs in after a long period of inactivity, the player's data is first fetched from MongoDB into Redis.&lt;/p&gt;
&lt;p&gt;Everything is highly available, distributed over three AWS availability zones behind an ELB. Optimizations include patching Redis for better performance and cross-shard transactions and using Protobuf for data transfers.&lt;/p&gt;
&lt;p&gt;It was interesting to see a pretty traditional stack wired up for high performance and availability â€” not much distributed stuff going on here, but the application is still a highly successful one. The team also considered using Redis as the main database a big win.&lt;/p&gt;
&lt;h3&gt;&lt;a href="#netflix-oss-and-spring-cloud-arnaud-cogoluÃ¨gnes-acogoluegnes" id="netflix-oss-and-spring-cloud-arnaud-cogoluÃ¨gnes-acogoluegnes"&gt;&lt;/a&gt;Netflix OSS and Spring Cloud (Arnaud CogoluÃ¨gnes, &lt;a href="https://twitter.com/acogoluegnes"&gt;@acogoluegnes&lt;/a&gt;)&lt;/h3&gt;
&lt;p&gt;In recent years, big JVM players like Netflix have pumped out a lot of cool libraries and tools for microservice development, such as Eureka (a service registry), Hystrix (circuit breakers) and Ribbon (client-side load balancer). &lt;a href="http://projects.spring.io/spring-cloud/"&gt;Spring Cloud&lt;/a&gt; is an attempt to make these tools easily integratable in Spring-based applications. As someone who works with Spring quite a lot, I found it fascinating that you can get e.g. Hystrix working with a single Spring method annotation. Even dashboards can be enabled using annotations.&lt;/p&gt;
&lt;p&gt;Judging from the amount of Github stars, the Netflix OSS integrations seem to be the most popular parts of Spring Cloud, but there are a lot of other integrations as well. I think you can get a pretty sweet microservice setup with Spring Boot and these integrations, but the question you need to ask yourself is: do you want to be doing Java/Spring at all?&lt;/p&gt;
&lt;h3&gt;&lt;a href="#microservices-stress-free-and-without-increased-heart-attack-risk-uwe-friedrichsen-ufried" id="microservices-stress-free-and-without-increased-heart-attack-risk-uwe-friedrichsen-ufried"&gt;&lt;/a&gt;Microservices â€“ stress-free and without increased heart-attack risk (Uwe Friedrichsen, &lt;a href="https://twitter.com/ufried"&gt;@ufried&lt;/a&gt;)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://de.slideshare.net/ufried/microservices-stressfree-and-without-increased-heart-attack-risk"&gt;Slides&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;By now I think everyone knows that "microservices are no free lunch", which I thought would be the gist of this talk as well. Thankfully the speaker went into a bit more detail. Among other things, I found the tie-in to Domain-Driven Design interesting â€” well-designed microservices should approximate &lt;a href="http://martinfowler.com/bliki/BoundedContext.html"&gt;Bounded Contexts&lt;/a&gt;. Other things that the speaker recommended us to consider on the path to microservice englightenment was forgetting about layers and re-thinking DRY in favour of reduced deployment dependencies.&lt;/p&gt;
&lt;p&gt;On the service interface side, &lt;a href="https://en.wikipedia.org/wiki/Robustness_principle"&gt;Postel's Law&lt;/a&gt; was brought up as well as the need to validate responses from other services, even though we should be able to trust them. Datastores are another issue â€” a single, monolithic data store is probably a bad idea as are distributed transactions (if you find yourself doing that, go back to the drawing board!).&lt;/p&gt;
&lt;p&gt;Production readiness is probably the biggest challenge. Besides deployment, configuration, monitoring and so on, we also have to think differently about error handling â€” throwing an exception no longer fits the bill, we need a separate error handling channel.&lt;/p&gt;
&lt;p&gt;If nothing else, focus on production readiness and a functional design!&lt;/p&gt;
&lt;h3&gt;&lt;a href="#disque-salvatore-sanfilippo-antirez" id="disque-salvatore-sanfilippo-antirez"&gt;&lt;/a&gt;Disque (Salvatore Sanfilippo, &lt;a href="https://twitter.com/antirez"&gt;@antirez&lt;/a&gt;)&lt;/h3&gt;
&lt;p&gt;The final talk of the day was by Salvatore Sanfilippo, the inventor of Redis, who apparently disagreed with Redis being used a distributed queue and decided to whip up a solution for this particular use case. &lt;a href="https://github.com/antirez/disque"&gt;Disque&lt;/a&gt; (pronounced &lt;em&gt;dis-queue&lt;/em&gt;) is based on Redis and shares a lot with its parent project, among other things optional persistency, its API, its license and so on.&lt;/p&gt;
&lt;p&gt;The main uses cases for Disque would be asynchronous job execution or as a microservice event bus. Another interesting usage would be as a distributed scheduler. Disque has configurable delivery semantics, by default &lt;em&gt;at-least-once&lt;/em&gt; but trying hard to be &lt;em&gt;exactly-once&lt;/em&gt;. Sweet stuff like delays and TTL is also supported. The main design sacrifice is that only best-effort ordering is offered â€” for strict ordering, look elsewhere.&lt;/p&gt;
&lt;p&gt;Salvatore went into a lot of detail about the implementation, see the &lt;a href="https://gist.github.com/jstaffans/ed44a4099a79127280e5#disque"&gt;notes&lt;/a&gt; for all the nitty-gritty. Suffice to say that people seemed pretty excited by this simple yet powerful queuing solution. The first stable release should come around in a few months, but in the meantime, some people are already using Disque in production.&lt;/p&gt;
&lt;h2&gt;&lt;a href="#conclusion" id="conclusion"&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;The conference talks and the discussions I had with the speakers and other attendees gave me a lot of things to think about with regards to distributed systems as well as lots of new vocabulary to talk about them. Thanks to the organizers for an excellent conference and see you next year!&lt;/p&gt;
&lt;/div&gt;&lt;div&gt;&lt;a href="/"&gt;Back&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="footer"&gt;&lt;p&gt;&amp;copy; 2015-2017 Johannes Staffans&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/html&gt;</content><author><name>Johannes Staffans</name></author><category term="devops"></category><category term="distributed"></category><category term="conference"></category><category term="aws"></category><category term="redis"></category><category term="disque"></category></entry><entry><id>urn:uuid:d7699272-d914-4079-83ab-eb1ddb2723ab</id><title>Week 26</title><link href="https://jstaffans.github.io/posts/2015-06-30-week-26.html" type="text/html" title="Week 26" rel="alternate"></link><published>2017-11-16T22:02:47Z</published><updated>2017-11-16T22:02:47Z</updated><content type="html" xml:base="https://jstaffans.github.io/posts/2015-06-30-week-26.html">&lt;!DOCTYPE html&gt;
&lt;html&gt;&lt;head&gt;&lt;meta charset="utf-8"&gt;&lt;meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible"&gt;&lt;meta content="width=device-width, initial-scale=1, maximum-scale=1" name="viewport"&gt;&lt;meta content="Johannes Staffans" itemprop="author" name="author"&gt;&lt;title&gt;Johannes Staffans - Week 26&lt;/title&gt;&lt;link href="https://fonts.googleapis.com/css?family=Merriweather:400,700|Open+Sans:400,700" rel="stylesheet"&gt;&lt;link href="/styles/main.css" rel="stylesheet" type="text/css"&gt;&lt;/head&gt;&lt;div&gt;&lt;div class="header"&gt;&lt;div class="header__content clearfix"&gt;&lt;div class="sm-col sm-col-8"&gt;&lt;div&gt;personal website and blog of&lt;/div&gt;&lt;h1 class="header__headline"&gt;&lt;a href="/"&gt;Johannes Staffans&lt;/a&gt;&lt;/h1&gt;&lt;/div&gt;&lt;div class="sm-col flex-column"&gt;&lt;div&gt;&lt;a href="/"&gt;posts&lt;/a&gt;&lt;span&gt; &amp;middot; &lt;/span&gt;&lt;a href="/pages/about.html"&gt;about&lt;/a&gt;&lt;/div&gt;&lt;div class="pt1"&gt;elsewhere&lt;/div&gt;&lt;div&gt;&lt;a href="https://github.com/jstaffans"&gt;github&lt;/a&gt;&lt;span&gt; &amp;middot; &lt;/span&gt;&lt;a href="https://www.linkedin.com/in/jstaffans"&gt;linkedin&lt;/a&gt;&lt;span&gt; &amp;middot; &lt;/span&gt;&lt;a href="https://twitter.com/jstaffans"&gt;@jstaffans&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="clearfix"&gt;&lt;svg class="left border-triangle" version="1.1" xmlns="http://www.w3.org/2000/svg"&gt;&lt;polygon class="mask" points="0,0 30,0 30,30 0,30"&gt;&lt;/polygon&gt;&lt;polygon points="0,15 30,0 30,30"&gt;&lt;/polygon&gt;&lt;/svg&gt;&lt;svg class="right border-triangle" version="1.1" xmlns="http://www.w3.org/2000/svg"&gt;&lt;polygon class="mask" points="0,0 30,0 30,30 0,30"&gt;&lt;/polygon&gt;&lt;polygon points="30,15 0,30 0,0"&gt;&lt;/polygon&gt;&lt;/svg&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="container"&gt;&lt;div&gt;&lt;div class="flex items-baseline justify-between"&gt;&lt;h2&gt;Week 26&lt;/h2&gt;&lt;div&gt;&lt;span&gt;30.06.2015&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;p&gt;Some random things I've been thinking about this week:&lt;/p&gt;
&lt;h4&gt;&lt;a href="#category-theory" id="category-theory"&gt;&lt;/a&gt;Category Theory&lt;/h4&gt;
&lt;p&gt;The first thing that comes into my mind when I hear "category theory" is the basic stuff we learned about at university, such as the set union operation. It turns out that category theory is much more than that â€” we can also reason about the functions and types that make up a software application using category theory. I don't really grasp it yet, but I will try to dive into it a bit more and maybe pick up some Haskell along the way.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Bartosz Milewski has a really nice article series called &lt;a href="http://bartoszmilewski.com/2014/10/28/category-theory-for-programmers-the-preface/"&gt;Category Theory for Programmers&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;For Clojure, there is the &lt;a href="https://github.com/funcool/cats"&gt;cats library&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;I heard about a book called &lt;a href="https://gumroad.com/l/maybe-haskell/?utm_source=giant-robots&amp;amp;utm_medium=blog&amp;amp;utm_campaign=announcement"&gt;Maybe Haskell&lt;/a&gt; that should clear up some basic concepts.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a href="#n1-problem" id="n1-problem"&gt;&lt;/a&gt;N+1 problem&lt;/h4&gt;
&lt;p&gt;I recently had a scenario where an entity fetched from the database needed an additional field from a different storage backend, requiring an additional query to that storage medium for each row. Think of fetching a collection of books and for each book having to fetch its author separately. That's a lot of queries! This is called the N+1 problem.&lt;/p&gt;
&lt;p&gt;In my case, I solved the problem with some application-layer caching. Another common pattern is to get the id's that need to be fetched and do a batch query using e.g. &lt;code&gt;IN (1, 2, 3 ..)&lt;/code&gt;, which is one of the things that the neat &lt;a href="https://github.com/kachayev/muse/blob/master/docs/sql.md"&gt;muse library for Clojure&lt;/a&gt; provides. But keep in mind that using a list of id's is &lt;a href="http://blog.jooq.org/2013/11/11/id-lists-arent-the-best-solution-for-the-n1-problem/"&gt;not going to perform very well&lt;/a&gt; for a large number of id's.&lt;/p&gt;
&lt;h4&gt;&lt;a href="#queues-back-pressure" id="queues-back-pressure"&gt;&lt;/a&gt;Queues, back pressure&lt;/h4&gt;
&lt;p&gt;I have grown very fond of queues as a way of decoupling the different parts of a system. &lt;a href="https://www.youtube.com/watch?v=ROor6_NGIWU"&gt;The Language of the System&lt;/a&gt; is one of those classic Rich Hickey talks and provides some context for why system communication is best done using data put on queues. Zach Tellman also did a &lt;a href="https://www.youtube.com/watch?v=1bNOO3xxMc0"&gt;great talk on the challenges of a queue-based system&lt;/a&gt; at Clojure/West 2015.&lt;/p&gt;
&lt;p&gt;One of the terms that gets thrown around a lot when talking about queues is back pressure. This basically refers to some mechanism that the consumer of a queue has to let the producer know that it can't handle any more work at the moment and may come in the form of an HTTP response code, a RejectedExecutionException or something other interesting. Another strategy would be to eliminate the need for back pressure by using e.g. a dropping buffer.&lt;/p&gt;
&lt;h4&gt;&lt;a href="#proper-api-design-and-hateoas" id="proper-api-design-and-hateoas"&gt;&lt;/a&gt;Proper API design and HATEOAS&lt;/h4&gt;
&lt;p&gt;I've finally gotten around the reading Leonard Richardson's and Mike Amundsen's book &lt;a href="http://www.restfulwebapis.org/"&gt;RESTful Web APIs&lt;/a&gt;. It's making me realise all the mistakes I've made designing APIs in the past â€” I'm definitely guilty of forcing API consumers to read the documentation instead of following the &lt;a href="https://en.wikipedia.org/wiki/HATEOAS"&gt;HATEOAS pattern&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It's also made me think again about the different data formats REST APIs normally produce. Everyone's favorite, JSON, turns out to be a pretty bad choice since it isn't a hypermedia format due to its lack of links. The &lt;a href="https://github.com/cognitect/transit-format"&gt;Transit format&lt;/a&gt; does and also takes advantage of the fast, native JSON parsing that browsers provide. Other extensions to JSON include &lt;a href="http://stateless.co/hal_specification.html"&gt;HAL&lt;/a&gt; and Collection+JSON.&lt;/p&gt;
&lt;p&gt;Another observation would be that XML perhaps isn't so bad at all, since it can support the HATEOAS pattern bettern than JSON.&lt;/p&gt;
&lt;/div&gt;&lt;div&gt;&lt;a href="/"&gt;Back&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="footer"&gt;&lt;p&gt;&amp;copy; 2015-2017 Johannes Staffans&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/html&gt;</content><author><name>Johannes Staffans</name></author><category term="braindump"></category></entry><entry><id>urn:uuid:eb792ad5-e2cb-465f-b9b0-be0627cb9cb6</id><title>A look at running Clojure on AWS Lambda</title><link href="https://jstaffans.github.io/posts/2015-12-30-clojure-lambda.html" type="text/html" title="A look at running Clojure on AWS Lambda" rel="alternate"></link><published>2017-11-16T22:02:47Z</published><updated>2017-11-16T22:02:47Z</updated><content type="html" xml:base="https://jstaffans.github.io/posts/2015-12-30-clojure-lambda.html">&lt;!DOCTYPE html&gt;
&lt;html&gt;&lt;head&gt;&lt;meta charset="utf-8"&gt;&lt;meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible"&gt;&lt;meta content="width=device-width, initial-scale=1, maximum-scale=1" name="viewport"&gt;&lt;meta content="Johannes Staffans" itemprop="author" name="author"&gt;&lt;title&gt;Johannes Staffans - A look at running Clojure on AWS Lambda&lt;/title&gt;&lt;link href="https://fonts.googleapis.com/css?family=Merriweather:400,700|Open+Sans:400,700" rel="stylesheet"&gt;&lt;link href="/styles/main.css" rel="stylesheet" type="text/css"&gt;&lt;/head&gt;&lt;div&gt;&lt;div class="header"&gt;&lt;div class="header__content clearfix"&gt;&lt;div class="sm-col sm-col-8"&gt;&lt;div&gt;personal website and blog of&lt;/div&gt;&lt;h1 class="header__headline"&gt;&lt;a href="/"&gt;Johannes Staffans&lt;/a&gt;&lt;/h1&gt;&lt;/div&gt;&lt;div class="sm-col flex-column"&gt;&lt;div&gt;&lt;a href="/"&gt;posts&lt;/a&gt;&lt;span&gt; &amp;middot; &lt;/span&gt;&lt;a href="/pages/about.html"&gt;about&lt;/a&gt;&lt;/div&gt;&lt;div class="pt1"&gt;elsewhere&lt;/div&gt;&lt;div&gt;&lt;a href="https://github.com/jstaffans"&gt;github&lt;/a&gt;&lt;span&gt; &amp;middot; &lt;/span&gt;&lt;a href="https://www.linkedin.com/in/jstaffans"&gt;linkedin&lt;/a&gt;&lt;span&gt; &amp;middot; &lt;/span&gt;&lt;a href="https://twitter.com/jstaffans"&gt;@jstaffans&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="clearfix"&gt;&lt;svg class="left border-triangle" version="1.1" xmlns="http://www.w3.org/2000/svg"&gt;&lt;polygon class="mask" points="0,0 30,0 30,30 0,30"&gt;&lt;/polygon&gt;&lt;polygon points="0,15 30,0 30,30"&gt;&lt;/polygon&gt;&lt;/svg&gt;&lt;svg class="right border-triangle" version="1.1" xmlns="http://www.w3.org/2000/svg"&gt;&lt;polygon class="mask" points="0,0 30,0 30,30 0,30"&gt;&lt;/polygon&gt;&lt;polygon points="30,15 0,30 0,0"&gt;&lt;/polygon&gt;&lt;/svg&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="container"&gt;&lt;div&gt;&lt;div class="flex items-baseline justify-between"&gt;&lt;h2&gt;A look at running Clojure on AWS Lambda&lt;/h2&gt;&lt;div&gt;&lt;span&gt;30.12.2015&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;p&gt;Lambda is the name of the serverless function execution service that has been part of the Amazon Web Services ecosystem since late 2014. The evolution of the Lamba service has been quite rapid during the last year, with one of the recent additions being support for execution of Java code. And as we know, where there's Java, there can be Clojure, so during a recent project I decided to implement some of the backend parts using the AWS Lambda service.&lt;/p&gt;
&lt;h3&gt;&lt;a href="#advantages" id="advantages"&gt;&lt;/a&gt;Advantages&lt;/h3&gt;
&lt;p&gt;The obvious advantage of using Lambda is that you do not have to worry about server infrastructure, instead you are just deploying a function and letting AWS worry about scaling and so on. I think that having the function be the unit of deployment is a natural step to take when doing functional programming. Clojure of course works splendidly in this setting.&lt;/p&gt;
&lt;h3&gt;&lt;a href="#limitations" id="limitations"&gt;&lt;/a&gt;Limitations&lt;/h3&gt;
&lt;p&gt;One well-known limitation of running Clojure on AWS Lambda is the JVM startup time. This is a serious problem for an application that requires fast responses. In this case, you can still use ClojureScript running on Node.js, which is another execution environment that Lambda supports. If, like me, you can tolerate function executions that are sometimes very slow, Clojure works just fine. Lambda will also generally run subsequent invocations of your function using the same, warmed-up JVMs, so it's usually only the first few executions that are very slow.&lt;/p&gt;
&lt;p&gt;Another limitation that one might hit is the 50 Mb size limit of the deployment artifact. 50 Mb might seem like a lot, but you can quickly reach that limit if you're not careful about avoiding pulling in heavy dependencies in your project. &lt;a href="https://github.com/mcohen01/amazonica"&gt;Amazonica&lt;/a&gt; is an example of a library that has a lot of transient dependencies. Liberal use of &lt;code&gt;:exclusions&lt;/code&gt; in the &lt;code&gt;:dependencies&lt;/code&gt; section of your Leiningen project file helps:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ss"&gt;:dependencies&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="nv"&gt;amazonica&lt;/span&gt; &lt;span class="s"&gt;"0.3.39"&lt;/span&gt; 
                &lt;span class="ss"&gt;:exclusions&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;com.amazonaws/aws-java-sdk-datapipeline&lt;/span&gt;
                             &lt;span class="nv"&gt;com.amazonaws/aws-java-sdk-devicefarm&lt;/span&gt;
                             &lt;span class="nv"&gt;...&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;One serious limitation that isn't immediately obvious is that Lambda functions have no way to communicate with private RDS databases. This is because permissions are granted to a Lambda function based on its (IAM) execution role whereas RDS access is security group- and therefore IP-address-based. The IP address of a Lambda executor is not known to the user, so you would have to open up access to large chunks (the whole published AWS IP range, essentially) to grant access to a Lambda function. Addressing this limitation seems to at least be &lt;a href="https://forums.aws.amazon.com/thread.jspa?threadID=166946&amp;amp;start=25&amp;amp;tstart=0"&gt;on the AWS Lambda roadmap&lt;/a&gt;, but no dates have been given yet.&lt;/p&gt;
&lt;h3&gt;&lt;a href="#practical-issues" id="practical-issues"&gt;&lt;/a&gt;Practical issues&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Deployment&lt;/strong&gt; to AWS Lambda requires some command-line magic - I created a Jenkins job that runs Leiningen, tests the code and deploys a new version to Lambda. There are some things that need configuring, mainly how much memory to reserve for the function (this correlates directly with how much you pay per function invocation as well). I found 384 Mb to be the lowest possible amount for my relatively simple data-crunching function. Lower than that and the function would simply hang and time out.&lt;/p&gt;
&lt;p&gt;Since Lambda is somewhat of a black box execution environment, &lt;strong&gt;logging&lt;/strong&gt; is crucial. Logs can be found in CloudWatch, but you have to remember to give the function an execution IAM role that is authorized to create log streams - the &lt;a href="http://docs.aws.amazon.com/lambda/latest/dg/intro-permission-model.html#lambda-intro-execution-role"&gt;docs&lt;/a&gt; have more to say on that.&lt;/p&gt;
&lt;p&gt;Your application will probably also need some &lt;strong&gt;configuration&lt;/strong&gt;, maybe in the form of an API key or threadpool settings (yes, threadpools are fine to use with Lambda). Lambda unfortunately lacks support for environment variables similar to what other AWS deployment tools like Elastic Beanstalk and OpsWorks have, so you have to get a bit more creative.&lt;/p&gt;
&lt;p&gt;Usually, some setup that makes local development easy and while avoiding placing sensitive values in the source-code repository is a good way to go and I ended up using the &lt;a href="https://github.com/levand/immuconf"&gt;immuconf&lt;/a&gt; library in combination with an S3 bucket. The blueprint for the configuration is a checked-in &lt;code&gt;resources/config.edn&lt;/code&gt; file, which can be overridden by both a file in an S3 bucket and a file that is available only locally:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;ns &lt;/span&gt;&lt;span class="nv"&gt;lambda-example.config&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:require&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;clojure.java.io&lt;/span&gt; &lt;span class="ss"&gt;:as&lt;/span&gt; &lt;span class="nv"&gt;io&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;amazonica.aws.s3&lt;/span&gt; &lt;span class="ss"&gt;:refer&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;get-object&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
            &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;immuconf.config&lt;/span&gt; &lt;span class="ss"&gt;:as&lt;/span&gt; &lt;span class="nv"&gt;conf&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;clojure.tools.logging&lt;/span&gt; &lt;span class="ss"&gt;:as&lt;/span&gt; &lt;span class="nv"&gt;log&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:refer-clojure&lt;/span&gt; &lt;span class="ss"&gt;:exclude&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;get&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defn- &lt;/span&gt;&lt;span class="nv"&gt;base-config&lt;/span&gt;
  &lt;span class="p"&gt;[]&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;io/resource&lt;/span&gt; &lt;span class="s"&gt;"config.edn"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defn- &lt;/span&gt;&lt;span class="nv"&gt;s3-config&lt;/span&gt;
  &lt;span class="p"&gt;[]&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;try&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:input-stream&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;get-object&lt;/span&gt;
        &lt;span class="ss"&gt;:bucket-name&lt;/span&gt; &lt;span class="s"&gt;"my-config-bucket"&lt;/span&gt;
        &lt;span class="ss"&gt;:key&lt;/span&gt; &lt;span class="s"&gt;"production/config.edn"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;catch&lt;/span&gt; &lt;span class="nv"&gt;Exception&lt;/span&gt; &lt;span class="nv"&gt;_&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;log/warn&lt;/span&gt; &lt;span class="s"&gt;"S3 config not available!"&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defn- &lt;/span&gt;&lt;span class="nv"&gt;local-config&lt;/span&gt;
  &lt;span class="p"&gt;[]&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;when &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;.exists&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;io/as-file&lt;/span&gt; &lt;span class="s"&gt;"local.edn"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="s"&gt;"local.edn"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;def &lt;/span&gt;&lt;span class="nv"&gt;config&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;apply &lt;/span&gt;
    &lt;span class="nv"&gt;conf/load&lt;/span&gt; 
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;filter &lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;partial not= &lt;/span&gt;&lt;span class="nv"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
      &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="nf"&gt;base-config&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;s3-config&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;local-config&lt;/span&gt;&lt;span class="p"&gt;)])))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a href="#execution" id="execution"&gt;&lt;/a&gt;Execution&lt;/h3&gt;
&lt;p&gt;Lambda functions are versatile in that they can be triggered by almost any type of event in the AWS universe. I opted for subscribing to an SNS topic, but you can also trigger functions based on for example changes in an S3 bucket or updates to a DynamoDB table.&lt;/p&gt;
&lt;p&gt;The &lt;a href="https://github.com/uswitch/lambada"&gt;lambada&lt;/a&gt; library provides the necessary plumbing for actually executing your function in response to an AWS event.&lt;/p&gt;
&lt;h3&gt;&lt;a href="#conclusion" id="conclusion"&gt;&lt;/a&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;AWS Lambda is a fun, versatile and cheap way of taking the functional programming paradigm one step further by having the function be the unit of deployment. Although there are some kinks such as the lack of environment variable support and restrictions with regards to RDS access, most problems can be worked around. The JVM startup time is a blocker for applications with real-time needs but not a problem for data-crunching background tasks.&lt;/p&gt;
&lt;/div&gt;&lt;div&gt;&lt;a href="/"&gt;Back&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="footer"&gt;&lt;p&gt;&amp;copy; 2015-2017 Johannes Staffans&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/html&gt;</content><author><name>Johannes Staffans</name></author><category term="clojure"></category><category term="lambda"></category><category term="aws"></category></entry><entry><id>urn:uuid:7affbd65-5cb6-4e62-8f06-0ca42962f1a3</id><title>The handover</title><link href="https://jstaffans.github.io/posts/2017-09-08-the-handover.html" type="text/html" title="The handover" rel="alternate"></link><published>2017-11-16T22:02:47Z</published><updated>2017-11-16T22:02:47Z</updated><content type="html" xml:base="https://jstaffans.github.io/posts/2017-09-08-the-handover.html">&lt;!DOCTYPE html&gt;
&lt;html&gt;&lt;head&gt;&lt;meta charset="utf-8"&gt;&lt;meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible"&gt;&lt;meta content="width=device-width, initial-scale=1, maximum-scale=1" name="viewport"&gt;&lt;meta content="Johannes Staffans" itemprop="author" name="author"&gt;&lt;title&gt;Johannes Staffans - The handover&lt;/title&gt;&lt;link href="https://fonts.googleapis.com/css?family=Merriweather:400,700|Open+Sans:400,700" rel="stylesheet"&gt;&lt;link href="/styles/main.css" rel="stylesheet" type="text/css"&gt;&lt;/head&gt;&lt;div&gt;&lt;div class="header"&gt;&lt;div class="header__content clearfix"&gt;&lt;div class="sm-col sm-col-8"&gt;&lt;div&gt;personal website and blog of&lt;/div&gt;&lt;h1 class="header__headline"&gt;&lt;a href="/"&gt;Johannes Staffans&lt;/a&gt;&lt;/h1&gt;&lt;/div&gt;&lt;div class="sm-col flex-column"&gt;&lt;div&gt;&lt;a href="/"&gt;posts&lt;/a&gt;&lt;span&gt; &amp;middot; &lt;/span&gt;&lt;a href="/pages/about.html"&gt;about&lt;/a&gt;&lt;/div&gt;&lt;div class="pt1"&gt;elsewhere&lt;/div&gt;&lt;div&gt;&lt;a href="https://github.com/jstaffans"&gt;github&lt;/a&gt;&lt;span&gt; &amp;middot; &lt;/span&gt;&lt;a href="https://www.linkedin.com/in/jstaffans"&gt;linkedin&lt;/a&gt;&lt;span&gt; &amp;middot; &lt;/span&gt;&lt;a href="https://twitter.com/jstaffans"&gt;@jstaffans&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="clearfix"&gt;&lt;svg class="left border-triangle" version="1.1" xmlns="http://www.w3.org/2000/svg"&gt;&lt;polygon class="mask" points="0,0 30,0 30,30 0,30"&gt;&lt;/polygon&gt;&lt;polygon points="0,15 30,0 30,30"&gt;&lt;/polygon&gt;&lt;/svg&gt;&lt;svg class="right border-triangle" version="1.1" xmlns="http://www.w3.org/2000/svg"&gt;&lt;polygon class="mask" points="0,0 30,0 30,30 0,30"&gt;&lt;/polygon&gt;&lt;polygon points="30,15 0,30 0,0"&gt;&lt;/polygon&gt;&lt;/svg&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="container"&gt;&lt;div&gt;&lt;div class="flex items-baseline justify-between"&gt;&lt;h2&gt;The handover&lt;/h2&gt;&lt;div&gt;&lt;span&gt;08.09.2017&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;p&gt;The usual wisdom in software development is that a co-located team made up of full-time developers working together on a single project will perform best. But how many teams are there like that? I'd like to instead consider a team much more like the ones that I see around me â€” part-time team members, often distributed, and working on multiple projects at once. What can a team like that do to improve its performance?&lt;/p&gt;
&lt;p&gt;To break things down a bit, let's look at the efforts of a software development team from three, somewhat arbitrary angles:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Flow&lt;/strong&gt; â€” how steady is the progress of the team?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Knowledge&lt;/strong&gt; â€” does everyone on the team know what they need to know in order to do their jobs?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Process&lt;/strong&gt; â€” does the team strive to improve? Is its efforts supported by the rest of the organisation?&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href="#flow" id="flow"&gt;&lt;/a&gt;Flow&lt;/h3&gt;
&lt;p&gt;Both for individual developers and for the team as a whole, getting into the "zone" and achieving a steady flow is important. Unfortunately, there are all too many ways for the flow to be disturbed.&lt;/p&gt;
&lt;p&gt;For the individual developer, not knowing what the next task is is for example a sure way of breaking the flow, as is being interrupted by unnecessary notifications or people stopping by with requests or questions.&lt;/p&gt;
&lt;p&gt;On a project level, let's assume we're doing something like Scrum or Kanban and consider the flow of issues (let's call them stories) from the Product Backlog through whatever "In Progress" columns there may be to a final "Done" state. A steady flow here would mean that a story spends only a &lt;strong&gt;short amount of time in every state&lt;/strong&gt;, rapidly moving from one state to the next as it is being worked on.&lt;/p&gt;
&lt;p&gt;What if a developer, who has Thursday and Friday off, picks up a story on Wednesday morning? Depending on the effort involved, there might be some hope of finishing it the same day. Usually, though, squeezing design, implementation and code review into a single day rarely works. So probably it'll take until the following week, when the engineer is back at work, before the story can be finished. During the days that the developer is away, the story remains in limbo.&lt;/p&gt;
&lt;p&gt;Recognising this as a problem, the developer would do best not to pick up any stories on his or her own the day before leaving, but instead &lt;strong&gt;pair up&lt;/strong&gt; with another engineer. This is often the best way of ensuring smooth progress of a task.&lt;/p&gt;
&lt;p&gt;If pairing is not an option, there needs to be a &lt;strong&gt;handover&lt;/strong&gt;. On my team, the developer who started the work on any given story is expected to open a &lt;strong&gt;work-in-progress pull request&lt;/strong&gt; and add detailed information about the state of the implementation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;High-level description&lt;/li&gt;
&lt;li&gt;Free-form text is good&lt;/li&gt;
&lt;li&gt;Bullet points are better&lt;/li&gt;
&lt;li&gt;References to further descriptions and acceptance criteria (e.g. a link to an issue in your issue tracker)&lt;/li&gt;
&lt;li&gt;Detailed todo list in the form of checkboxes, including items that have already been implemented&lt;/li&gt;
&lt;li&gt;How-to-test instructions, screenshots, animated GIFs displaying UI behavior&lt;/li&gt;
&lt;li&gt;Any technical debt incurred or items that need to be postponed&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;An example of a handover-friendly pull request would be:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Add password reminder functionality
===================================

Widget where user can enter a registered e-mail address and press 'Reset password'.
The user will receive an e-mail. See [JIRA link], UI mockups [here].

## TODO

- [x] Backend (password reset API route, validation)
- [x] Frontend routes
- [x] Frontend component: enter e-mail
- [ ] Frontend component: landing page
- [ ] Error handling
- [ ] Mail template
- [ ] Mail sending
- [ ] Integration test

## How to test

Open browser to http://localhost:8000/reset-password, enter registered e-mail address. 

## Later

Metrics gathering (how often do users reset passwords?)

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It's also important to keep the pull request focused on the story at hand because it is all too easy to get caught up in unrelated, small fixes and refactorings when implementing a story. &lt;strong&gt;If something doesn't relate directly to the task at hand it should be in a separate pull request!&lt;/strong&gt; I'd suggest getting friendly with Git rebasing and cherry-picking, because often you'll realise you're working on something unrelated only when your halfway done with it.&lt;/p&gt;
&lt;h3&gt;&lt;a href="#knowledge" id="knowledge"&gt;&lt;/a&gt;Knowledge&lt;/h3&gt;
&lt;p&gt;On a team where handovers are frequent, you cannot have knowledge silos, because that will put a limit on who work can be handed over to. We've applied several strategies to avoid knowledge silos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For devops work, we rely heavily on the principle of &lt;strong&gt;"infrastructure as code"&lt;/strong&gt;. All our cloud resources are for example documented in templates like CloudFormation or Terraform, and deployments are scripted.&lt;/li&gt;
&lt;li&gt;Cross-code-reviewing: request review from an engineer that is not too familiar with the area of the system your code touches and take the opportunity to explain it in more detail.&lt;/li&gt;
&lt;li&gt;Treat documentation as a first-class citizen.&lt;/li&gt;
&lt;li&gt;Lots of pairing and design discussions.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Besides knowledge about the system the team is building, team members also need to be on the same page with regards to the development process and the interfaces to the rest of the organisation. If for example a new staging system is set up, team members need to know its purpose and how to deploy it. If an important customer demo is coming up, the team might need to know not to mess with a particular test system, and so forth. Our solution is to have a &lt;strong&gt;dedicated &lt;code&gt;#announcements&lt;/code&gt; Slack channel&lt;/strong&gt;, which is only for important updates and where discussion on those topics is forbidden (we have other channels for that). A team member coming back from a few days off can quickly scan this channel to get up to speed.&lt;/p&gt;
&lt;h3&gt;&lt;a href="#process" id="process"&gt;&lt;/a&gt;Process&lt;/h3&gt;
&lt;p&gt;A &lt;strong&gt;working retrospective practice&lt;/strong&gt; is important for the team to be able to improve. In our case, the retrospective, which we do at two-week intervals, is one of the few times that all team members meet in the same room. We try very hard to keep the discussion focused on things that are actionable to us, and not surprisingly, we've come to see the handover as one of the most important things to "get right". If a handover goes badly for some reason, we can be sure that it will be discussed in the retrospective, and that some action will come out of it.&lt;/p&gt;
&lt;p&gt;One technique that we've found useful at the start of new projects is &lt;strong&gt;&lt;a href="http://jstaffans.github.io/2017/02/15/mob-programming.html"&gt;mob programming&lt;/a&gt;&lt;/strong&gt;. By building out the foundations of the project in a group setting, knowledge silos can be avoided from the get-go. It's also a great way of getting to know your team mates better â€” after all, you're going to rely on them heavily!&lt;/p&gt;
&lt;h2&gt;&lt;a href="#conclusion" id="conclusion"&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Working in an interdependent fashion is part of what jells a team together. For a team consisting mostly of part-time engineers, interdependency often comes in the form of handovers. Instead of dumping a PR as a hot potato in your teammate's lap, spend a little bit of time communicating what needs to done, what parts are already in place, what can be done later and so on â€” your teammates will thank you for it! Promote co-ownership of the code, so that no part of it is known and understood only by a single team member.&lt;/p&gt;
&lt;/div&gt;&lt;div&gt;&lt;a href="/"&gt;Back&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="footer"&gt;&lt;p&gt;&amp;copy; 2015-2017 Johannes Staffans&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/html&gt;</content><author><name>Johannes Staffans</name></author><category term="agile"></category><category term="teamwork"></category><category term="part-time teams"></category></entry><entry><id>urn:uuid:61f7d274-aee4-40f2-a269-3a0656bc2764</id><title>Taking duct for a spin</title><link href="https://jstaffans.github.io/posts/2015-02-08-duct.html" type="text/html" title="Taking duct for a spin" rel="alternate"></link><published>2017-11-16T22:02:47Z</published><updated>2017-11-16T22:02:47Z</updated><content type="html" xml:base="https://jstaffans.github.io/posts/2015-02-08-duct.html">&lt;!DOCTYPE html&gt;
&lt;html&gt;&lt;head&gt;&lt;meta charset="utf-8"&gt;&lt;meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible"&gt;&lt;meta content="width=device-width, initial-scale=1, maximum-scale=1" name="viewport"&gt;&lt;meta content="Johannes Staffans" itemprop="author" name="author"&gt;&lt;title&gt;Johannes Staffans - Taking duct for a spin&lt;/title&gt;&lt;link href="https://fonts.googleapis.com/css?family=Merriweather:400,700|Open+Sans:400,700" rel="stylesheet"&gt;&lt;link href="/styles/main.css" rel="stylesheet" type="text/css"&gt;&lt;/head&gt;&lt;div&gt;&lt;div class="header"&gt;&lt;div class="header__content clearfix"&gt;&lt;div class="sm-col sm-col-8"&gt;&lt;div&gt;personal website and blog of&lt;/div&gt;&lt;h1 class="header__headline"&gt;&lt;a href="/"&gt;Johannes Staffans&lt;/a&gt;&lt;/h1&gt;&lt;/div&gt;&lt;div class="sm-col flex-column"&gt;&lt;div&gt;&lt;a href="/"&gt;posts&lt;/a&gt;&lt;span&gt; &amp;middot; &lt;/span&gt;&lt;a href="/pages/about.html"&gt;about&lt;/a&gt;&lt;/div&gt;&lt;div class="pt1"&gt;elsewhere&lt;/div&gt;&lt;div&gt;&lt;a href="https://github.com/jstaffans"&gt;github&lt;/a&gt;&lt;span&gt; &amp;middot; &lt;/span&gt;&lt;a href="https://www.linkedin.com/in/jstaffans"&gt;linkedin&lt;/a&gt;&lt;span&gt; &amp;middot; &lt;/span&gt;&lt;a href="https://twitter.com/jstaffans"&gt;@jstaffans&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="clearfix"&gt;&lt;svg class="left border-triangle" version="1.1" xmlns="http://www.w3.org/2000/svg"&gt;&lt;polygon class="mask" points="0,0 30,0 30,30 0,30"&gt;&lt;/polygon&gt;&lt;polygon points="0,15 30,0 30,30"&gt;&lt;/polygon&gt;&lt;/svg&gt;&lt;svg class="right border-triangle" version="1.1" xmlns="http://www.w3.org/2000/svg"&gt;&lt;polygon class="mask" points="0,0 30,0 30,30 0,30"&gt;&lt;/polygon&gt;&lt;polygon points="30,15 0,30 0,0"&gt;&lt;/polygon&gt;&lt;/svg&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="container"&gt;&lt;div&gt;&lt;div class="flex items-baseline justify-between"&gt;&lt;h2&gt;Taking duct for a spin&lt;/h2&gt;&lt;div&gt;&lt;span&gt;08.02.2015&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;p&gt;I have been meaning to try building a simple web application using Stuart Sierra's &lt;a href="https://github.com/stuartsierra/component"&gt;Component&lt;/a&gt; library for a while now. If you haven't heard about it, it's definitely worth having a look at - it is a lovely way of organising the different components that go into an application and gives you a smooth workflow in the REPL.&lt;/p&gt;
&lt;p&gt;So we agree that a Component-based approach is good. Where do we start? I had a run-of-the-mill web application based on Ring/Compojure in mind, but at least for me it was not at all evident how to marry a Compojure-based architecture with the Component pattern. The few examples I found seemed a bit &lt;a href="https://gist.github.com/Deraen/9d65f447593859dd07ae"&gt;contrived&lt;/a&gt;. I felt I wanted something more concrete to build on, preferrably a template of some sort.&lt;/p&gt;
&lt;p&gt;I had heard about James Reeves' &lt;a href="https://github.com/weavejester/duct"&gt;duct&lt;/a&gt; library a few weeks prior and it turned out to be exactly what I had been looking for. The duct library comes with a Leiningen plugin that generates a simple Component-based project that is very easy to build on. The integration with Compojure is elegantly handled by wrapping Compojure routes in &lt;em&gt;endpoints&lt;/em&gt;. Here's how the library author defines an endpoint:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Endpoints should resemble microservices, grouping routes by purpose. An endpoint might handle user authentication, or handle comments on a post. Strive to keep your endpoints small and focused.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Besides the endpoint solution, duct provides some other useful things, such as sensible handling of application configuration parameters through environment variables. I love not having to set those things up myself.&lt;/p&gt;
&lt;h3&gt;&lt;a href="#the-application" id="the-application"&gt;&lt;/a&gt;The application&lt;/h3&gt;
&lt;p&gt;For my toy project, I decided to implement a simple payment service. The basic interactions can be seen in the following diagram (yellow boxes represent endpoint components, green boxes are background service components):&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/pay-me.png" alt="interaction diagram" /&gt;&lt;/p&gt;
&lt;p&gt;So the user enters a credit card number, which is verified by a phony verification endpoint. The verification endpoint provides a secure token with which further transactions can be performed. A payment processing component handles interaction with an imaginary third-party service provider and a reporting component keeps track of all transactions. The imaginary third-party payment service provider is notoriously unreliable, so about half the time, the transaction will time out.&lt;/p&gt;
&lt;p&gt;Note that the credit card number verification and the payment transaction processing would in the real world be handled by the &lt;em&gt;same&lt;/em&gt; third party provider â€” I'm just faking things here, providing the token on my own.&lt;/p&gt;
&lt;p&gt;There's a tiny ClojureScript frontend that handles the AJAX request to get the token and prints out a list of transactions on the payment confirmation page.&lt;/p&gt;
&lt;p&gt;Communication between components is handled using core.async channels. As a side note, I can say that implementing this web application proved a very useful exercise in understanding core.async channels as a means of communication between components. I had earlier mainly seen them as a way of handling background tasks, such as firing web requests using the callback API of &lt;a href="http://www.http-kit.org/"&gt;http-kit&lt;/a&gt;. Now I can see that the perhaps most useful case for core.async is exactly this: communication between different parts of a system.&lt;/p&gt;
&lt;p&gt;The whole thing is deployable using Docke, more information on that in the &lt;a href="https://github.com/jstaffans/pay-me#deployment"&gt;README&lt;/a&gt;. The source code is &lt;a href="https://github.com/jstaffans/pay-me"&gt;available on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;div&gt;&lt;a href="/"&gt;Back&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="footer"&gt;&lt;p&gt;&amp;copy; 2015-2017 Johannes Staffans&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/html&gt;</content><author><name>Johannes Staffans</name></author><category term="clojure"></category><category term="microservices"></category></entry></feed>