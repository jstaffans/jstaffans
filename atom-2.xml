<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom"><title>Johannes Staffans</title><subtitle>Johannes Staffans' blog</subtitle><generator uri="https://perun.io/" version="0.4.2-SNAPSHOT">Perun</generator><link href="https://jstaffans.github.io/" type="text/html"></link><link href="https://jstaffans.github.io/atom-2.xml" rel="self"></link><link href="https://jstaffans.github.io/atom.xml" rel="first"></link><link href="https://jstaffans.github.io/atom-2.xml" rel="last"></link><link href="https://jstaffans.github.io/atom.xml" rel="previous"></link><updated>2017-12-19T20:22:47Z</updated><id>https://jstaffans.github.io/</id><entry><id>urn:uuid:efe7d49f-3bef-4375-94be-e660dd4a1be3</id><title>Stop the microservice spaghetti</title><link href="https://jstaffans.github.io/posts/2015-09-01-microservices-spaghetti.html" type="text/html" title="Stop the microservice spaghetti" rel="alternate"></link><published>2015-09-01T00:00:00Z</published><updated>2015-09-01T00:00:00Z</updated><content type="html" xml:base="https://jstaffans.github.io/posts/2015-09-01-microservices-spaghetti.html">&lt;!DOCTYPE html&gt;
&lt;html&gt;&lt;head&gt;&lt;meta charset="utf-8"&gt;&lt;meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible"&gt;&lt;meta content="width=device-width, initial-scale=1, maximum-scale=1" name="viewport"&gt;&lt;meta content="Johannes Staffans" itemprop="author" name="author"&gt;&lt;title&gt;Johannes Staffans - Stop the microservice spaghetti&lt;/title&gt;&lt;link href="https://fonts.googleapis.com/css?family=Merriweather:400,700|Open+Sans:400,700" rel="stylesheet"&gt;&lt;link href="/styles/main.css" rel="stylesheet" type="text/css"&gt;&lt;/head&gt;&lt;div&gt;&lt;div class="header"&gt;&lt;div class="header__content clearfix"&gt;&lt;div class="sm-col sm-col-8"&gt;&lt;div&gt;personal website and blog of&lt;/div&gt;&lt;h1 class="header__headline"&gt;&lt;a href="/"&gt;Johannes Staffans&lt;/a&gt;&lt;/h1&gt;&lt;/div&gt;&lt;div class="sm-col flex-column"&gt;&lt;div&gt;&lt;a href="/"&gt;posts&lt;/a&gt;&lt;span&gt; &amp;middot; &lt;/span&gt;&lt;a href="/pages/about.html"&gt;about&lt;/a&gt;&lt;/div&gt;&lt;div class="pt1"&gt;elsewhere&lt;/div&gt;&lt;div&gt;&lt;a href="https://github.com/jstaffans"&gt;github&lt;/a&gt;&lt;span&gt; &amp;middot; &lt;/span&gt;&lt;a href="https://www.linkedin.com/in/jstaffans"&gt;linkedin&lt;/a&gt;&lt;span&gt; &amp;middot; &lt;/span&gt;&lt;a href="https://twitter.com/jstaffans"&gt;@jstaffans&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="clearfix"&gt;&lt;svg class="left border-triangle" version="1.1" xmlns="http://www.w3.org/2000/svg"&gt;&lt;polygon class="mask" points="0,0 30,0 30,30 0,30"&gt;&lt;/polygon&gt;&lt;polygon points="0,15 30,0 30,30"&gt;&lt;/polygon&gt;&lt;/svg&gt;&lt;svg class="right border-triangle" version="1.1" xmlns="http://www.w3.org/2000/svg"&gt;&lt;polygon class="mask" points="0,0 30,0 30,30 0,30"&gt;&lt;/polygon&gt;&lt;polygon points="30,15 0,30 0,0"&gt;&lt;/polygon&gt;&lt;/svg&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="container"&gt;&lt;div&gt;&lt;div class="flex items-baseline justify-between"&gt;&lt;h2&gt;Stop the microservice spaghetti&lt;/h2&gt;&lt;div&gt;&lt;span&gt;01.09.2015&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;p&gt;When moving from a monolithic architecture to microservices, you immediately appreciate the agility with which you can develop new functionality. It's easy to get over-enthusiastic and throw a microservice at any problem you have and not spend much time thinking about the bigger picture. The last thing you want to do is replace the monolithic spaghetti code with a distributed service spaghetti. Here are some of the lessons I've learned over the last year or so of working with microservices and some thoughts about what could have been solved in a better way.&lt;/p&gt;
&lt;p&gt;The first thing to realise is that as soon as you start doing microservices, you have traded your monolithic problem for a distributed systems problem with implications for deployment, communication, monitirogin and so on. All those things should be carefully thought about. I'm not going into details about deployment this time - suffice to say that microservices should be independently deployable and runnable, ideally as a self-contained thing.&lt;/p&gt;
&lt;h3&gt;&lt;a href="#platform-versus-distributed-services" id="platform-versus-distributed-services"&gt;&lt;/a&gt;Platform versus distributed services&lt;/h3&gt;
&lt;p&gt;I recently watched a &lt;a href="https://www.youtube.com/watch?v=yk_VlKUDKMA"&gt;talk&lt;/a&gt; about microservices from GR8Conf 2015 that resonated very well with me. In the talk, two different kinds of microservice architectures are described: platforms and distributed service layers.&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/platform.png" alt="platform" /&gt;&lt;/p&gt;
&lt;p&gt;A &lt;strong&gt;platform&lt;/strong&gt; consists of vertically sliced microservices and a gateway layer responsible for orchestrating access to the services — the services themselves do not talk to each other but are instead completely self-contained. This includes having their own domain models, which can be shared with the gateway layer via e.g. a client library, a set of Protobuf message types or something else. The gateway layer is responsible for discoverability and in case of failure, should let any clients know that a particular service is not available. HATEOAS is one way of accomplishing this, the gateway providing a service map as part of its API:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;"_links"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nt"&gt;"rel"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"product.reviews"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;"href"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"/reviews{?productId}"&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nt"&gt;"rel"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"product.users"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;"href"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"/users"&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="err"&gt;...&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In a platform architecture, the functionality of various backend services is combined in order to produce a response to a client request. Another kind of microservice architecture is the &lt;strong&gt;distributed service layer&lt;/strong&gt; approach, where services are acting more or less individually in order to accomplish business goals. They may be called by a higher-layer API, by other microservices or maybe directly by clients. This is the case that can easily turn into spaghetti if you are not careful about the interactions between services.&lt;/p&gt;
&lt;h4&gt;&lt;a href="#decoupled-distributed-services" id="decoupled-distributed-services"&gt;&lt;/a&gt;Decoupled distributed services&lt;/h4&gt;
&lt;p&gt;It's useful to strive for a tree-like architecture, with higher-level services calling lower-level ones in a sort of &lt;a href="https://en.wikipedia.org/wiki/Directed_acyclic_graph"&gt;directed acyclic graph&lt;/a&gt;. Anything else will lead to high coupling between services. It's also useful to organise services into two rough camps - services that produce data and other services that consume data.&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/distributed-services.png" alt="platform" /&gt;&lt;/p&gt;
&lt;p&gt;The clients of a particular service should be responsible for understanding its API and provide data in a format that the service expects. API versioning and good documentation help here — sharing a domain model is not such a good idea, because the landscape is more dynamic with any service being able to call basically any other service in the topography.&lt;/p&gt;
&lt;p&gt;The above diagram sort of implies RPC being the method of communication between services. In my mind, RPC should however be avoided whenever possible. Communicating using queues (for services where latency is not such a big deal, such an email sending service) or with some distributed messaging scheme should be greatly preferred, because it further decouples services from each other. If you are worried about introducing further overhead in the form of a central message broker, have a look at what your platform already offers — in an AWS landscape, for example, it's possible to build a pub/sub architecture using SQS and SNS. It can be &lt;a href="https://github.com/meducation/propono"&gt;beautifully simple&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As the bane of distributed service communication, look no further than shared database schemas. This introduces extreme coupling between services and makes maintaining the database schema very hard. Avoid at all costs!&lt;/p&gt;
&lt;h3&gt;&lt;a href="#conclusion" id="conclusion"&gt;&lt;/a&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;This post was more or less a brain dump of my thoughts on how to architect a microservice-based backend. I hope it can work as food for though for anyone embarking on a similar venture. As with any fancy information system, microservices aren't a silver bullet but proper design and some forethought can enable you to reap their full benefit in terms of speed of development, testability and scalability.&lt;/p&gt;
&lt;/div&gt;&lt;div&gt;&lt;a href="/"&gt;Back&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="footer"&gt;&lt;p&gt;&amp;copy; 2015-2017 Johannes Staffans&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/html&gt;</content><author><name>Johannes Staffans</name></author><category term="devops"></category><category term="microservices"></category></entry><entry><id>urn:uuid:d7699272-d914-4079-83ab-eb1ddb2723ab</id><title>Week 26</title><link href="https://jstaffans.github.io/posts/2015-06-30-week-26.html" type="text/html" title="Week 26" rel="alternate"></link><published>2015-06-30T00:00:00Z</published><updated>2015-06-30T00:00:00Z</updated><content type="html" xml:base="https://jstaffans.github.io/posts/2015-06-30-week-26.html">&lt;!DOCTYPE html&gt;
&lt;html&gt;&lt;head&gt;&lt;meta charset="utf-8"&gt;&lt;meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible"&gt;&lt;meta content="width=device-width, initial-scale=1, maximum-scale=1" name="viewport"&gt;&lt;meta content="Johannes Staffans" itemprop="author" name="author"&gt;&lt;title&gt;Johannes Staffans - Week 26&lt;/title&gt;&lt;link href="https://fonts.googleapis.com/css?family=Merriweather:400,700|Open+Sans:400,700" rel="stylesheet"&gt;&lt;link href="/styles/main.css" rel="stylesheet" type="text/css"&gt;&lt;/head&gt;&lt;div&gt;&lt;div class="header"&gt;&lt;div class="header__content clearfix"&gt;&lt;div class="sm-col sm-col-8"&gt;&lt;div&gt;personal website and blog of&lt;/div&gt;&lt;h1 class="header__headline"&gt;&lt;a href="/"&gt;Johannes Staffans&lt;/a&gt;&lt;/h1&gt;&lt;/div&gt;&lt;div class="sm-col flex-column"&gt;&lt;div&gt;&lt;a href="/"&gt;posts&lt;/a&gt;&lt;span&gt; &amp;middot; &lt;/span&gt;&lt;a href="/pages/about.html"&gt;about&lt;/a&gt;&lt;/div&gt;&lt;div class="pt1"&gt;elsewhere&lt;/div&gt;&lt;div&gt;&lt;a href="https://github.com/jstaffans"&gt;github&lt;/a&gt;&lt;span&gt; &amp;middot; &lt;/span&gt;&lt;a href="https://www.linkedin.com/in/jstaffans"&gt;linkedin&lt;/a&gt;&lt;span&gt; &amp;middot; &lt;/span&gt;&lt;a href="https://twitter.com/jstaffans"&gt;@jstaffans&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="clearfix"&gt;&lt;svg class="left border-triangle" version="1.1" xmlns="http://www.w3.org/2000/svg"&gt;&lt;polygon class="mask" points="0,0 30,0 30,30 0,30"&gt;&lt;/polygon&gt;&lt;polygon points="0,15 30,0 30,30"&gt;&lt;/polygon&gt;&lt;/svg&gt;&lt;svg class="right border-triangle" version="1.1" xmlns="http://www.w3.org/2000/svg"&gt;&lt;polygon class="mask" points="0,0 30,0 30,30 0,30"&gt;&lt;/polygon&gt;&lt;polygon points="30,15 0,30 0,0"&gt;&lt;/polygon&gt;&lt;/svg&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="container"&gt;&lt;div&gt;&lt;div class="flex items-baseline justify-between"&gt;&lt;h2&gt;Week 26&lt;/h2&gt;&lt;div&gt;&lt;span&gt;30.06.2015&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;p&gt;Some random things I've been thinking about this week:&lt;/p&gt;
&lt;h4&gt;&lt;a href="#category-theory" id="category-theory"&gt;&lt;/a&gt;Category Theory&lt;/h4&gt;
&lt;p&gt;The first thing that comes into my mind when I hear "category theory" is the basic stuff we learned about at university, such as the set union operation. It turns out that category theory is much more than that — we can also reason about the functions and types that make up a software application using category theory. I don't really grasp it yet, but I will try to dive into it a bit more and maybe pick up some Haskell along the way.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Bartosz Milewski has a really nice article series called &lt;a href="http://bartoszmilewski.com/2014/10/28/category-theory-for-programmers-the-preface/"&gt;Category Theory for Programmers&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;For Clojure, there is the &lt;a href="https://github.com/funcool/cats"&gt;cats library&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;I heard about a book called &lt;a href="https://gumroad.com/l/maybe-haskell/?utm_source=giant-robots&amp;amp;utm_medium=blog&amp;amp;utm_campaign=announcement"&gt;Maybe Haskell&lt;/a&gt; that should clear up some basic concepts.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a href="#n1-problem" id="n1-problem"&gt;&lt;/a&gt;N+1 problem&lt;/h4&gt;
&lt;p&gt;I recently had a scenario where an entity fetched from the database needed an additional field from a different storage backend, requiring an additional query to that storage medium for each row. Think of fetching a collection of books and for each book having to fetch its author separately. That's a lot of queries! This is called the N+1 problem.&lt;/p&gt;
&lt;p&gt;In my case, I solved the problem with some application-layer caching. Another common pattern is to get the id's that need to be fetched and do a batch query using e.g. &lt;code&gt;IN (1, 2, 3 ..)&lt;/code&gt;, which is one of the things that the neat &lt;a href="https://github.com/kachayev/muse/blob/master/docs/sql.md"&gt;muse library for Clojure&lt;/a&gt; provides. But keep in mind that using a list of id's is &lt;a href="http://blog.jooq.org/2013/11/11/id-lists-arent-the-best-solution-for-the-n1-problem/"&gt;not going to perform very well&lt;/a&gt; for a large number of id's.&lt;/p&gt;
&lt;h4&gt;&lt;a href="#queues-back-pressure" id="queues-back-pressure"&gt;&lt;/a&gt;Queues, back pressure&lt;/h4&gt;
&lt;p&gt;I have grown very fond of queues as a way of decoupling the different parts of a system. &lt;a href="https://www.youtube.com/watch?v=ROor6_NGIWU"&gt;The Language of the System&lt;/a&gt; is one of those classic Rich Hickey talks and provides some context for why system communication is best done using data put on queues. Zach Tellman also did a &lt;a href="https://www.youtube.com/watch?v=1bNOO3xxMc0"&gt;great talk on the challenges of a queue-based system&lt;/a&gt; at Clojure/West 2015.&lt;/p&gt;
&lt;p&gt;One of the terms that gets thrown around a lot when talking about queues is back pressure. This basically refers to some mechanism that the consumer of a queue has to let the producer know that it can't handle any more work at the moment and may come in the form of an HTTP response code, a RejectedExecutionException or something other interesting. Another strategy would be to eliminate the need for back pressure by using e.g. a dropping buffer.&lt;/p&gt;
&lt;h4&gt;&lt;a href="#proper-api-design-and-hateoas" id="proper-api-design-and-hateoas"&gt;&lt;/a&gt;Proper API design and HATEOAS&lt;/h4&gt;
&lt;p&gt;I've finally gotten around the reading Leonard Richardson's and Mike Amundsen's book &lt;a href="http://www.restfulwebapis.org/"&gt;RESTful Web APIs&lt;/a&gt;. It's making me realise all the mistakes I've made designing APIs in the past — I'm definitely guilty of forcing API consumers to read the documentation instead of following the &lt;a href="https://en.wikipedia.org/wiki/HATEOAS"&gt;HATEOAS pattern&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It's also made me think again about the different data formats REST APIs normally produce. Everyone's favorite, JSON, turns out to be a pretty bad choice since it isn't a hypermedia format due to its lack of links. The &lt;a href="https://github.com/cognitect/transit-format"&gt;Transit format&lt;/a&gt; does and also takes advantage of the fast, native JSON parsing that browsers provide. Other extensions to JSON include &lt;a href="http://stateless.co/hal_specification.html"&gt;HAL&lt;/a&gt; and Collection+JSON.&lt;/p&gt;
&lt;p&gt;Another observation would be that XML perhaps isn't so bad at all, since it can support the HATEOAS pattern bettern than JSON.&lt;/p&gt;
&lt;/div&gt;&lt;div&gt;&lt;a href="/"&gt;Back&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="footer"&gt;&lt;p&gt;&amp;copy; 2015-2017 Johannes Staffans&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/html&gt;</content><author><name>Johannes Staffans</name></author><category term="braindump"></category></entry><entry><id>urn:uuid:94ce595a-3378-47b0-bb76-91991db0d618</id><title>freq-words: learn to read with ClojureScript</title><link href="https://jstaffans.github.io/posts/2015-05-25-freq-words.html" type="text/html" title="freq-words: learn to read with ClojureScript" rel="alternate"></link><published>2015-05-25T00:00:00Z</published><updated>2015-05-25T00:00:00Z</updated><content type="html" xml:base="https://jstaffans.github.io/posts/2015-05-25-freq-words.html">&lt;!DOCTYPE html&gt;
&lt;html&gt;&lt;head&gt;&lt;meta charset="utf-8"&gt;&lt;meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible"&gt;&lt;meta content="width=device-width, initial-scale=1, maximum-scale=1" name="viewport"&gt;&lt;meta content="Johannes Staffans" itemprop="author" name="author"&gt;&lt;title&gt;Johannes Staffans - freq-words: learn to read with ClojureScript&lt;/title&gt;&lt;link href="https://fonts.googleapis.com/css?family=Merriweather:400,700|Open+Sans:400,700" rel="stylesheet"&gt;&lt;link href="/styles/main.css" rel="stylesheet" type="text/css"&gt;&lt;/head&gt;&lt;div&gt;&lt;div class="header"&gt;&lt;div class="header__content clearfix"&gt;&lt;div class="sm-col sm-col-8"&gt;&lt;div&gt;personal website and blog of&lt;/div&gt;&lt;h1 class="header__headline"&gt;&lt;a href="/"&gt;Johannes Staffans&lt;/a&gt;&lt;/h1&gt;&lt;/div&gt;&lt;div class="sm-col flex-column"&gt;&lt;div&gt;&lt;a href="/"&gt;posts&lt;/a&gt;&lt;span&gt; &amp;middot; &lt;/span&gt;&lt;a href="/pages/about.html"&gt;about&lt;/a&gt;&lt;/div&gt;&lt;div class="pt1"&gt;elsewhere&lt;/div&gt;&lt;div&gt;&lt;a href="https://github.com/jstaffans"&gt;github&lt;/a&gt;&lt;span&gt; &amp;middot; &lt;/span&gt;&lt;a href="https://www.linkedin.com/in/jstaffans"&gt;linkedin&lt;/a&gt;&lt;span&gt; &amp;middot; &lt;/span&gt;&lt;a href="https://twitter.com/jstaffans"&gt;@jstaffans&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="clearfix"&gt;&lt;svg class="left border-triangle" version="1.1" xmlns="http://www.w3.org/2000/svg"&gt;&lt;polygon class="mask" points="0,0 30,0 30,30 0,30"&gt;&lt;/polygon&gt;&lt;polygon points="0,15 30,0 30,30"&gt;&lt;/polygon&gt;&lt;/svg&gt;&lt;svg class="right border-triangle" version="1.1" xmlns="http://www.w3.org/2000/svg"&gt;&lt;polygon class="mask" points="0,0 30,0 30,30 0,30"&gt;&lt;/polygon&gt;&lt;polygon points="30,15 0,30 0,0"&gt;&lt;/polygon&gt;&lt;/svg&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="container"&gt;&lt;div&gt;&lt;div class="flex items-baseline justify-between"&gt;&lt;h2&gt;freq-words: learn to read with ClojureScript&lt;/h2&gt;&lt;div&gt;&lt;span&gt;25.05.2015&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;p&gt;My father, a retired elementary school teacher, runs a &lt;a href="http://www.kjellstaffans.fi"&gt;website&lt;/a&gt; offering material for young children who are just starting to learn how to read and write in Swedish. A big portion of the material is geared towards children who experience difficulties learning the basics of reading and writing and one of the teaching aids is an &lt;a href="http://www.kjellstaffans.fi/wp-content/uploads/frekord.html"&gt;old Flash application&lt;/a&gt; I wrote almost a decade ago; children can use the application to practice reading some of the most common words in the Swedish language.&lt;/p&gt;
&lt;p&gt;I think it's time to give the application a make-over by way of modernising the UI and providing some frequently-asked-for features such as a timer and the possibility of saving high scores. I'll take the opportunity to learn some more about web application development using ClojureScript. This article is the first in a series describing my successes and failures developing the application.&lt;/p&gt;
&lt;p&gt;I use React.js a lot a work, so I'm interested in trying out one of its ClojureScript wrappers. I decided to pick Reagent because its state management facilities seem simpler than Om's. While I'm at it I'll try out &lt;a href="http://boot-clj.com"&gt;Boot&lt;/a&gt; as well. Martin Klepsch, a friend from the Berlin Clojure meetup group, handily provides a &lt;a href="https://github.com/martinklepsch/tenzing"&gt;batteries-included template for ClojureScript development with Boot&lt;/a&gt;. Thanks Martin!&lt;/p&gt;
&lt;p&gt;I'll use Cursive Clojure as my development environment and base my styles on Twitter Bootstrap. Sass is a must-have in my book so I'll try to integrate that as well.&lt;/p&gt;
&lt;p&gt;With the basic dependencies sorted out it's time to get started!&lt;/p&gt;
&lt;h3&gt;&lt;a href="#setting-up-the-project" id="setting-up-the-project"&gt;&lt;/a&gt;Setting up the project&lt;/h3&gt;
&lt;p&gt;Setting up a new Boot+ClojureScript project is easy with Tenzing:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight"&gt;&lt;span&gt;&lt;/span&gt;$&amp;gt; lein new tenzing freq-words +reagent
$&amp;gt; &lt;span class="nb"&gt;cd&lt;/span&gt; freq-words
$&amp;gt; boot dev
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pointing a browser to &lt;code&gt;localhost:3000&lt;/code&gt; now gives us a view of the basic default application.&lt;/p&gt;
&lt;p&gt;As I said earlier, I use Cursive (the Clojure/ClojureScript plugin for IntelliJ IDEA) as my development environment, which unfortunately does not integrate directly with Boot for the goodies like auto-completion and inline documentation that I'm used to. In order to get those working, I add a dummy &lt;code&gt;project.clj&lt;/code&gt; file that Cursive can pick up, containing the application dependencies from &lt;code&gt;build.boot&lt;/code&gt; file (I won't add any Boot-specific dependencies since I won't be changing the &lt;code&gt;build.boot&lt;/code&gt; file that much):&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defproject &lt;/span&gt;&lt;span class="nv"&gt;freq-words&lt;/span&gt; &lt;span class="s"&gt;"0.1.0-SNAPSHOT"&lt;/span&gt;
  &lt;span class="ss"&gt;:description&lt;/span&gt; &lt;span class="s"&gt;"freq-words - project file for Cursive Clojure"&lt;/span&gt;
  &lt;span class="ss"&gt;:license&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:name&lt;/span&gt; &lt;span class="s"&gt;"Eclipse Public License"&lt;/span&gt;
            &lt;span class="ss"&gt;:url&lt;/span&gt; &lt;span class="s"&gt;"http://www.eclipse.org/legal/epl-v10.html"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="ss"&gt;:dependencies&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="nv"&gt;reagent&lt;/span&gt; &lt;span class="s"&gt;"0.5.0"&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Cursive can now pick up the project's dependencies. I'll just have to remember to update both files if I add any third-party libraries.&lt;/p&gt;
&lt;h4&gt;&lt;a href="#my-first-boot-task-compiling-sass-files" id="my-first-boot-task-compiling-sass-files"&gt;&lt;/a&gt;My first Boot task: compiling Sass files&lt;/h4&gt;
&lt;p&gt;I will base my layout on a free theme from Bootswatch, but will also most likely add some styles of my own. I think CSS gets tedious really fast so I prefer to use a higher-level language like Sass. Having downloaded the base theme as &lt;code&gt;src/scss/_bootstrap.scss&lt;/code&gt;, I will add an &lt;code&gt;src/scss/main.scss&lt;/code&gt; file as well where I include the base theme and can add any custom styles:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s2"&gt;bootstrap'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// a little custom style&lt;/span&gt;
&lt;span class="nc"&gt;.my-form&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;background&lt;/span&gt;&lt;span class="nd"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;blue&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The challenge now is to add Sass compilation to the Boot build chain. A custom task does the trick (based on a conversation on the &lt;a href="http://hoplon.discoursehosting.net/t/trying-to-create-a-boot-task-to-compile-sass-files/386"&gt;Hoplon mailing list&lt;/a&gt;):&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;deftask&lt;/span&gt; &lt;span class="nv"&gt;sass&lt;/span&gt;
  &lt;span class="p"&gt;[]&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;tmp&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;core/tmp-dir!&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;core/with-pre-wrap&lt;/span&gt; &lt;span class="nv"&gt;fs&lt;/span&gt; 
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;in-files&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;core/input-files&lt;/span&gt; &lt;span class="nv"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="nv"&gt;in-main&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;first &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;core/by-re&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="s"&gt;"^(?!_).*\.scss"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="nv"&gt;in-files&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="nv"&gt;out-dir&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;io/file&lt;/span&gt; &lt;span class="nv"&gt;tmp&lt;/span&gt; &lt;span class="s"&gt;"stylesheets"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="nv"&gt;out&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;io/file&lt;/span&gt; &lt;span class="nv"&gt;out-dir&lt;/span&gt; &lt;span class="s"&gt;"main.css"&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;.mkdirs&lt;/span&gt; &lt;span class="nv"&gt;out-dir&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;util/dosh&lt;/span&gt; &lt;span class="s"&gt;"sassc"&lt;/span&gt;
          &lt;span class="s"&gt;"--style"&lt;/span&gt; &lt;span class="s"&gt;"compressed"&lt;/span&gt;
          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;.getPath&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;core/tmp-file&lt;/span&gt; &lt;span class="nv"&gt;in-main&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;.getPath&lt;/span&gt; &lt;span class="nv"&gt;out&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;-&amp;gt; &lt;/span&gt;&lt;span class="nv"&gt;fs&lt;/span&gt;
          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;core/add-resource&lt;/span&gt; &lt;span class="nv"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;core/commit!&lt;/span&gt;&lt;span class="p"&gt;))))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This task only considers one file (the first &lt;code&gt;.scss&lt;/code&gt; files that does not start with an underscore). When using Sass, files whose name start with an underscore are files that are included in another stylesheet (&lt;code&gt;src/scss/main.scss&lt;/code&gt; handles all the includes in my case), so we do not need to consider them separately.&lt;/p&gt;
&lt;p&gt;To make the task find the Sass sources, we need to add the relevant directory to the &lt;code&gt;:source-paths&lt;/code&gt; key in the Boot environment:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;; This is one of the first lines in the build.boot file&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;set-env!&lt;/span&gt; &lt;span class="ss"&gt;:source-paths&lt;/span&gt; &lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"src/cljs"&lt;/span&gt; &lt;span class="s"&gt;"src/scss"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nv"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And to integrate our task into the Boot build chain, we'll add it to the pre-defined &lt;code&gt;build&lt;/code&gt; task that is part of the Tenzing template:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;deftask&lt;/span&gt; &lt;span class="nv"&gt;build&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;comp &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;speak&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;sass&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;cljs&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Boot being awesome, we get things like file change watching for the Sass files automatically.&lt;/p&gt;
&lt;p&gt;We can verify that everything works, both for development and production use:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight"&gt;&lt;span&gt;&lt;/span&gt;§&amp;gt; boot dev  
&lt;span class="c1"&gt;# Development site running on http://localhost:3000&lt;/span&gt;
§&amp;gt; boot build
$&amp;gt; &lt;span class="nb"&gt;cd&lt;/span&gt; target &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; python -m SimpleHTTPServer
&lt;span class="c1"&gt;# Production site running on http://localhost:8000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a href="#wrap-up" id="wrap-up"&gt;&lt;/a&gt;Wrap-up&lt;/h3&gt;
&lt;p&gt;We now have a pretty nice setup to start working on the application itself. Sources are &lt;a href="https://github.com/jstaffans/freq-words"&gt;available on Github&lt;/a&gt;. Stay tuned for the next installment in the series!&lt;/p&gt;
&lt;/div&gt;&lt;div&gt;&lt;a href="/"&gt;Back&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="footer"&gt;&lt;p&gt;&amp;copy; 2015-2017 Johannes Staffans&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/html&gt;</content><author><name>Johannes Staffans</name></author><category term="clojurescript"></category><category term="reagent"></category><category term="boot"></category></entry><entry><id>urn:uuid:738cd775-b94a-4931-b111-e434a4059cc1</id><title>Spicing up Java projects with Clojure</title><link href="https://jstaffans.github.io/posts/2015-05-21-clojure-spice.html" type="text/html" title="Spicing up Java projects with Clojure" rel="alternate"></link><published>2015-05-21T00:00:00Z</published><updated>2015-05-21T00:00:00Z</updated><content type="html" xml:base="https://jstaffans.github.io/posts/2015-05-21-clojure-spice.html">&lt;!DOCTYPE html&gt;
&lt;html&gt;&lt;head&gt;&lt;meta charset="utf-8"&gt;&lt;meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible"&gt;&lt;meta content="width=device-width, initial-scale=1, maximum-scale=1" name="viewport"&gt;&lt;meta content="Johannes Staffans" itemprop="author" name="author"&gt;&lt;title&gt;Johannes Staffans - Spicing up Java projects with Clojure&lt;/title&gt;&lt;link href="https://fonts.googleapis.com/css?family=Merriweather:400,700|Open+Sans:400,700" rel="stylesheet"&gt;&lt;link href="/styles/main.css" rel="stylesheet" type="text/css"&gt;&lt;/head&gt;&lt;div&gt;&lt;div class="header"&gt;&lt;div class="header__content clearfix"&gt;&lt;div class="sm-col sm-col-8"&gt;&lt;div&gt;personal website and blog of&lt;/div&gt;&lt;h1 class="header__headline"&gt;&lt;a href="/"&gt;Johannes Staffans&lt;/a&gt;&lt;/h1&gt;&lt;/div&gt;&lt;div class="sm-col flex-column"&gt;&lt;div&gt;&lt;a href="/"&gt;posts&lt;/a&gt;&lt;span&gt; &amp;middot; &lt;/span&gt;&lt;a href="/pages/about.html"&gt;about&lt;/a&gt;&lt;/div&gt;&lt;div class="pt1"&gt;elsewhere&lt;/div&gt;&lt;div&gt;&lt;a href="https://github.com/jstaffans"&gt;github&lt;/a&gt;&lt;span&gt; &amp;middot; &lt;/span&gt;&lt;a href="https://www.linkedin.com/in/jstaffans"&gt;linkedin&lt;/a&gt;&lt;span&gt; &amp;middot; &lt;/span&gt;&lt;a href="https://twitter.com/jstaffans"&gt;@jstaffans&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="clearfix"&gt;&lt;svg class="left border-triangle" version="1.1" xmlns="http://www.w3.org/2000/svg"&gt;&lt;polygon class="mask" points="0,0 30,0 30,30 0,30"&gt;&lt;/polygon&gt;&lt;polygon points="0,15 30,0 30,30"&gt;&lt;/polygon&gt;&lt;/svg&gt;&lt;svg class="right border-triangle" version="1.1" xmlns="http://www.w3.org/2000/svg"&gt;&lt;polygon class="mask" points="0,0 30,0 30,30 0,30"&gt;&lt;/polygon&gt;&lt;polygon points="30,15 0,30 0,0"&gt;&lt;/polygon&gt;&lt;/svg&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="container"&gt;&lt;div&gt;&lt;div class="flex items-baseline justify-between"&gt;&lt;h2&gt;Spicing up Java projects with Clojure&lt;/h2&gt;&lt;div&gt;&lt;span&gt;21.05.2015&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;p&gt;Many engineers with an interest in Clojure are probably working on Java code bases for most of the day. This doesn't have to be the end of the world if you're tickling to write some Clojure code, as there are many ways of bringing Clojure to existing Java-based projects.&lt;/p&gt;
&lt;p&gt;You can opt to build parts of the system separately using Clojure, providing a JAR file that can be used in the main project. It's even relatively straight-forward to write Clojure namespaces alongside the Java packages and do Java-Clojure interop. But there are also some subtler ways of using Clojure with legacy Java code bases. One of those is adding a REPL to your Java application and using it to do REPL-based testing and exploration with Clojure.&lt;/p&gt;
&lt;h3&gt;&lt;a href="#jvm-break-glass-driving-spring-with-clojure" id="jvm-break-glass-driving-spring-with-clojure"&gt;&lt;/a&gt;JVM Break Glass: driving Spring with Clojure&lt;/h3&gt;
&lt;p&gt;An excellent place to start is the &lt;a href="https://github.com/matlux/jvm-breakglass"&gt;JVM Break Glass library&lt;/a&gt;. The purpose of this library is to provide REPL facilities for traditional enterprise Java applications. It works especially well for Spring-based applications. Once you have a REPL running, you can use methods provided by the library to fetch Spring beans and interact with them as you would with any other Java object.&lt;/p&gt;
&lt;p&gt;If your Java application is anything like the ones I've seen, it probably provides a REST API of some sort and is most likely organized into different layers — Controllers, Services and so on. In addition to unit tests, I have often seen people using cURL or even a browser as the main tool for test-driving the system, which of course means going through the Controller layer even if the thing we are interested in is actually a piece of business logic in some deeper application layer.&lt;/p&gt;
&lt;p&gt;Being able to play around with beans in the Service layer directly in a running system is a way of focusing exactly on the thing you're interested in and iterating rapidly. This is second nature to Clojurists who do REPL-driven programming all the time, but almost magical to most Java programmers.&lt;/p&gt;
&lt;h4&gt;&lt;a href="#getting-started" id="getting-started"&gt;&lt;/a&gt;Getting started&lt;/h4&gt;
&lt;p&gt;First add the JVM Break Glass library as a dependency to your project:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;net.matlux&lt;span class="nt"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;jvm-breakglass&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;version&amp;gt;&lt;/span&gt;0.0.8&lt;span class="nt"&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Spring then needs to be configured to launch the REPL when the application starts. In this example, we are only interested in having a REPL during local development and not in production, which we can achieve using Spring profiles:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@Bean&lt;/span&gt;
&lt;span class="nd"&gt;@Profile&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"dev"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;NreplServerSpring&lt;/span&gt; &lt;span class="nf"&gt;repl&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;NreplServerSpring&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1112&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will launch an nREPL listening to port 1112 when the application is launched with the JVM option &lt;code&gt;-Dspring.profiles.active=dev&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;With the application running, you can then simply connect to the nREPL server with Leiningen or using whatever Clojure development environment you otherwise use.&lt;/p&gt;
&lt;p&gt;So far, so good. When you have a REPL open, the following will get you started:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use&lt;/span&gt; &lt;span class="ss"&gt;'cl-java-introspector.spring&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use&lt;/span&gt; &lt;span class="ss"&gt;'cl-java-introspector.core&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;nil&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After that, start looking for your beans and play around!&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;filter &lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;.contains&lt;/span&gt; &lt;span class="nv"&gt;%&lt;/span&gt; &lt;span class="s"&gt;"Service"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;get-beans&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="nv"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"paymentService"&lt;/span&gt; &lt;span class="s"&gt;"reportingService"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;def &lt;/span&gt;&lt;span class="nv"&gt;reporting-service&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;get-bean&lt;/span&gt; &lt;span class="s"&gt;"reportingService"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="nv"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="ss"&gt;'user/reporting-service&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;methods-info&lt;/span&gt; &lt;span class="nv"&gt;reporting-service&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;.getPayments&lt;/span&gt; &lt;span class="nv"&gt;reporting-service&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;  &lt;span class="c1"&gt;; no payments yet!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is already quite powerful for exploring APIs, driving Service layer beans and so on. The &lt;a href="https://github.com/matlux/jvm-breakglass"&gt;JVM Break Glass project page&lt;/a&gt; has some other examples of what is possible using the REPL. But besides pure exploration, there are lots more things you can do once you have an nREPL hook into your project.&lt;/p&gt;
&lt;h4&gt;&lt;a href="#data-visualisations-with-incanter" id="data-visualisations-with-incanter"&gt;&lt;/a&gt;Data visualisations with Incanter&lt;/h4&gt;
&lt;p&gt;One way of leveraging Clojure in Java projects is taking advantage of its impressive data processing and analysis capabilities. I recommend the &lt;a href="https://www.packtpub.com/big-data-and-business-intelligence/clojure-data-analysis-cookbook"&gt;Clojure Data Analysis Cookbook&lt;/a&gt; for anyone interested in learning more about patterns for data crunching in Clojure. Here, we'll take a look at how to visualise data using the &lt;a href="http://incanter.org/"&gt;Incanter&lt;/a&gt; library.&lt;/p&gt;
&lt;p&gt;I think visualising data flowing through a live application is one of the best ways of gaining deeper understanding into how the application works. Of course, everything we do here can also be accomplished by logging data and using an external data analysis application, but being able to do it directly in the application brings a whole different level of interactivity to the table.&lt;/p&gt;
&lt;p&gt;First, we'll add one more dependency to our project:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;im.chit&lt;span class="nt"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;vinyasa&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;version&amp;gt;&lt;/span&gt;0.3.4&lt;span class="nt"&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;a href="https://github.com/zcaudate/vinyasa"&gt;vinyasa library&lt;/a&gt; provides a kind of toolbelt for REPL-driven development in Clojure. One of the tools included is a utility called &lt;a href="https://github.com/zcaudate/vinyasa#pull"&gt;pull&lt;/a&gt;. Using this function, Maven dependencies can be pulled in directly from the REPL, without the need for adding dependencies to your project. More importantly, there is no need to restart anything, which makes it perfect for REPL exploration.&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;; This will take a long time the first time you do it because &lt;/span&gt;
&lt;span class="c1"&gt;; incanter has lots of dependencies. After that, the dependencies &lt;/span&gt;
&lt;span class="c1"&gt;; will be cached in your local Maven repository. &lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;pull&lt;/span&gt; &lt;span class="ss"&gt;'incanter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;; lots of dependencies ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As an example, we'll do some exploration of the &lt;a href="http://jstaffans.github.io/blog/2015/03/16/spring-boot.html"&gt;toy payment system&lt;/a&gt; I wrote about in a previous blog post. Given a credit card number, the service will perform a charge of 1,000 €. There is however a subtle bug — the sum always seems to be close to 1,000 €, but never exactly 1,000 €. We decide to explore the problem a bit by performing a series of payments using a test credit card number and plotting a histogram of the charged sums.&lt;/p&gt;
&lt;p&gt;As this is more involved than a few lines of code at the REPL, we'll save our work as a .clj file in a special folder: &lt;code&gt;src/exploration/clojure/visualise_payments.clj&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;ns &lt;/span&gt;&lt;span class="nv"&gt;visualise-payments&lt;/span&gt;
 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:require&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;cl-java-introspector.spring&lt;/span&gt; &lt;span class="ss"&gt;:refer&lt;/span&gt; &lt;span class="ss"&gt;:all&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;cl-java-introspector.core&lt;/span&gt; &lt;span class="ss"&gt;:refer&lt;/span&gt; &lt;span class="ss"&gt;:all&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;vinyasa.pull&lt;/span&gt; &lt;span class="ss"&gt;:refer&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;pull&lt;/span&gt;&lt;span class="p"&gt;]]))&lt;/span&gt;

&lt;span class="c1"&gt;; Get the Spring service bean we want to test drive&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;def &lt;/span&gt;&lt;span class="nv"&gt;paymentService&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;get-bean&lt;/span&gt; &lt;span class="s"&gt;"paymentService"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;; Helpers for working with RxJava observables and Java beans&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defn- &lt;/span&gt;&lt;span class="nv"&gt;result-from-observable&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;observable&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;.first&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;.toBlocking&lt;/span&gt; &lt;span class="nv"&gt;observable&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defn- &lt;/span&gt;&lt;span class="nv"&gt;sum-from-result&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;result&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;.getSum&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;.getPayment&lt;/span&gt; &lt;span class="nv"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

&lt;span class="c1"&gt;; create a sequence of test payments &lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defn- &lt;/span&gt;&lt;span class="nv"&gt;do-test-payments&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;n&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;letfn&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="nf"&gt;pay&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;cc-number&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;result-from-observable&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;.doPayment&lt;/span&gt; &lt;span class="nv"&gt;paymentService&lt;/span&gt; &lt;span class="nv"&gt;cc-number&lt;/span&gt;&lt;span class="p"&gt;)))]&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;map &lt;/span&gt;&lt;span class="nv"&gt;pay&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;repeat &lt;/span&gt;&lt;span class="nv"&gt;n&lt;/span&gt; &lt;span class="s"&gt;"TEST_NUMBER"&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;def &lt;/span&gt;&lt;span class="nv"&gt;payments&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;do-test-payments&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;; Pull Incanter dependency for data analysis and graphs&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;pull&lt;/span&gt; &lt;span class="ss"&gt;'incanter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;require&lt;/span&gt;
 &lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;incanter.core&lt;/span&gt; &lt;span class="ss"&gt;:as&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;incanter.charts&lt;/span&gt; &lt;span class="ss"&gt;:as&lt;/span&gt; &lt;span class="nv"&gt;c&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="c1"&gt;; pull statuses and sums into an Incanter dataset&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;def &lt;/span&gt;&lt;span class="nv"&gt;payments-dataset&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;i/dataset&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:status&lt;/span&gt; &lt;span class="ss"&gt;:sum&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;map &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;juxt&lt;/span&gt; &lt;span class="ss"&gt;:status&lt;/span&gt; &lt;span class="nv"&gt;sum-from-result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;payments&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

&lt;span class="c1"&gt;; plot a histogram with the sums&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;i/view&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;c/histogram&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;i/sel&lt;/span&gt; &lt;span class="nv"&gt;payments-dataset&lt;/span&gt; &lt;span class="ss"&gt;:cols&lt;/span&gt; &lt;span class="ss"&gt;:sum&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ss"&gt;:nbins&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Loading this into the REPL will produce an Incanter chart (note that it often opens behind the currently open window, at least on OS X):&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/incanter.png" alt="incanter chart" /&gt;&lt;/p&gt;
&lt;p&gt;The sum seems to follow a Gaussian distribution around 1,000 EUR. We now know something more about the thing we are investigating and can continue from here. This was of course a pretty trivial example — at &lt;a href="https://www.komoot.de"&gt;komoot&lt;/a&gt;, I have used a similar approach to investigate e.g. how many active users we have within different radiuses of city centers, only leveraging the application itself and not trawling through database dumps.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note: make sure that the application is started with &lt;code&gt;-Djava.awt.headless=false&lt;/code&gt;, otherwise opening graphics windows with Incanter won't work! Headless mode seems to be the default at least using IntelliJ IDEA.&lt;/strong&gt;&lt;/p&gt;
&lt;h4&gt;&lt;a href="#sample-project" id="sample-project"&gt;&lt;/a&gt;Sample project&lt;/h4&gt;
&lt;p&gt;Have a look at a &lt;a href="https://github.com/jstaffans/pay-me-spring-boot"&gt;sample project on Github&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a href="#other-uses-of-clojure-in-java-applications" id="other-uses-of-clojure-in-java-applications"&gt;&lt;/a&gt;Other uses of Clojure in Java applications&lt;/h3&gt;
&lt;p&gt;We have barely scratched the surface of the potential Clojure has for Java applications. Another area in which I have had success is for example property testing using &lt;a href="https://github.com/clojure/test.check"&gt;test.check&lt;/a&gt;. Testing in general is a good avenue for bringing Clojure into Java projects.&lt;/p&gt;
&lt;p&gt;We didn't really talk about doing REPL-driven development in this article, only about exploring an existing Java application using Clojure. You can definitely do REPL-driven development too, if you use a tool like &lt;a href="http://zeroturnaround.com/software/jrebel/"&gt;JRebel&lt;/a&gt; that is capable of advanced code hot-swapping. It's not as nice as namespace reloading in Clojure, but pretty close!&lt;/p&gt;
&lt;/div&gt;&lt;div&gt;&lt;a href="/"&gt;Back&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="footer"&gt;&lt;p&gt;&amp;copy; 2015-2017 Johannes Staffans&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/html&gt;</content><author><name>Johannes Staffans</name></author><category term="clojure"></category><category term="java"></category></entry><entry><id>urn:uuid:f5ab79c6-3413-4fd3-a579-8c04228e2175</id><title>A vertical microservice with Spring Boot</title><link href="https://jstaffans.github.io/posts/2015-03-16-spring-boot.html" type="text/html" title="A vertical microservice with Spring Boot" rel="alternate"></link><published>2015-03-16T00:00:00Z</published><updated>2015-03-16T00:00:00Z</updated><content type="html" xml:base="https://jstaffans.github.io/posts/2015-03-16-spring-boot.html">&lt;!DOCTYPE html&gt;
&lt;html&gt;&lt;head&gt;&lt;meta charset="utf-8"&gt;&lt;meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible"&gt;&lt;meta content="width=device-width, initial-scale=1, maximum-scale=1" name="viewport"&gt;&lt;meta content="Johannes Staffans" itemprop="author" name="author"&gt;&lt;title&gt;Johannes Staffans - A vertical microservice with Spring Boot&lt;/title&gt;&lt;link href="https://fonts.googleapis.com/css?family=Merriweather:400,700|Open+Sans:400,700" rel="stylesheet"&gt;&lt;link href="/styles/main.css" rel="stylesheet" type="text/css"&gt;&lt;/head&gt;&lt;div&gt;&lt;div class="header"&gt;&lt;div class="header__content clearfix"&gt;&lt;div class="sm-col sm-col-8"&gt;&lt;div&gt;personal website and blog of&lt;/div&gt;&lt;h1 class="header__headline"&gt;&lt;a href="/"&gt;Johannes Staffans&lt;/a&gt;&lt;/h1&gt;&lt;/div&gt;&lt;div class="sm-col flex-column"&gt;&lt;div&gt;&lt;a href="/"&gt;posts&lt;/a&gt;&lt;span&gt; &amp;middot; &lt;/span&gt;&lt;a href="/pages/about.html"&gt;about&lt;/a&gt;&lt;/div&gt;&lt;div class="pt1"&gt;elsewhere&lt;/div&gt;&lt;div&gt;&lt;a href="https://github.com/jstaffans"&gt;github&lt;/a&gt;&lt;span&gt; &amp;middot; &lt;/span&gt;&lt;a href="https://www.linkedin.com/in/jstaffans"&gt;linkedin&lt;/a&gt;&lt;span&gt; &amp;middot; &lt;/span&gt;&lt;a href="https://twitter.com/jstaffans"&gt;@jstaffans&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="clearfix"&gt;&lt;svg class="left border-triangle" version="1.1" xmlns="http://www.w3.org/2000/svg"&gt;&lt;polygon class="mask" points="0,0 30,0 30,30 0,30"&gt;&lt;/polygon&gt;&lt;polygon points="0,15 30,0 30,30"&gt;&lt;/polygon&gt;&lt;/svg&gt;&lt;svg class="right border-triangle" version="1.1" xmlns="http://www.w3.org/2000/svg"&gt;&lt;polygon class="mask" points="0,0 30,0 30,30 0,30"&gt;&lt;/polygon&gt;&lt;polygon points="30,15 0,30 0,0"&gt;&lt;/polygon&gt;&lt;/svg&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="container"&gt;&lt;div&gt;&lt;div class="flex items-baseline justify-between"&gt;&lt;h2&gt;A vertical microservice with Spring Boot&lt;/h2&gt;&lt;div&gt;&lt;span&gt;16.03.2015&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;p&gt;At &lt;a href="https://www.komoot.de"&gt;komoot&lt;/a&gt;, we have lately been busy moving to a more microservice-oriented architecture. Many of our new features, such as the card feed that shows up whenever our mobile apps are opened, have been implemented in this fashion. We have also refactored and re-implemented some existing core components as dedicated services, one example being our routing engine.&lt;/p&gt;
&lt;p&gt;The microservices we have are so far strictly backend-related — our web client is for example still a monolithic thing, albeit a much more modern one these days. Whenever we are implementing web-facing features we need to write code in two places: for the service containing the backend logic (probably in Java, Python or Clojure) and as part of the web UI, which is written in JavaScript using the &lt;a href="http://facebook.github.io/react/"&gt;React.js library&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The fact that you have to juggle two wildly different environments to do full-stack development can be a pain point. For features that require only simple UI elements React.js is also perhaps overkill — a few server-rendered pages or an iframe with a bit of jQuery can often be enough. I think having the ability to package the UI and the backend logic together as a truly stand-alone service is an attractive concept. This works especially well if the web-facing feature we want to implement is already conceptually separate from the rest of the web UI. Examples would be an import dialog, a feedback form, a payment processor and so on.&lt;/p&gt;
&lt;p&gt;The cost of doing such "vertical microservices" is of course that you do not have as much flexibility, neither in the front- nor in the backend. You may e.g. have to bend Maven into doing things it was never really meant to do, such as optimizing JavaScript files. You also need to find a way of sharing stylesheets, so that the user gets a unified visual experience no matter which service is serving up the HTML (without having to copy and paste anything, of course).&lt;/p&gt;
&lt;h3&gt;&lt;a href="#spring-boot" id="spring-boot"&gt;&lt;/a&gt;Spring Boot&lt;/h3&gt;
&lt;p&gt;In Java land, I have long been a fan of containerless web services à la Dropwizard. After playing around with Spring Boot for a while, I would say that it does an at least equally fine job. For a development team that's already used to Spring, there's also less of a learning curve and more familiar libraries that you can just pick up and start using, Spring Security being a good example.&lt;/p&gt;
&lt;h3&gt;&lt;a href="#the-application" id="the-application"&gt;&lt;/a&gt;The application&lt;/h3&gt;
&lt;p&gt;A while ago I &lt;a href="https://jstaffans.github.io/blog/2015/02/08/duct.html"&gt;developed a toy payment service while checking out Duct, a recent addition to the Clojure web application development ecosystem&lt;/a&gt;. That application also morphed into a kind of "vertical microservice" as described above. I really enjoyed the seamless integration of Clojure and ClojureScript when developing that application, so I decided to see what it would be like to develop roughly the same application using Java and Spring Boot.&lt;/p&gt;
&lt;h4&gt;&lt;a href="#backend" id="backend"&gt;&lt;/a&gt;Backend&lt;/h4&gt;
&lt;p&gt;When developing the Clojure-based payment application, I made good use of core.async for orchestration between different parts of the backend, such as the reporting subsystem and the payment processing component — the separation of behavior and data and event-based approach that core.async brings is a big win in my opinion. When looking for something similar for use in a Java project, I finally landed by &lt;a href="https://github.com/ReactiveX/RxJava"&gt;RxJava&lt;/a&gt;. The concept is not quite the same as core.async, but it does support a more functional, event-driven style of programming. It's also pretty easy to port some core.async goodies, such as implementing timeouts by waiting for the first of several Observables to emit a value (the core.async equivalent would be to wait for the first of several channels to close, where one channel is a timeout channel).&lt;/p&gt;
&lt;p&gt;Some people may say that RxJava is best (or only) suited for UI programming, but I do think it has its place in the backend too. See &lt;a href="http://techblog.netflix.com/2013/02/rxjava-netflix-api.html"&gt;this post on the Netflix blog&lt;/a&gt; for a good example. The library does however come with a lot more concepts than a simple little thing like core.async, and I'm still only learning the basics.&lt;/p&gt;
&lt;h4&gt;&lt;a href="#frontend" id="frontend"&gt;&lt;/a&gt;Frontend&lt;/h4&gt;
&lt;p&gt;The application relies on server-side rendering using Thymeleaf for its HTML, but there are still some frontend assets to take care of, namely stylesheets and Javascript files. When developing the frontend parts of a stand-alone microservice, there are basically two choices:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Implement a separate, node.js-based build chain with for example Grunt for things like SASS compilation, JS minification and so forth. Then just serve the content as static files in your application and have Maven run an external task during the production build. This will be the favorite for most people with JS experience, I think.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Bend your existing Java build system to manage the frontend parts as well. Great for Java devs who don't want to learn about node.js! But good luck trying to get a web designer to install Maven if you need help with those stylesheets ...&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Since I am developing this project on my own and use Maven for Java development, I decided to go with the latter option. In order to not complicate things too much, I opted for a pretty basic but decently scalable setup:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Dependencies to vendor libraries such as jQuery handled by &lt;a href="http://www.webjars.org"&gt;Webjars&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;RequireJS for modularisation, with a &lt;a href="https://github.com/bringking/requirejs-maven-plugin"&gt;Maven plugin&lt;/a&gt; taking care of minification and concatenation of JavaScript files.&lt;/li&gt;
&lt;li&gt;SASS stylesheets with a &lt;a href="https://github.com/darrinholst/sass-java"&gt;filter&lt;/a&gt; for development and, again, a &lt;a href="https://github.com/darrinholst/sass-java/blob/master/sass-java-maven/README.md"&gt;Maven plugin&lt;/a&gt; for building production CSS files.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I would still like to implement cache busting for the frontend assets.&lt;/p&gt;
&lt;p&gt;The hardest part of the entire project was easily getting everything frontend-related to behave as expected, both when running from the IDE and using a production JAR! I would not recommend going with the Maven-based approach for anything really complex. Still, I am pretty satisfied with the result and I hope the project can serve as an example of how to wire things up for a simple application.&lt;/p&gt;
&lt;h3&gt;&lt;a href="#conclusion" id="conclusion"&gt;&lt;/a&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;There are many avenues I didn't explore when creating this application — for the frontend parts, I could for example have relied on an asset pipeline like &lt;a href="https://github.com/wro4j/wro4j"&gt;wro4j&lt;/a&gt; or used a node.js build chain. I wanted to see how far you could get with simple building blocks such as small, focused Maven plugins, and it turns out it is definitely doable.&lt;/p&gt;
&lt;p&gt;Java 8, Spring Boot and RxJava show that there is still some fun to be had in Java land — at least as far as the backend goes. But if you decide to go down the path of vertical microservices on the JVM, I think Clojure and ClojureScript is an unbeatable combination at the moment.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/jstaffans/pay-me-spring-boot"&gt;Check out the application on Github&lt;/a&gt;!&lt;/p&gt;
&lt;/div&gt;&lt;div&gt;&lt;a href="/"&gt;Back&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="footer"&gt;&lt;p&gt;&amp;copy; 2015-2017 Johannes Staffans&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/html&gt;</content><author><name>Johannes Staffans</name></author><category term="java"></category><category term="spring"></category><category term="microservices"></category></entry><entry><id>urn:uuid:61f7d274-aee4-40f2-a269-3a0656bc2764</id><title>Taking duct for a spin</title><link href="https://jstaffans.github.io/posts/2015-02-08-duct.html" type="text/html" title="Taking duct for a spin" rel="alternate"></link><published>2015-02-08T00:00:00Z</published><updated>2015-02-08T00:00:00Z</updated><content type="html" xml:base="https://jstaffans.github.io/posts/2015-02-08-duct.html">&lt;!DOCTYPE html&gt;
&lt;html&gt;&lt;head&gt;&lt;meta charset="utf-8"&gt;&lt;meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible"&gt;&lt;meta content="width=device-width, initial-scale=1, maximum-scale=1" name="viewport"&gt;&lt;meta content="Johannes Staffans" itemprop="author" name="author"&gt;&lt;title&gt;Johannes Staffans - Taking duct for a spin&lt;/title&gt;&lt;link href="https://fonts.googleapis.com/css?family=Merriweather:400,700|Open+Sans:400,700" rel="stylesheet"&gt;&lt;link href="/styles/main.css" rel="stylesheet" type="text/css"&gt;&lt;/head&gt;&lt;div&gt;&lt;div class="header"&gt;&lt;div class="header__content clearfix"&gt;&lt;div class="sm-col sm-col-8"&gt;&lt;div&gt;personal website and blog of&lt;/div&gt;&lt;h1 class="header__headline"&gt;&lt;a href="/"&gt;Johannes Staffans&lt;/a&gt;&lt;/h1&gt;&lt;/div&gt;&lt;div class="sm-col flex-column"&gt;&lt;div&gt;&lt;a href="/"&gt;posts&lt;/a&gt;&lt;span&gt; &amp;middot; &lt;/span&gt;&lt;a href="/pages/about.html"&gt;about&lt;/a&gt;&lt;/div&gt;&lt;div class="pt1"&gt;elsewhere&lt;/div&gt;&lt;div&gt;&lt;a href="https://github.com/jstaffans"&gt;github&lt;/a&gt;&lt;span&gt; &amp;middot; &lt;/span&gt;&lt;a href="https://www.linkedin.com/in/jstaffans"&gt;linkedin&lt;/a&gt;&lt;span&gt; &amp;middot; &lt;/span&gt;&lt;a href="https://twitter.com/jstaffans"&gt;@jstaffans&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="clearfix"&gt;&lt;svg class="left border-triangle" version="1.1" xmlns="http://www.w3.org/2000/svg"&gt;&lt;polygon class="mask" points="0,0 30,0 30,30 0,30"&gt;&lt;/polygon&gt;&lt;polygon points="0,15 30,0 30,30"&gt;&lt;/polygon&gt;&lt;/svg&gt;&lt;svg class="right border-triangle" version="1.1" xmlns="http://www.w3.org/2000/svg"&gt;&lt;polygon class="mask" points="0,0 30,0 30,30 0,30"&gt;&lt;/polygon&gt;&lt;polygon points="30,15 0,30 0,0"&gt;&lt;/polygon&gt;&lt;/svg&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="container"&gt;&lt;div&gt;&lt;div class="flex items-baseline justify-between"&gt;&lt;h2&gt;Taking duct for a spin&lt;/h2&gt;&lt;div&gt;&lt;span&gt;08.02.2015&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;p&gt;I have been meaning to try building a simple web application using Stuart Sierra's &lt;a href="https://github.com/stuartsierra/component"&gt;Component&lt;/a&gt; library for a while now. If you haven't heard about it, it's definitely worth having a look at - it is a lovely way of organising the different components that go into an application and gives you a smooth workflow in the REPL.&lt;/p&gt;
&lt;p&gt;So we agree that a Component-based approach is good. Where do we start? I had a run-of-the-mill web application based on Ring/Compojure in mind, but at least for me it was not at all evident how to marry a Compojure-based architecture with the Component pattern. The few examples I found seemed a bit &lt;a href="https://gist.github.com/Deraen/9d65f447593859dd07ae"&gt;contrived&lt;/a&gt;. I felt I wanted something more concrete to build on, preferrably a template of some sort.&lt;/p&gt;
&lt;p&gt;I had heard about James Reeves' &lt;a href="https://github.com/weavejester/duct"&gt;duct&lt;/a&gt; library a few weeks prior and it turned out to be exactly what I had been looking for. The duct library comes with a Leiningen plugin that generates a simple Component-based project that is very easy to build on. The integration with Compojure is elegantly handled by wrapping Compojure routes in &lt;em&gt;endpoints&lt;/em&gt;. Here's how the library author defines an endpoint:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Endpoints should resemble microservices, grouping routes by purpose. An endpoint might handle user authentication, or handle comments on a post. Strive to keep your endpoints small and focused.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Besides the endpoint solution, duct provides some other useful things, such as sensible handling of application configuration parameters through environment variables. I love not having to set those things up myself.&lt;/p&gt;
&lt;h3&gt;&lt;a href="#the-application" id="the-application"&gt;&lt;/a&gt;The application&lt;/h3&gt;
&lt;p&gt;For my toy project, I decided to implement a simple payment service. The basic interactions can be seen in the following diagram (yellow boxes represent endpoint components, green boxes are background service components):&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/pay-me.png" alt="interaction diagram" /&gt;&lt;/p&gt;
&lt;p&gt;So the user enters a credit card number, which is verified by a phony verification endpoint. The verification endpoint provides a secure token with which further transactions can be performed. A payment processing component handles interaction with an imaginary third-party service provider and a reporting component keeps track of all transactions. The imaginary third-party payment service provider is notoriously unreliable, so about half the time, the transaction will time out.&lt;/p&gt;
&lt;p&gt;Note that the credit card number verification and the payment transaction processing would in the real world be handled by the &lt;em&gt;same&lt;/em&gt; third party provider — I'm just faking things here, providing the token on my own.&lt;/p&gt;
&lt;p&gt;There's a tiny ClojureScript frontend that handles the AJAX request to get the token and prints out a list of transactions on the payment confirmation page.&lt;/p&gt;
&lt;p&gt;Communication between components is handled using core.async channels. As a side note, I can say that implementing this web application proved a very useful exercise in understanding core.async channels as a means of communication between components. I had earlier mainly seen them as a way of handling background tasks, such as firing web requests using the callback API of &lt;a href="http://www.http-kit.org/"&gt;http-kit&lt;/a&gt;. Now I can see that the perhaps most useful case for core.async is exactly this: communication between different parts of a system.&lt;/p&gt;
&lt;p&gt;The whole thing is deployable using Docke, more information on that in the &lt;a href="https://github.com/jstaffans/pay-me#deployment"&gt;README&lt;/a&gt;. The source code is &lt;a href="https://github.com/jstaffans/pay-me"&gt;available on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;div&gt;&lt;a href="/"&gt;Back&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="footer"&gt;&lt;p&gt;&amp;copy; 2015-2017 Johannes Staffans&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/html&gt;</content><author><name>Johannes Staffans</name></author><category term="clojure"></category><category term="microservices"></category></entry><entry><id>urn:uuid:8c6519b4-ffe0-4ca8-9a9b-b0ca203cd1fc</id><title>A new blog is born</title><link href="https://jstaffans.github.io/posts/2015-01-11-a-new-blog-is-born.html" type="text/html" title="A new blog is born" rel="alternate"></link><published>2015-01-11T00:00:00Z</published><updated>2015-01-11T00:00:00Z</updated><content type="html" xml:base="https://jstaffans.github.io/posts/2015-01-11-a-new-blog-is-born.html">&lt;!DOCTYPE html&gt;
&lt;html&gt;&lt;head&gt;&lt;meta charset="utf-8"&gt;&lt;meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible"&gt;&lt;meta content="width=device-width, initial-scale=1, maximum-scale=1" name="viewport"&gt;&lt;meta content="Johannes Staffans" itemprop="author" name="author"&gt;&lt;title&gt;Johannes Staffans - A new blog is born&lt;/title&gt;&lt;link href="https://fonts.googleapis.com/css?family=Merriweather:400,700|Open+Sans:400,700" rel="stylesheet"&gt;&lt;link href="/styles/main.css" rel="stylesheet" type="text/css"&gt;&lt;/head&gt;&lt;div&gt;&lt;div class="header"&gt;&lt;div class="header__content clearfix"&gt;&lt;div class="sm-col sm-col-8"&gt;&lt;div&gt;personal website and blog of&lt;/div&gt;&lt;h1 class="header__headline"&gt;&lt;a href="/"&gt;Johannes Staffans&lt;/a&gt;&lt;/h1&gt;&lt;/div&gt;&lt;div class="sm-col flex-column"&gt;&lt;div&gt;&lt;a href="/"&gt;posts&lt;/a&gt;&lt;span&gt; &amp;middot; &lt;/span&gt;&lt;a href="/pages/about.html"&gt;about&lt;/a&gt;&lt;/div&gt;&lt;div class="pt1"&gt;elsewhere&lt;/div&gt;&lt;div&gt;&lt;a href="https://github.com/jstaffans"&gt;github&lt;/a&gt;&lt;span&gt; &amp;middot; &lt;/span&gt;&lt;a href="https://www.linkedin.com/in/jstaffans"&gt;linkedin&lt;/a&gt;&lt;span&gt; &amp;middot; &lt;/span&gt;&lt;a href="https://twitter.com/jstaffans"&gt;@jstaffans&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="clearfix"&gt;&lt;svg class="left border-triangle" version="1.1" xmlns="http://www.w3.org/2000/svg"&gt;&lt;polygon class="mask" points="0,0 30,0 30,30 0,30"&gt;&lt;/polygon&gt;&lt;polygon points="0,15 30,0 30,30"&gt;&lt;/polygon&gt;&lt;/svg&gt;&lt;svg class="right border-triangle" version="1.1" xmlns="http://www.w3.org/2000/svg"&gt;&lt;polygon class="mask" points="0,0 30,0 30,30 0,30"&gt;&lt;/polygon&gt;&lt;polygon points="30,15 0,30 0,0"&gt;&lt;/polygon&gt;&lt;/svg&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="container"&gt;&lt;div&gt;&lt;div class="flex items-baseline justify-between"&gt;&lt;h2&gt;A new blog is born&lt;/h2&gt;&lt;div&gt;&lt;span&gt;11.01.2015&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;p&gt;It is time for a new blog. My experiences over the last few years have changed the way I develop software a lot and I feel the need to reflect on that. I am also now more focused on the technological side of software development as opposed to working as an agile coach and scrum master, which was what a large part of the posts on my previous blog were about.&lt;/p&gt;
&lt;p&gt;So what experiences am I talking about? In early 2013, after the end of a consulting contract and some extended travelling, I found myself without any consulting work lined up. I was at that point rather fed up with consulting, so I started looking for a normal job as a software developer. At the same time I took the opportunity to brush up on my tech skills and what better way to do that than to learn a new programming language?&lt;/p&gt;
&lt;p&gt;Since I work mostly in the Java space, Scala and Clojure were at the top of my list. I didn't know anything about either of them, but the &lt;a href="http://java.dzone.com/articles/my-scala-vs-clojure-impression"&gt;analogy of Clojure as a serene cathedral to Scala's bazaar&lt;/a&gt; had a deep impression on me and soon I was neck-deep in Clojure. Discovering Clojure and all the ideas that come with it has been a wonderful journey. And I still feel like I am only scratching the surface!&lt;/p&gt;
&lt;p&gt;My interest in Clojure first brought me to &lt;a href="http://mysema.com/"&gt;Mysema&lt;/a&gt;, a small consultancy in Helsinki that has a strong focus on functional programming and Clojure. Since early 2014 I live in Berlin where I work at &lt;a href="https://www.komoot.de"&gt;komoot&lt;/a&gt;. Clojure hasn't been a focus so far at work, but being involved with the development of a hugely successful product like komoot luckily brings its own set of interesting challenges. And besides, most of the ideas that I have been exposed to while learning Clojure are perfectly applicable in any environment.&lt;/p&gt;
&lt;p&gt;So by now you have probably figured out that I will write mostly about functional programming with a focus on Clojure, probably interleaved with tidbits from the Berlin startup scene and anything else I am finding interesting. I hope I can keep it up!&lt;/p&gt;
&lt;/div&gt;&lt;div&gt;&lt;a href="/"&gt;Back&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="footer"&gt;&lt;p&gt;&amp;copy; 2015-2017 Johannes Staffans&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/html&gt;</content><author><name>Johannes Staffans</name></author><category term="blog"></category><category term="about"></category></entry></feed>