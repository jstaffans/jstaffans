<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom"><title>Johannes Staffans</title><subtitle>Johannes Staffans' blog</subtitle><generator uri="https://perun.io/" version="0.4.2-SNAPSHOT">Perun</generator><link href="https://jstaffans.github.io/" type="text/html"></link><link href="https://jstaffans.github.io/feed_clojure.xml" rel="self"></link><link href="https://jstaffans.github.io/feed_clojure.xml" rel="first"></link><link href="https://jstaffans.github.io/feed_clojure.xml" rel="last"></link><updated>2017-11-14T22:50:59Z</updated><id>https://jstaffans.github.io/</id><entry><id>urn:uuid:21baeb20-e717-47ea-9309-9f7c15e42618</id><title>A whiff of data science in Clojure</title><link href="https://jstaffans.github.io/posts/2017-11-14-clojure-data-science.html" type="text/html" title="A whiff of data science in Clojure" rel="alternate"></link><published>2017-11-14T00:00:00Z</published><updated>2017-11-14T00:00:00Z</updated><content type="html" xml:base="https://jstaffans.github.io/posts/2017-11-14-clojure-data-science.html">&lt;!DOCTYPE html&gt;
&lt;html&gt;&lt;head&gt;&lt;meta charset="utf-8"&gt;&lt;meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible"&gt;&lt;meta content="width=device-width, initial-scale=1, maximum-scale=1" name="viewport"&gt;&lt;meta content="Johannes Staffans" itemprop="author" name="author"&gt;&lt;title&gt;Johannes Staffans - A whiff of data science in Clojure&lt;/title&gt;&lt;link href="https://fonts.googleapis.com/css?family=Merriweather:400,700|Open+Sans:400,700" rel="stylesheet"&gt;&lt;link href="/styles/main.css" rel="stylesheet" type="text/css"&gt;&lt;/head&gt;&lt;div&gt;&lt;div class="header"&gt;&lt;div class="header__content clearfix"&gt;&lt;div class="sm-col sm-col-8"&gt;&lt;div&gt;personal website and blog of&lt;/div&gt;&lt;h1 class="header__headline"&gt;&lt;a href="/"&gt;Johannes Staffans&lt;/a&gt;&lt;/h1&gt;&lt;/div&gt;&lt;div class="sm-col flex-column"&gt;&lt;div&gt;&lt;a href="/"&gt;posts&lt;/a&gt;&lt;span&gt; &amp;middot; &lt;/span&gt;&lt;a href="/pages/about.html"&gt;about&lt;/a&gt;&lt;/div&gt;&lt;div class="pt1"&gt;elsewhere&lt;/div&gt;&lt;div&gt;&lt;a href="https://github.com/jstaffans"&gt;github&lt;/a&gt;&lt;span&gt; &amp;middot; &lt;/span&gt;&lt;a href="https://www.linkedin.com/in/jstaffans"&gt;linkedin&lt;/a&gt;&lt;span&gt; &amp;middot; &lt;/span&gt;&lt;a href="https://twitter.com/jstaffans"&gt;@jstaffans&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="clearfix"&gt;&lt;svg class="left border-triangle" version="1.1" xmlns="http://www.w3.org/2000/svg"&gt;&lt;polygon class="mask" points="0,0 30,0 30,30 0,30"&gt;&lt;/polygon&gt;&lt;polygon points="0,15 30,0 30,30"&gt;&lt;/polygon&gt;&lt;/svg&gt;&lt;svg class="right border-triangle" version="1.1" xmlns="http://www.w3.org/2000/svg"&gt;&lt;polygon class="mask" points="0,0 30,0 30,30 0,30"&gt;&lt;/polygon&gt;&lt;polygon points="30,15 0,30 0,0"&gt;&lt;/polygon&gt;&lt;/svg&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="container"&gt;&lt;div&gt;&lt;div class="flex items-baseline justify-between"&gt;&lt;h2&gt;A whiff of data science in Clojure&lt;/h2&gt;&lt;div&gt;&lt;span&gt;14.11.2017&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;p&gt;As part of learning more about applied statistics, I decided to trawl around the &lt;a href="http://www.hri.fi/en/"&gt;Helsinki Region Infoshare&lt;/a&gt; open data portal for interesting data sets to analyse. I also took the opportunity to familiarise myself with &lt;a href="gorilla-repl.org"&gt;Gorilla REPL&lt;/a&gt;, a  Clojure take on notebook-style programming made popular for data science by IPython notebooks.&lt;/p&gt;
&lt;p&gt;The data set I picked is a customer satisfaction survey for a youth services bureau. Feedback is collected via a terminal with four buttons, ranging from a sad smiley to a happy one. The question asked is "how happy are with the services of the youth services bureau today"? The question &lt;strong&gt;I&lt;/strong&gt; ask is whether customer happiness depends on the time of the day.&lt;/p&gt;
&lt;p&gt;Gorilla REPL comes with a handy online viewer (although it'd be even handier if Github would support Gorilla REPL notebooks natively, as it does IPython and Jupyter notebooks). You can check out the rest of the story and the results of my analysis &lt;a href="http://viewer.gorilla-repl.org/view.html?source=github&amp;amp;user=jstaffans&amp;amp;repo=happy-or-not&amp;amp;path=src/happy_or_not/repl.clj"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;div&gt;&lt;a href="/"&gt;Back&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="footer"&gt;&lt;p&gt;&amp;copy; 2015-2017 Johannes Staffans&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/html&gt;</content><author><name>Johannes Staffans</name></author><category term="data"></category><category term="science"></category><category term="clojure"></category><category term="gorilla"></category><category term="repl"></category></entry><entry><id>urn:uuid:cdaae8c8-78a6-4e3b-9749-7333c4381482</id><title>Action leads to inspiration</title><link href="https://jstaffans.github.io/posts/2016-01-25-action-inspiration.html" type="text/html" title="Action leads to inspiration" rel="alternate"></link><published>2016-01-25T00:00:00Z</published><updated>2016-01-25T00:00:00Z</updated><content type="html" xml:base="https://jstaffans.github.io/posts/2016-01-25-action-inspiration.html">&lt;!DOCTYPE html&gt;
&lt;html&gt;&lt;head&gt;&lt;meta charset="utf-8"&gt;&lt;meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible"&gt;&lt;meta content="width=device-width, initial-scale=1, maximum-scale=1" name="viewport"&gt;&lt;meta content="Johannes Staffans" itemprop="author" name="author"&gt;&lt;title&gt;Johannes Staffans - Action leads to inspiration&lt;/title&gt;&lt;link href="https://fonts.googleapis.com/css?family=Merriweather:400,700|Open+Sans:400,700" rel="stylesheet"&gt;&lt;link href="/styles/main.css" rel="stylesheet" type="text/css"&gt;&lt;/head&gt;&lt;div&gt;&lt;div class="header"&gt;&lt;div class="header__content clearfix"&gt;&lt;div class="sm-col sm-col-8"&gt;&lt;div&gt;personal website and blog of&lt;/div&gt;&lt;h1 class="header__headline"&gt;&lt;a href="/"&gt;Johannes Staffans&lt;/a&gt;&lt;/h1&gt;&lt;/div&gt;&lt;div class="sm-col flex-column"&gt;&lt;div&gt;&lt;a href="/"&gt;posts&lt;/a&gt;&lt;span&gt; &amp;middot; &lt;/span&gt;&lt;a href="/pages/about.html"&gt;about&lt;/a&gt;&lt;/div&gt;&lt;div class="pt1"&gt;elsewhere&lt;/div&gt;&lt;div&gt;&lt;a href="https://github.com/jstaffans"&gt;github&lt;/a&gt;&lt;span&gt; &amp;middot; &lt;/span&gt;&lt;a href="https://www.linkedin.com/in/jstaffans"&gt;linkedin&lt;/a&gt;&lt;span&gt; &amp;middot; &lt;/span&gt;&lt;a href="https://twitter.com/jstaffans"&gt;@jstaffans&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="clearfix"&gt;&lt;svg class="left border-triangle" version="1.1" xmlns="http://www.w3.org/2000/svg"&gt;&lt;polygon class="mask" points="0,0 30,0 30,30 0,30"&gt;&lt;/polygon&gt;&lt;polygon points="0,15 30,0 30,30"&gt;&lt;/polygon&gt;&lt;/svg&gt;&lt;svg class="right border-triangle" version="1.1" xmlns="http://www.w3.org/2000/svg"&gt;&lt;polygon class="mask" points="0,0 30,0 30,30 0,30"&gt;&lt;/polygon&gt;&lt;polygon points="30,15 0,30 0,0"&gt;&lt;/polygon&gt;&lt;/svg&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="container"&gt;&lt;div&gt;&lt;div class="flex items-baseline justify-between"&gt;&lt;h2&gt;Action leads to inspiration&lt;/h2&gt;&lt;div&gt;&lt;span&gt;14.11.2017&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;p&gt;Last weekend, a &lt;a href="http://www.clojurebridge.org/"&gt;ClojureBridge&lt;/a&gt; event &lt;a href="http://clojurebridge-berlin.github.io/"&gt;took place in Berlin&lt;/a&gt;. I was one of the coaches and had a wonderful time exploring Clojure with a group of new-comers to the language. In addition to coding, some lightning talks touching upon different aspects of software development in general and Clojure in particular were held. One of the presentations was by me, in which I talked about some of the hurdles that novice programmers might face and gave some tips on how to overcome them. This is that talk in blog form.&lt;/p&gt;
&lt;h3&gt;&lt;a href="#what-does-programming-boil-down-to" id="what-does-programming-boil-down-to"&gt;&lt;/a&gt;What does programming boil down to?&lt;/h3&gt;
&lt;p&gt;I'll take the premise that programming isn't something that is very hard to learn. It's not rocket science (unless your code is not running a website but an actual rocket!) or neurosurgery. Programmers regularily deal with simple math, basic logic and the syntax of programming languages - how you call functions, how data structures like vectors or hash maps are represented and so on. Once you start developing more complex applications, there are of course more things to learn, such as how the Internet works, the mechanics of different libraries and how to organize code in larger projects. But you actually don't need that much to get started solving smaller problems.&lt;/p&gt;
&lt;h3&gt;&lt;a href="#so-whats-the-problem" id="so-whats-the-problem"&gt;&lt;/a&gt;So what's the problem?&lt;/h3&gt;
&lt;p&gt;Despite the relatively simple nature of programming, it seems there is a general perception of software development as being something that's hard to pick up. Many people who start to learn to code seem to become discouraged at an early stage and don't continue learning. Why is that?&lt;/p&gt;
&lt;p&gt;I think the issues beginners face when coding can generally be split into two categories:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Not knowing how to begin.&lt;/li&gt;
&lt;li&gt;Getting stuck along the way and becoming discouraged.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href="#not-knowing-where-to-start" id="not-knowing-where-to-start"&gt;&lt;/a&gt;Not knowing where to start&lt;/h3&gt;
&lt;p&gt;The step from thinking "I'm going to code a program that does X" to actually having running code can be intimidating if you are not familiar with programming. What editor should I be using? What framework can help me solve my problem? How on earth should I code so that the solution is elegant, I heard that writing spaghetti code is really bad?&lt;/p&gt;
&lt;p&gt;There's a quote by &lt;a href="https://en.wikipedia.org/wiki/Arthur_Ashe"&gt;Arthur Ashe&lt;/a&gt;, winner of three Grand Slams in tennis and recipient of the Presidential Medal of Freedom, that goes:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Start where you are. Use what you have. Do what you can.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;My take on this is that you should begin your solution using what knowledge you already have. If you have only ever coded a Java program with a "Hello World!" string printed from a &lt;code&gt;main()&lt;/code&gt; method, a Java program with a &lt;code&gt;main()&lt;/code&gt; method is probably a good place to start. I'd interpret "do what you can" as trying to first solve the parts of the problem that you understand, such as printing out text or getting user input from the command prompt.&lt;/p&gt;
&lt;p&gt;Your favourite search engine is also your friend when taking the first steps to implement a new program. You can start by typing in code from examples of similar applications, from tutorials or from screencasts.&lt;/p&gt;
&lt;p&gt;Iterating in small steps is key - a common beginner mistake is to try to solve the whole problem at once. Always try to find the smallest thing you can solve first. If your problem involves working with a collection of values, first implement a solution that handles a single value. Work your way from the small to the large. There are some good books out there that can help you to learn this divide-and-conquer approach, such as &lt;a href="http://www.goodreads.com/book/show/154154.Programming_Interviews_Exposed"&gt;"Programming Interviews Exposed"&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Beware of &lt;a href="https://en.wikipedia.org/wiki/Law_of_triviality"&gt;bikeshedding&lt;/a&gt; (a term that gets thrown around a lot among software developers and basically means wasting time on irrelevant details). At the end of the day, what your program &lt;em&gt;does&lt;/em&gt; is what matters, not which framework you use, which editor or which programming language.&lt;/p&gt;
&lt;p&gt;Another favourite quote of mine, which I unfortunately don't know who to attribute to, is:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Action leads to inspiration.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A common misconception is that a programmer should know exactly what they're doing before starting to code. The solution should just appear before the mental eye in a puff of magical smoke and the actual coding is just the mechanical task of writing the program in an editor. In reality, I think it is often the other way around - we start coding first, without having much of an idea what we're doing. As we proceed, we see patterns, have new ideas on what we could go back and change in order to make it better and thoughts on what we should concentrate on next. In short, taking the action of starting to code leads to inspiration about how to solve the problem at hand - not the other way around.&lt;/p&gt;
&lt;p&gt;A programmer will often find that the inspiration that comes from coding will take the solution in wholly new directions that could never have been anticipated when starting out. Often this can mean throwing out heaps of existing code and starting afresh, which I see as a good thing - the first attempts at a solution are usually just about gaining a deeper understanding of the problem. Don't become too attached to your code, a lot of times throwing it out is just the right thing to do.&lt;/p&gt;
&lt;h3&gt;&lt;a href="#getting-stuck" id="getting-stuck"&gt;&lt;/a&gt;Getting stuck&lt;/h3&gt;
&lt;p&gt;Getting stuck and not knowing how to proceed with a particular programming problem is maybe the biggest source of discouragment for new coders. It is unfortunately something one has to become used to, as this is something that happens very often, even to experienced programmers.&lt;/p&gt;
&lt;p&gt;The scary thing about getting stuck coding is that it can feel very personal and intimidating. In other occupations, one might get stuck because a tool breaks, or a shipment of goods is late, or something else that is out of our control. In software development, it's easy to think, "I should really know how to solve this problem!", or something along those lines. Programming is after all primarily a mental excercise.&lt;/p&gt;
&lt;p&gt;Once down the rabbit hole of feeling inadequate, it's difficult to get out. The primitive and irrational part of the mind, the limbic system that produces emotions like fear and anger and triggers fight-or-flight responses, is in full control and does not give the slow, logical prefrontal cortex a chance to solve the problem. Daniel Kahneman's excellent book &lt;a href="http://www.goodreads.com/book/show/11468377-thinking-fast-and-slow"&gt;"Thinking, Fast and Slow"&lt;/a&gt; explains this mental process, modeled as two systems that drive the way we think, in fascinating detail.&lt;/p&gt;
&lt;p&gt;To get un-stuck with a difficult problem, you need to give your brain time to process the information. You can for example go out for a walk, watch a movie or go dancing - anything! For me, solutions to problems I've faced during the day often come to me just before I go to sleep. Having a notebook by the bed may be useful if that's the case for you, too.&lt;/p&gt;
&lt;p&gt;Novice programmers can often feel intimidated by more experienced developers, as these seem to blaze out code without much effort, taking every problem in stride. You should know, however, that a programmer like that has probably seen similar problems hundreds of times already and has developed a repertoire of patterns around them. Recognizing patterns and having a gut feeling about how to approach them, what data structures to use and which algorithms are a good fit is something that comes with experience. Once you start building your own repertoire, you'll start seeing patterns too and know instinctively what solutions to apply.&lt;/p&gt;
&lt;h3&gt;&lt;a href="#conclusion" id="conclusion"&gt;&lt;/a&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;Software development is fun and rewarding, but can also be frustrating, particularily for inexperienced programmers who don't know how to start approaching a problem. Getting stuck can be intimidating but is something that I think new programmers need to become friendly with. I hope this post can give some ideas on what actions to take to get that inspiration flowing!&lt;/p&gt;
&lt;p&gt;Thanks again to the organizers of ClojureBridge Berlin!&lt;/p&gt;
&lt;/div&gt;&lt;div&gt;&lt;a href="/"&gt;Back&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="footer"&gt;&lt;p&gt;&amp;copy; 2015-2017 Johannes Staffans&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/html&gt;</content><author><name>Johannes Staffans</name></author><category term="software development"></category><category term="getting started"></category><category term="advice"></category><category term="clojurebridge"></category><category term="clojure"></category></entry><entry><id>urn:uuid:eb792ad5-e2cb-465f-b9b0-be0627cb9cb6</id><title>A look at running Clojure on AWS Lambda</title><link href="https://jstaffans.github.io/posts/2015-12-30-clojure-lambda.html" type="text/html" title="A look at running Clojure on AWS Lambda" rel="alternate"></link><published>2015-12-30T00:00:00Z</published><updated>2015-12-30T00:00:00Z</updated><content type="html" xml:base="https://jstaffans.github.io/posts/2015-12-30-clojure-lambda.html">&lt;!DOCTYPE html&gt;
&lt;html&gt;&lt;head&gt;&lt;meta charset="utf-8"&gt;&lt;meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible"&gt;&lt;meta content="width=device-width, initial-scale=1, maximum-scale=1" name="viewport"&gt;&lt;meta content="Johannes Staffans" itemprop="author" name="author"&gt;&lt;title&gt;Johannes Staffans - A look at running Clojure on AWS Lambda&lt;/title&gt;&lt;link href="https://fonts.googleapis.com/css?family=Merriweather:400,700|Open+Sans:400,700" rel="stylesheet"&gt;&lt;link href="/styles/main.css" rel="stylesheet" type="text/css"&gt;&lt;/head&gt;&lt;div&gt;&lt;div class="header"&gt;&lt;div class="header__content clearfix"&gt;&lt;div class="sm-col sm-col-8"&gt;&lt;div&gt;personal website and blog of&lt;/div&gt;&lt;h1 class="header__headline"&gt;&lt;a href="/"&gt;Johannes Staffans&lt;/a&gt;&lt;/h1&gt;&lt;/div&gt;&lt;div class="sm-col flex-column"&gt;&lt;div&gt;&lt;a href="/"&gt;posts&lt;/a&gt;&lt;span&gt; &amp;middot; &lt;/span&gt;&lt;a href="/pages/about.html"&gt;about&lt;/a&gt;&lt;/div&gt;&lt;div class="pt1"&gt;elsewhere&lt;/div&gt;&lt;div&gt;&lt;a href="https://github.com/jstaffans"&gt;github&lt;/a&gt;&lt;span&gt; &amp;middot; &lt;/span&gt;&lt;a href="https://www.linkedin.com/in/jstaffans"&gt;linkedin&lt;/a&gt;&lt;span&gt; &amp;middot; &lt;/span&gt;&lt;a href="https://twitter.com/jstaffans"&gt;@jstaffans&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="clearfix"&gt;&lt;svg class="left border-triangle" version="1.1" xmlns="http://www.w3.org/2000/svg"&gt;&lt;polygon class="mask" points="0,0 30,0 30,30 0,30"&gt;&lt;/polygon&gt;&lt;polygon points="0,15 30,0 30,30"&gt;&lt;/polygon&gt;&lt;/svg&gt;&lt;svg class="right border-triangle" version="1.1" xmlns="http://www.w3.org/2000/svg"&gt;&lt;polygon class="mask" points="0,0 30,0 30,30 0,30"&gt;&lt;/polygon&gt;&lt;polygon points="30,15 0,30 0,0"&gt;&lt;/polygon&gt;&lt;/svg&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="container"&gt;&lt;div&gt;&lt;div class="flex items-baseline justify-between"&gt;&lt;h2&gt;A look at running Clojure on AWS Lambda&lt;/h2&gt;&lt;div&gt;&lt;span&gt;14.11.2017&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;p&gt;Lambda is the name of the serverless function execution service that has been part of the Amazon Web Services ecosystem since late 2014. The evolution of the Lamba service has been quite rapid during the last year, with one of the recent additions being support for execution of Java code. And as we know, where there's Java, there can be Clojure, so during a recent project I decided to implement some of the backend parts using the AWS Lambda service.&lt;/p&gt;
&lt;h3&gt;&lt;a href="#advantages" id="advantages"&gt;&lt;/a&gt;Advantages&lt;/h3&gt;
&lt;p&gt;The obvious advantage of using Lambda is that you do not have to worry about server infrastructure, instead you are just deploying a function and letting AWS worry about scaling and so on. I think that having the function be the unit of deployment is a natural step to take when doing functional programming. Clojure of course works splendidly in this setting.&lt;/p&gt;
&lt;h3&gt;&lt;a href="#limitations" id="limitations"&gt;&lt;/a&gt;Limitations&lt;/h3&gt;
&lt;p&gt;One well-known limitation of running Clojure on AWS Lambda is the JVM startup time. This is a serious problem for an application that requires fast responses. In this case, you can still use ClojureScript running on Node.js, which is another execution environment that Lambda supports. If, like me, you can tolerate function executions that are sometimes very slow, Clojure works just fine. Lambda will also generally run subsequent invocations of your function using the same, warmed-up JVMs, so it's usually only the first few executions that are very slow.&lt;/p&gt;
&lt;p&gt;Another limitation that one might hit is the 50 Mb size limit of the deployment artifact. 50 Mb might seem like a lot, but you can quickly reach that limit if you're not careful about avoiding pulling in heavy dependencies in your project. &lt;a href="https://github.com/mcohen01/amazonica"&gt;Amazonica&lt;/a&gt; is an example of a library that has a lot of transient dependencies. Liberal use of &lt;code&gt;:exclusions&lt;/code&gt; in the &lt;code&gt;:dependencies&lt;/code&gt; section of your Leiningen project file helps:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ss"&gt;:dependencies&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="nv"&gt;amazonica&lt;/span&gt; &lt;span class="s"&gt;"0.3.39"&lt;/span&gt; 
                &lt;span class="ss"&gt;:exclusions&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;com.amazonaws/aws-java-sdk-datapipeline&lt;/span&gt;
                             &lt;span class="nv"&gt;com.amazonaws/aws-java-sdk-devicefarm&lt;/span&gt;
                             &lt;span class="nv"&gt;...&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;One serious limitation that isn't immediately obvious is that Lambda functions have no way to communicate with private RDS databases. This is because permissions are granted to a Lambda function based on its (IAM) execution role whereas RDS access is security group- and therefore IP-address-based. The IP address of a Lambda executor is not known to the user, so you would have to open up access to large chunks (the whole published AWS IP range, essentially) to grant access to a Lambda function. Addressing this limitation seems to at least be &lt;a href="https://forums.aws.amazon.com/thread.jspa?threadID=166946&amp;amp;start=25&amp;amp;tstart=0"&gt;on the AWS Lambda roadmap&lt;/a&gt;, but no dates have been given yet.&lt;/p&gt;
&lt;h3&gt;&lt;a href="#practical-issues" id="practical-issues"&gt;&lt;/a&gt;Practical issues&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Deployment&lt;/strong&gt; to AWS Lambda requires some command-line magic - I created a Jenkins job that runs Leiningen, tests the code and deploys a new version to Lambda. There are some things that need configuring, mainly how much memory to reserve for the function (this correlates directly with how much you pay per function invocation as well). I found 384 Mb to be the lowest possible amount for my relatively simple data-crunching function. Lower than that and the function would simply hang and time out.&lt;/p&gt;
&lt;p&gt;Since Lambda is somewhat of a black box execution environment, &lt;strong&gt;logging&lt;/strong&gt; is crucial. Logs can be found in CloudWatch, but you have to remember to give the function an execution IAM role that is authorized to create log streams - the &lt;a href="http://docs.aws.amazon.com/lambda/latest/dg/intro-permission-model.html#lambda-intro-execution-role"&gt;docs&lt;/a&gt; have more to say on that.&lt;/p&gt;
&lt;p&gt;Your application will probably also need some &lt;strong&gt;configuration&lt;/strong&gt;, maybe in the form of an API key or threadpool settings (yes, threadpools are fine to use with Lambda). Lambda unfortunately lacks support for environment variables similar to what other AWS deployment tools like Elastic Beanstalk and OpsWorks have, so you have to get a bit more creative.&lt;/p&gt;
&lt;p&gt;Usually, some setup that makes local development easy and while avoiding placing sensitive values in the source-code repository is a good way to go and I ended up using the &lt;a href="https://github.com/levand/immuconf"&gt;immuconf&lt;/a&gt; library in combination with an S3 bucket. The blueprint for the configuration is a checked-in &lt;code&gt;resources/config.edn&lt;/code&gt; file, which can be overridden by both a file in an S3 bucket and a file that is available only locally:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;ns &lt;/span&gt;&lt;span class="nv"&gt;lambda-example.config&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:require&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;clojure.java.io&lt;/span&gt; &lt;span class="ss"&gt;:as&lt;/span&gt; &lt;span class="nv"&gt;io&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;amazonica.aws.s3&lt;/span&gt; &lt;span class="ss"&gt;:refer&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;get-object&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
            &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;immuconf.config&lt;/span&gt; &lt;span class="ss"&gt;:as&lt;/span&gt; &lt;span class="nv"&gt;conf&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;clojure.tools.logging&lt;/span&gt; &lt;span class="ss"&gt;:as&lt;/span&gt; &lt;span class="nv"&gt;log&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:refer-clojure&lt;/span&gt; &lt;span class="ss"&gt;:exclude&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;get&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defn- &lt;/span&gt;&lt;span class="nv"&gt;base-config&lt;/span&gt;
  &lt;span class="p"&gt;[]&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;io/resource&lt;/span&gt; &lt;span class="s"&gt;"config.edn"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defn- &lt;/span&gt;&lt;span class="nv"&gt;s3-config&lt;/span&gt;
  &lt;span class="p"&gt;[]&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;try&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:input-stream&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;get-object&lt;/span&gt;
        &lt;span class="ss"&gt;:bucket-name&lt;/span&gt; &lt;span class="s"&gt;"my-config-bucket"&lt;/span&gt;
        &lt;span class="ss"&gt;:key&lt;/span&gt; &lt;span class="s"&gt;"production/config.edn"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;catch&lt;/span&gt; &lt;span class="nv"&gt;Exception&lt;/span&gt; &lt;span class="nv"&gt;_&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;log/warn&lt;/span&gt; &lt;span class="s"&gt;"S3 config not available!"&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defn- &lt;/span&gt;&lt;span class="nv"&gt;local-config&lt;/span&gt;
  &lt;span class="p"&gt;[]&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;when &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;.exists&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;io/as-file&lt;/span&gt; &lt;span class="s"&gt;"local.edn"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="s"&gt;"local.edn"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;def &lt;/span&gt;&lt;span class="nv"&gt;config&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;apply &lt;/span&gt;
    &lt;span class="nv"&gt;conf/load&lt;/span&gt; 
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;filter &lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;partial not= &lt;/span&gt;&lt;span class="nv"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
      &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="nf"&gt;base-config&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;s3-config&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;local-config&lt;/span&gt;&lt;span class="p"&gt;)])))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a href="#execution" id="execution"&gt;&lt;/a&gt;Execution&lt;/h3&gt;
&lt;p&gt;Lambda functions are versatile in that they can be triggered by almost any type of event in the AWS universe. I opted for subscribing to an SNS topic, but you can also trigger functions based on for example changes in an S3 bucket or updates to a DynamoDB table.&lt;/p&gt;
&lt;p&gt;The &lt;a href="https://github.com/uswitch/lambada"&gt;lambada&lt;/a&gt; library provides the necessary plumbing for actually executing your function in response to an AWS event.&lt;/p&gt;
&lt;h3&gt;&lt;a href="#conclusion" id="conclusion"&gt;&lt;/a&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;AWS Lambda is a fun, versatile and cheap way of taking the functional programming paradigm one step further by having the function be the unit of deployment. Although there are some kinks such as the lack of environment variable support and restrictions with regards to RDS access, most problems can be worked around. The JVM startup time is a blocker for applications with real-time needs but not a problem for data-crunching background tasks.&lt;/p&gt;
&lt;/div&gt;&lt;div&gt;&lt;a href="/"&gt;Back&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="footer"&gt;&lt;p&gt;&amp;copy; 2015-2017 Johannes Staffans&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/html&gt;</content><author><name>Johannes Staffans</name></author><category term="clojure"></category><category term="lambda"></category><category term="aws"></category></entry><entry><id>urn:uuid:07ae01ec-82fb-418d-9e1f-53040dae2424</id><title>Fun with Specter</title><link href="https://jstaffans.github.io/posts/2015-11-19-fun-with-specter.html" type="text/html" title="Fun with Specter" rel="alternate"></link><published>2015-11-19T00:00:00Z</published><updated>2015-11-19T00:00:00Z</updated><content type="html" xml:base="https://jstaffans.github.io/posts/2015-11-19-fun-with-specter.html">&lt;!DOCTYPE html&gt;
&lt;html&gt;&lt;head&gt;&lt;meta charset="utf-8"&gt;&lt;meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible"&gt;&lt;meta content="width=device-width, initial-scale=1, maximum-scale=1" name="viewport"&gt;&lt;meta content="Johannes Staffans" itemprop="author" name="author"&gt;&lt;title&gt;Johannes Staffans - Fun with Specter&lt;/title&gt;&lt;link href="https://fonts.googleapis.com/css?family=Merriweather:400,700|Open+Sans:400,700" rel="stylesheet"&gt;&lt;link href="/styles/main.css" rel="stylesheet" type="text/css"&gt;&lt;/head&gt;&lt;div&gt;&lt;div class="header"&gt;&lt;div class="header__content clearfix"&gt;&lt;div class="sm-col sm-col-8"&gt;&lt;div&gt;personal website and blog of&lt;/div&gt;&lt;h1 class="header__headline"&gt;&lt;a href="/"&gt;Johannes Staffans&lt;/a&gt;&lt;/h1&gt;&lt;/div&gt;&lt;div class="sm-col flex-column"&gt;&lt;div&gt;&lt;a href="/"&gt;posts&lt;/a&gt;&lt;span&gt; &amp;middot; &lt;/span&gt;&lt;a href="/pages/about.html"&gt;about&lt;/a&gt;&lt;/div&gt;&lt;div class="pt1"&gt;elsewhere&lt;/div&gt;&lt;div&gt;&lt;a href="https://github.com/jstaffans"&gt;github&lt;/a&gt;&lt;span&gt; &amp;middot; &lt;/span&gt;&lt;a href="https://www.linkedin.com/in/jstaffans"&gt;linkedin&lt;/a&gt;&lt;span&gt; &amp;middot; &lt;/span&gt;&lt;a href="https://twitter.com/jstaffans"&gt;@jstaffans&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="clearfix"&gt;&lt;svg class="left border-triangle" version="1.1" xmlns="http://www.w3.org/2000/svg"&gt;&lt;polygon class="mask" points="0,0 30,0 30,30 0,30"&gt;&lt;/polygon&gt;&lt;polygon points="0,15 30,0 30,30"&gt;&lt;/polygon&gt;&lt;/svg&gt;&lt;svg class="right border-triangle" version="1.1" xmlns="http://www.w3.org/2000/svg"&gt;&lt;polygon class="mask" points="0,0 30,0 30,30 0,30"&gt;&lt;/polygon&gt;&lt;polygon points="30,15 0,30 0,0"&gt;&lt;/polygon&gt;&lt;/svg&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="container"&gt;&lt;div&gt;&lt;div class="flex items-baseline justify-between"&gt;&lt;h2&gt;Fun with Specter&lt;/h2&gt;&lt;div&gt;&lt;span&gt;14.11.2017&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;p&gt;&lt;a href="https://github.com/nathanmarz/specter"&gt;Specter&lt;/a&gt; is a new library by Nathan Marz that makes it easier to deal with nested data structures, such as lists of maps of maps. This post explores some less-documented parts of the library.&lt;/p&gt;
&lt;p&gt;For this post, we'll be dealing with a simple movie dataset:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="ss"&gt;:name&lt;/span&gt; &lt;span class="s"&gt;"First Blood"&lt;/span&gt;, &lt;span class="ss"&gt;:director&lt;/span&gt; &lt;span class="s"&gt;"Ted Kotcheff"&lt;/span&gt;, &lt;span class="ss"&gt;:rating&lt;/span&gt; &lt;span class="mf"&gt;7.6&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:name&lt;/span&gt; &lt;span class="s"&gt;"Lethal Weapon 3"&lt;/span&gt;, &lt;span class="ss"&gt;:director&lt;/span&gt; &lt;span class="s"&gt;"Richard Donner"&lt;/span&gt;, &lt;span class="ss"&gt;:rating&lt;/span&gt; &lt;span class="mf"&gt;6.6&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:name&lt;/span&gt; &lt;span class="s"&gt;"Predator"&lt;/span&gt;, &lt;span class="ss"&gt;:director&lt;/span&gt; &lt;span class="s"&gt;"John McTiernan"&lt;/span&gt;, &lt;span class="ss"&gt;:rating&lt;/span&gt; &lt;span class="mf"&gt;7.8&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:name&lt;/span&gt; &lt;span class="s"&gt;"Mad Max Beyond Thunderdome"&lt;/span&gt;, &lt;span class="ss"&gt;:director&lt;/span&gt; &lt;span class="s"&gt;"George Miller"&lt;/span&gt;, &lt;span class="ss"&gt;:rating&lt;/span&gt; &lt;span class="mf"&gt;6.1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:name&lt;/span&gt; &lt;span class="s"&gt;"The Terminator"&lt;/span&gt;, &lt;span class="ss"&gt;:director&lt;/span&gt; &lt;span class="s"&gt;"James Cameron"&lt;/span&gt;, &lt;span class="ss"&gt;:rating&lt;/span&gt; &lt;span class="mf"&gt;8.1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="nv"&gt;...&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Transforming the sequence is simple enough:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;require&lt;/span&gt; &lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;com.rpl.specter&lt;/span&gt; &lt;span class="ss"&gt;:as&lt;/span&gt; &lt;span class="nv"&gt;s&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="nv"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;nil&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;s/transform&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;s/ALL&lt;/span&gt; &lt;span class="ss"&gt;:name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="nv"&gt;clojure.string/upper-case&lt;/span&gt; &lt;span class="nv"&gt;movies&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="ss"&gt;:name&lt;/span&gt; &lt;span class="s"&gt;"FIRST BLOOD"&lt;/span&gt;, &lt;span class="ss"&gt;:director&lt;/span&gt; &lt;span class="s"&gt;"Ted Kotcheff"&lt;/span&gt;, &lt;span class="ss"&gt;:rating&lt;/span&gt; &lt;span class="mf"&gt;7.6&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;, &lt;span class="nv"&gt;...&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In general, transformation is Specter's forte and is covered very well by the &lt;a href="https://github.com/nathanmarz/specter"&gt;documentation&lt;/a&gt;. I was however interested in exploiting Specter for doing analysis and aggregation of data stored in a sequence of nested maps. It is possible to do so with standard Clojure functions, but I like the declarativeness of Specter and wanted to give it a shot.&lt;/p&gt;
&lt;p&gt;Let's for example find all movies by James Cameron with a rating higher than 8.0:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;s/select&lt;/span&gt; 
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;s/ALL&lt;/span&gt; 
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;s/cond-path&lt;/span&gt; 
     &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:director&lt;/span&gt; &lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;= &lt;/span&gt;&lt;span class="s"&gt;"James Cameron"&lt;/span&gt; &lt;span class="nv"&gt;%&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; 
     &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:rating&lt;/span&gt; &lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;&amp;gt; &lt;/span&gt;&lt;span class="nv"&gt;%&lt;/span&gt; &lt;span class="mf"&gt;8.0&lt;/span&gt;&lt;span class="p"&gt;)])]&lt;/span&gt; 
  &lt;span class="nv"&gt;movies&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;8.1&lt;/span&gt; &lt;span class="mf"&gt;8.5&lt;/span&gt; &lt;span class="mf"&gt;8.6&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;(Note: Nathan Marz let me know via Twitter that there's a better to do the following, more on that at the end of the post!)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;So we get the ratings and they are all greater than 8.0, but we have lost the original maps. How do we get those? It turns out that you can reference the &lt;code&gt;VAL&lt;/code&gt; symbol basically anywhere within the selector path. This resolves to whatever value is selected by Specter at this level of nesting. If we example put &lt;code&gt;VAL&lt;/code&gt; at the end, we duplicate the rating:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;s/select&lt;/span&gt; 
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;s/ALL&lt;/span&gt; 
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;s/cond-path&lt;/span&gt; 
     &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:director&lt;/span&gt; &lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;= &lt;/span&gt;&lt;span class="s"&gt;"James Cameron"&lt;/span&gt; &lt;span class="nv"&gt;%&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; 
     &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:rating&lt;/span&gt; &lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;&amp;gt; &lt;/span&gt;&lt;span class="nv"&gt;%&lt;/span&gt; &lt;span class="mf"&gt;8.0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;s/VAL&lt;/span&gt;&lt;span class="p"&gt;])]&lt;/span&gt; 
  &lt;span class="nv"&gt;movies&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="mf"&gt;8.1&lt;/span&gt; &lt;span class="mf"&gt;8.1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;8.5&lt;/span&gt; &lt;span class="mf"&gt;8.5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;8.6&lt;/span&gt; &lt;span class="mf"&gt;8.6&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When working with sequences of maps, it's usually the case that we want to get the whole map back, so we should put &lt;code&gt;VAL&lt;/code&gt; at the beginning of the selector path:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;s/select&lt;/span&gt; 
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;s/ALL&lt;/span&gt; 
   &lt;span class="nv"&gt;s/VAL&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;s/cond-path&lt;/span&gt; 
     &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:director&lt;/span&gt; &lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;= &lt;/span&gt;&lt;span class="s"&gt;"James Cameron"&lt;/span&gt; &lt;span class="nv"&gt;%&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; 
     &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:rating&lt;/span&gt; &lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;&amp;gt; &lt;/span&gt;&lt;span class="nv"&gt;%&lt;/span&gt; &lt;span class="mf"&gt;8.0&lt;/span&gt;&lt;span class="p"&gt;)])]&lt;/span&gt; 
  &lt;span class="nv"&gt;movies&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[[{&lt;/span&gt;&lt;span class="ss"&gt;:name&lt;/span&gt; &lt;span class="s"&gt;"The Terminator"&lt;/span&gt;, &lt;span class="ss"&gt;:director&lt;/span&gt; &lt;span class="s"&gt;"James Cameron"&lt;/span&gt;, &lt;span class="ss"&gt;:rating&lt;/span&gt; &lt;span class="mf"&gt;8.1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="mf"&gt;8.1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="nv"&gt;...&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we get the full map back, but it's wrapped in a collection. We can introduce a helper function for this use case:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defn &lt;/span&gt;&lt;span class="nv"&gt;select-maps&lt;/span&gt; 
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;selector&lt;/span&gt; &lt;span class="nv"&gt;structure&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;-&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;s/select&lt;/span&gt; &lt;span class="nv"&gt;selector&lt;/span&gt; &lt;span class="nv"&gt;structure&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
         &lt;span class="c1"&gt;; the map we're after is always the first argument&lt;/span&gt;
         &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;mapv&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;fn &lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="nv"&gt;m&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="nv"&gt;_&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="nv"&gt;m&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;    
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now working with sequences of maps is more comfortable:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;select-maps&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;s/ALL&lt;/span&gt; 
   &lt;span class="nv"&gt;s/VAL&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;s/cond-path&lt;/span&gt; 
     &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:director&lt;/span&gt; &lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;= &lt;/span&gt;&lt;span class="s"&gt;"James Cameron"&lt;/span&gt; &lt;span class="nv"&gt;%&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; 
     &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:rating&lt;/span&gt; &lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;&amp;gt; &lt;/span&gt;&lt;span class="nv"&gt;%&lt;/span&gt; &lt;span class="mf"&gt;8.0&lt;/span&gt;&lt;span class="p"&gt;)])]&lt;/span&gt; 
  &lt;span class="nv"&gt;movies&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="ss"&gt;:name&lt;/span&gt; &lt;span class="s"&gt;"The Terminator"&lt;/span&gt;, &lt;span class="ss"&gt;:director&lt;/span&gt; &lt;span class="s"&gt;"James Cameron"&lt;/span&gt;, &lt;span class="ss"&gt;:rating&lt;/span&gt; &lt;span class="mf"&gt;8.1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nv"&gt;...&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Specter's path definition functions can be exploited to get e.g. movies of James Cameron that have an either very bad or very good rating:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;select-maps&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;s/ALL&lt;/span&gt; 
   &lt;span class="nv"&gt;s/VAL&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;s/cond-path&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:director&lt;/span&gt; &lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;= &lt;/span&gt;&lt;span class="s"&gt;"James Cameron"&lt;/span&gt; &lt;span class="nv"&gt;%&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;s/multi-path&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:rating&lt;/span&gt; &lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;&amp;gt; &lt;/span&gt;&lt;span class="nv"&gt;%&lt;/span&gt; &lt;span class="mf"&gt;8.5&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:rating&lt;/span&gt; &lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;&amp;lt; &lt;/span&gt;&lt;span class="nv"&gt;%&lt;/span&gt; &lt;span class="mf"&gt;6.0&lt;/span&gt;&lt;span class="p"&gt;)]))]&lt;/span&gt; 
  &lt;span class="nv"&gt;movies&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;=&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="ss"&gt;:name&lt;/span&gt; &lt;span class="s"&gt;"Terminator 3: Judgment Day"&lt;/span&gt;, 
  &lt;span class="ss"&gt;:director&lt;/span&gt; &lt;span class="s"&gt;"James Cameron"&lt;/span&gt;, &lt;span class="ss"&gt;:rating&lt;/span&gt; &lt;span class="mf"&gt;8.6&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:name&lt;/span&gt; &lt;span class="s"&gt;"Piranhas II"&lt;/span&gt;, &lt;span class="ss"&gt;:director&lt;/span&gt; &lt;span class="s"&gt;"James Cameron"&lt;/span&gt;, &lt;span class="ss"&gt;:rating&lt;/span&gt; &lt;span class="mf"&gt;3.5&lt;/span&gt;&lt;span class="p"&gt;}]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So this works, but it's clunky and requires a helper function. Is there an easier way?&lt;/p&gt;
&lt;h4&gt;&lt;a href="#the-right-way" id="the-right-way"&gt;&lt;/a&gt;The right way&lt;/h4&gt;
&lt;p&gt;As pointed out to me by the library author, there's a much better way of accomplishing the above:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;s/select&lt;/span&gt; 
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;s/ALL&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;s/selected?&lt;/span&gt; &lt;span class="ss"&gt;:director&lt;/span&gt; &lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;= &lt;/span&gt;&lt;span class="s"&gt;"James Cameron"&lt;/span&gt; &lt;span class="nv"&gt;%&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;s/selected?&lt;/span&gt; &lt;span class="ss"&gt;:rating&lt;/span&gt; &lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;&amp;gt; &lt;/span&gt;&lt;span class="nv"&gt;%&lt;/span&gt; &lt;span class="mf"&gt;8.0&lt;/span&gt;&lt;span class="p"&gt;))]&lt;/span&gt;
  &lt;span class="nv"&gt;movies&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;selected?&lt;/code&gt; function filters the current value based on whether the selector that follows matches anything. It doesn't mess up the return value like the other examples above. It can of course be combined with conditional paths or multipaths as in the previous example:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;s/select&lt;/span&gt; 
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;s/ALL&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;s/selected?&lt;/span&gt; &lt;span class="ss"&gt;:director&lt;/span&gt; &lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;= &lt;/span&gt;&lt;span class="s"&gt;"James Cameron"&lt;/span&gt; &lt;span class="nv"&gt;%&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;s/selected?&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;s/multi-path&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:rating&lt;/span&gt; &lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;&amp;gt; &lt;/span&gt;&lt;span class="nv"&gt;%&lt;/span&gt; &lt;span class="mf"&gt;8.0&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:rating&lt;/span&gt; &lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;&amp;lt; &lt;/span&gt;&lt;span class="nv"&gt;%&lt;/span&gt; &lt;span class="mf"&gt;6.0&lt;/span&gt;&lt;span class="p"&gt;)]))]&lt;/span&gt;
  &lt;span class="nv"&gt;movies&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;&lt;a href="#conclusion" id="conclusion"&gt;&lt;/a&gt;Conclusion&lt;/h4&gt;
&lt;p&gt;I think Specter is one of the best things to come out of the Clojure ecosystem recently. I find it a lot easier to grasp how to use Specter than for example zippers, which is another popular way of working with nested data structures. It's still a bit dense to get into, though — Specter would benefit greatly from something like the &lt;a href="http://www.learndatalogtoday.org/"&gt;Learn Datalog Today&lt;/a&gt; website!&lt;/p&gt;
&lt;/div&gt;&lt;div&gt;&lt;a href="/"&gt;Back&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="footer"&gt;&lt;p&gt;&amp;copy; 2015-2017 Johannes Staffans&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/html&gt;</content><author><name>Johannes Staffans</name></author><category term="clojure"></category><category term="data structures"></category><category term="specter"></category></entry><entry><id>urn:uuid:738cd775-b94a-4931-b111-e434a4059cc1</id><title>Spicing up Java projects with Clojure</title><link href="https://jstaffans.github.io/posts/2015-05-21-clojure-spice.html" type="text/html" title="Spicing up Java projects with Clojure" rel="alternate"></link><published>2015-05-21T00:00:00Z</published><updated>2015-05-21T00:00:00Z</updated><content type="html" xml:base="https://jstaffans.github.io/posts/2015-05-21-clojure-spice.html">&lt;!DOCTYPE html&gt;
&lt;html&gt;&lt;head&gt;&lt;meta charset="utf-8"&gt;&lt;meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible"&gt;&lt;meta content="width=device-width, initial-scale=1, maximum-scale=1" name="viewport"&gt;&lt;meta content="Johannes Staffans" itemprop="author" name="author"&gt;&lt;title&gt;Johannes Staffans - Spicing up Java projects with Clojure&lt;/title&gt;&lt;link href="https://fonts.googleapis.com/css?family=Merriweather:400,700|Open+Sans:400,700" rel="stylesheet"&gt;&lt;link href="/styles/main.css" rel="stylesheet" type="text/css"&gt;&lt;/head&gt;&lt;div&gt;&lt;div class="header"&gt;&lt;div class="header__content clearfix"&gt;&lt;div class="sm-col sm-col-8"&gt;&lt;div&gt;personal website and blog of&lt;/div&gt;&lt;h1 class="header__headline"&gt;&lt;a href="/"&gt;Johannes Staffans&lt;/a&gt;&lt;/h1&gt;&lt;/div&gt;&lt;div class="sm-col flex-column"&gt;&lt;div&gt;&lt;a href="/"&gt;posts&lt;/a&gt;&lt;span&gt; &amp;middot; &lt;/span&gt;&lt;a href="/pages/about.html"&gt;about&lt;/a&gt;&lt;/div&gt;&lt;div class="pt1"&gt;elsewhere&lt;/div&gt;&lt;div&gt;&lt;a href="https://github.com/jstaffans"&gt;github&lt;/a&gt;&lt;span&gt; &amp;middot; &lt;/span&gt;&lt;a href="https://www.linkedin.com/in/jstaffans"&gt;linkedin&lt;/a&gt;&lt;span&gt; &amp;middot; &lt;/span&gt;&lt;a href="https://twitter.com/jstaffans"&gt;@jstaffans&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="clearfix"&gt;&lt;svg class="left border-triangle" version="1.1" xmlns="http://www.w3.org/2000/svg"&gt;&lt;polygon class="mask" points="0,0 30,0 30,30 0,30"&gt;&lt;/polygon&gt;&lt;polygon points="0,15 30,0 30,30"&gt;&lt;/polygon&gt;&lt;/svg&gt;&lt;svg class="right border-triangle" version="1.1" xmlns="http://www.w3.org/2000/svg"&gt;&lt;polygon class="mask" points="0,0 30,0 30,30 0,30"&gt;&lt;/polygon&gt;&lt;polygon points="30,15 0,30 0,0"&gt;&lt;/polygon&gt;&lt;/svg&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="container"&gt;&lt;div&gt;&lt;div class="flex items-baseline justify-between"&gt;&lt;h2&gt;Spicing up Java projects with Clojure&lt;/h2&gt;&lt;div&gt;&lt;span&gt;14.11.2017&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;p&gt;Many engineers with an interest in Clojure are probably working on Java code bases for most of the day. This doesn't have to be the end of the world if you're tickling to write some Clojure code, as there are many ways of bringing Clojure to existing Java-based projects.&lt;/p&gt;
&lt;p&gt;You can opt to build parts of the system separately using Clojure, providing a JAR file that can be used in the main project. It's even relatively straight-forward to write Clojure namespaces alongside the Java packages and do Java-Clojure interop. But there are also some subtler ways of using Clojure with legacy Java code bases. One of those is adding a REPL to your Java application and using it to do REPL-based testing and exploration with Clojure.&lt;/p&gt;
&lt;h3&gt;&lt;a href="#jvm-break-glass-driving-spring-with-clojure" id="jvm-break-glass-driving-spring-with-clojure"&gt;&lt;/a&gt;JVM Break Glass: driving Spring with Clojure&lt;/h3&gt;
&lt;p&gt;An excellent place to start is the &lt;a href="https://github.com/matlux/jvm-breakglass"&gt;JVM Break Glass library&lt;/a&gt;. The purpose of this library is to provide REPL facilities for traditional enterprise Java applications. It works especially well for Spring-based applications. Once you have a REPL running, you can use methods provided by the library to fetch Spring beans and interact with them as you would with any other Java object.&lt;/p&gt;
&lt;p&gt;If your Java application is anything like the ones I've seen, it probably provides a REST API of some sort and is most likely organized into different layers — Controllers, Services and so on. In addition to unit tests, I have often seen people using cURL or even a browser as the main tool for test-driving the system, which of course means going through the Controller layer even if the thing we are interested in is actually a piece of business logic in some deeper application layer.&lt;/p&gt;
&lt;p&gt;Being able to play around with beans in the Service layer directly in a running system is a way of focusing exactly on the thing you're interested in and iterating rapidly. This is second nature to Clojurists who do REPL-driven programming all the time, but almost magical to most Java programmers.&lt;/p&gt;
&lt;h4&gt;&lt;a href="#getting-started" id="getting-started"&gt;&lt;/a&gt;Getting started&lt;/h4&gt;
&lt;p&gt;First add the JVM Break Glass library as a dependency to your project:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;net.matlux&lt;span class="nt"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;jvm-breakglass&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;version&amp;gt;&lt;/span&gt;0.0.8&lt;span class="nt"&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Spring then needs to be configured to launch the REPL when the application starts. In this example, we are only interested in having a REPL during local development and not in production, which we can achieve using Spring profiles:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@Bean&lt;/span&gt;
&lt;span class="nd"&gt;@Profile&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"dev"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;NreplServerSpring&lt;/span&gt; &lt;span class="nf"&gt;repl&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;NreplServerSpring&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1112&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will launch an nREPL listening to port 1112 when the application is launched with the JVM option &lt;code&gt;-Dspring.profiles.active=dev&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;With the application running, you can then simply connect to the nREPL server with Leiningen or using whatever Clojure development environment you otherwise use.&lt;/p&gt;
&lt;p&gt;So far, so good. When you have a REPL open, the following will get you started:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use&lt;/span&gt; &lt;span class="ss"&gt;'cl-java-introspector.spring&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use&lt;/span&gt; &lt;span class="ss"&gt;'cl-java-introspector.core&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;nil&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After that, start looking for your beans and play around!&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;filter &lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;.contains&lt;/span&gt; &lt;span class="nv"&gt;%&lt;/span&gt; &lt;span class="s"&gt;"Service"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;get-beans&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="nv"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"paymentService"&lt;/span&gt; &lt;span class="s"&gt;"reportingService"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;def &lt;/span&gt;&lt;span class="nv"&gt;reporting-service&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;get-bean&lt;/span&gt; &lt;span class="s"&gt;"reportingService"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="nv"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="ss"&gt;'user/reporting-service&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;methods-info&lt;/span&gt; &lt;span class="nv"&gt;reporting-service&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;.getPayments&lt;/span&gt; &lt;span class="nv"&gt;reporting-service&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;  &lt;span class="c1"&gt;; no payments yet!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is already quite powerful for exploring APIs, driving Service layer beans and so on. The &lt;a href="https://github.com/matlux/jvm-breakglass"&gt;JVM Break Glass project page&lt;/a&gt; has some other examples of what is possible using the REPL. But besides pure exploration, there are lots more things you can do once you have an nREPL hook into your project.&lt;/p&gt;
&lt;h4&gt;&lt;a href="#data-visualisations-with-incanter" id="data-visualisations-with-incanter"&gt;&lt;/a&gt;Data visualisations with Incanter&lt;/h4&gt;
&lt;p&gt;One way of leveraging Clojure in Java projects is taking advantage of its impressive data processing and analysis capabilities. I recommend the &lt;a href="https://www.packtpub.com/big-data-and-business-intelligence/clojure-data-analysis-cookbook"&gt;Clojure Data Analysis Cookbook&lt;/a&gt; for anyone interested in learning more about patterns for data crunching in Clojure. Here, we'll take a look at how to visualise data using the &lt;a href="http://incanter.org/"&gt;Incanter&lt;/a&gt; library.&lt;/p&gt;
&lt;p&gt;I think visualising data flowing through a live application is one of the best ways of gaining deeper understanding into how the application works. Of course, everything we do here can also be accomplished by logging data and using an external data analysis application, but being able to do it directly in the application brings a whole different level of interactivity to the table.&lt;/p&gt;
&lt;p&gt;First, we'll add one more dependency to our project:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;im.chit&lt;span class="nt"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;vinyasa&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;version&amp;gt;&lt;/span&gt;0.3.4&lt;span class="nt"&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;a href="https://github.com/zcaudate/vinyasa"&gt;vinyasa library&lt;/a&gt; provides a kind of toolbelt for REPL-driven development in Clojure. One of the tools included is a utility called &lt;a href="https://github.com/zcaudate/vinyasa#pull"&gt;pull&lt;/a&gt;. Using this function, Maven dependencies can be pulled in directly from the REPL, without the need for adding dependencies to your project. More importantly, there is no need to restart anything, which makes it perfect for REPL exploration.&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;; This will take a long time the first time you do it because &lt;/span&gt;
&lt;span class="c1"&gt;; incanter has lots of dependencies. After that, the dependencies &lt;/span&gt;
&lt;span class="c1"&gt;; will be cached in your local Maven repository. &lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;pull&lt;/span&gt; &lt;span class="ss"&gt;'incanter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;; lots of dependencies ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As an example, we'll do some exploration of the &lt;a href="http://jstaffans.github.io/blog/2015/03/16/spring-boot.html"&gt;toy payment system&lt;/a&gt; I wrote about in a previous blog post. Given a credit card number, the service will perform a charge of 1,000 €. There is however a subtle bug — the sum always seems to be close to 1,000 €, but never exactly 1,000 €. We decide to explore the problem a bit by performing a series of payments using a test credit card number and plotting a histogram of the charged sums.&lt;/p&gt;
&lt;p&gt;As this is more involved than a few lines of code at the REPL, we'll save our work as a .clj file in a special folder: &lt;code&gt;src/exploration/clojure/visualise_payments.clj&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;ns &lt;/span&gt;&lt;span class="nv"&gt;visualise-payments&lt;/span&gt;
 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:require&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;cl-java-introspector.spring&lt;/span&gt; &lt;span class="ss"&gt;:refer&lt;/span&gt; &lt;span class="ss"&gt;:all&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;cl-java-introspector.core&lt;/span&gt; &lt;span class="ss"&gt;:refer&lt;/span&gt; &lt;span class="ss"&gt;:all&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;vinyasa.pull&lt;/span&gt; &lt;span class="ss"&gt;:refer&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;pull&lt;/span&gt;&lt;span class="p"&gt;]]))&lt;/span&gt;

&lt;span class="c1"&gt;; Get the Spring service bean we want to test drive&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;def &lt;/span&gt;&lt;span class="nv"&gt;paymentService&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;get-bean&lt;/span&gt; &lt;span class="s"&gt;"paymentService"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;; Helpers for working with RxJava observables and Java beans&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defn- &lt;/span&gt;&lt;span class="nv"&gt;result-from-observable&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;observable&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;.first&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;.toBlocking&lt;/span&gt; &lt;span class="nv"&gt;observable&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defn- &lt;/span&gt;&lt;span class="nv"&gt;sum-from-result&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;result&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;.getSum&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;.getPayment&lt;/span&gt; &lt;span class="nv"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

&lt;span class="c1"&gt;; create a sequence of test payments &lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defn- &lt;/span&gt;&lt;span class="nv"&gt;do-test-payments&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;n&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;letfn&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="nf"&gt;pay&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;cc-number&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;result-from-observable&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;.doPayment&lt;/span&gt; &lt;span class="nv"&gt;paymentService&lt;/span&gt; &lt;span class="nv"&gt;cc-number&lt;/span&gt;&lt;span class="p"&gt;)))]&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;map &lt;/span&gt;&lt;span class="nv"&gt;pay&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;repeat &lt;/span&gt;&lt;span class="nv"&gt;n&lt;/span&gt; &lt;span class="s"&gt;"TEST_NUMBER"&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;def &lt;/span&gt;&lt;span class="nv"&gt;payments&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;do-test-payments&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;; Pull Incanter dependency for data analysis and graphs&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;pull&lt;/span&gt; &lt;span class="ss"&gt;'incanter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;require&lt;/span&gt;
 &lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;incanter.core&lt;/span&gt; &lt;span class="ss"&gt;:as&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;incanter.charts&lt;/span&gt; &lt;span class="ss"&gt;:as&lt;/span&gt; &lt;span class="nv"&gt;c&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="c1"&gt;; pull statuses and sums into an Incanter dataset&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;def &lt;/span&gt;&lt;span class="nv"&gt;payments-dataset&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;i/dataset&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:status&lt;/span&gt; &lt;span class="ss"&gt;:sum&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;map &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;juxt&lt;/span&gt; &lt;span class="ss"&gt;:status&lt;/span&gt; &lt;span class="nv"&gt;sum-from-result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;payments&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

&lt;span class="c1"&gt;; plot a histogram with the sums&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;i/view&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;c/histogram&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;i/sel&lt;/span&gt; &lt;span class="nv"&gt;payments-dataset&lt;/span&gt; &lt;span class="ss"&gt;:cols&lt;/span&gt; &lt;span class="ss"&gt;:sum&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ss"&gt;:nbins&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Loading this into the REPL will produce an Incanter chart (note that it often opens behind the currently open window, at least on OS X):&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/incanter.png" alt="incanter chart" /&gt;&lt;/p&gt;
&lt;p&gt;The sum seems to follow a Gaussian distribution around 1,000 EUR. We now know something more about the thing we are investigating and can continue from here. This was of course a pretty trivial example — at &lt;a href="https://www.komoot.de"&gt;komoot&lt;/a&gt;, I have used a similar approach to investigate e.g. how many active users we have within different radiuses of city centers, only leveraging the application itself and not trawling through database dumps.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note: make sure that the application is started with &lt;code&gt;-Djava.awt.headless=false&lt;/code&gt;, otherwise opening graphics windows with Incanter won't work! Headless mode seems to be the default at least using IntelliJ IDEA.&lt;/strong&gt;&lt;/p&gt;
&lt;h4&gt;&lt;a href="#sample-project" id="sample-project"&gt;&lt;/a&gt;Sample project&lt;/h4&gt;
&lt;p&gt;Have a look at a &lt;a href="https://github.com/jstaffans/pay-me-spring-boot"&gt;sample project on Github&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a href="#other-uses-of-clojure-in-java-applications" id="other-uses-of-clojure-in-java-applications"&gt;&lt;/a&gt;Other uses of Clojure in Java applications&lt;/h3&gt;
&lt;p&gt;We have barely scratched the surface of the potential Clojure has for Java applications. Another area in which I have had success is for example property testing using &lt;a href="https://github.com/clojure/test.check"&gt;test.check&lt;/a&gt;. Testing in general is a good avenue for bringing Clojure into Java projects.&lt;/p&gt;
&lt;p&gt;We didn't really talk about doing REPL-driven development in this article, only about exploring an existing Java application using Clojure. You can definitely do REPL-driven development too, if you use a tool like &lt;a href="http://zeroturnaround.com/software/jrebel/"&gt;JRebel&lt;/a&gt; that is capable of advanced code hot-swapping. It's not as nice as namespace reloading in Clojure, but pretty close!&lt;/p&gt;
&lt;/div&gt;&lt;div&gt;&lt;a href="/"&gt;Back&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="footer"&gt;&lt;p&gt;&amp;copy; 2015-2017 Johannes Staffans&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/html&gt;</content><author><name>Johannes Staffans</name></author><category term="clojure"></category><category term="java"></category></entry><entry><id>urn:uuid:61f7d274-aee4-40f2-a269-3a0656bc2764</id><title>Taking duct for a spin</title><link href="https://jstaffans.github.io/posts/2015-02-08-duct.html" type="text/html" title="Taking duct for a spin" rel="alternate"></link><published>2015-02-08T00:00:00Z</published><updated>2015-02-08T00:00:00Z</updated><content type="html" xml:base="https://jstaffans.github.io/posts/2015-02-08-duct.html">&lt;!DOCTYPE html&gt;
&lt;html&gt;&lt;head&gt;&lt;meta charset="utf-8"&gt;&lt;meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible"&gt;&lt;meta content="width=device-width, initial-scale=1, maximum-scale=1" name="viewport"&gt;&lt;meta content="Johannes Staffans" itemprop="author" name="author"&gt;&lt;title&gt;Johannes Staffans - Taking duct for a spin&lt;/title&gt;&lt;link href="https://fonts.googleapis.com/css?family=Merriweather:400,700|Open+Sans:400,700" rel="stylesheet"&gt;&lt;link href="/styles/main.css" rel="stylesheet" type="text/css"&gt;&lt;/head&gt;&lt;div&gt;&lt;div class="header"&gt;&lt;div class="header__content clearfix"&gt;&lt;div class="sm-col sm-col-8"&gt;&lt;div&gt;personal website and blog of&lt;/div&gt;&lt;h1 class="header__headline"&gt;&lt;a href="/"&gt;Johannes Staffans&lt;/a&gt;&lt;/h1&gt;&lt;/div&gt;&lt;div class="sm-col flex-column"&gt;&lt;div&gt;&lt;a href="/"&gt;posts&lt;/a&gt;&lt;span&gt; &amp;middot; &lt;/span&gt;&lt;a href="/pages/about.html"&gt;about&lt;/a&gt;&lt;/div&gt;&lt;div class="pt1"&gt;elsewhere&lt;/div&gt;&lt;div&gt;&lt;a href="https://github.com/jstaffans"&gt;github&lt;/a&gt;&lt;span&gt; &amp;middot; &lt;/span&gt;&lt;a href="https://www.linkedin.com/in/jstaffans"&gt;linkedin&lt;/a&gt;&lt;span&gt; &amp;middot; &lt;/span&gt;&lt;a href="https://twitter.com/jstaffans"&gt;@jstaffans&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="clearfix"&gt;&lt;svg class="left border-triangle" version="1.1" xmlns="http://www.w3.org/2000/svg"&gt;&lt;polygon class="mask" points="0,0 30,0 30,30 0,30"&gt;&lt;/polygon&gt;&lt;polygon points="0,15 30,0 30,30"&gt;&lt;/polygon&gt;&lt;/svg&gt;&lt;svg class="right border-triangle" version="1.1" xmlns="http://www.w3.org/2000/svg"&gt;&lt;polygon class="mask" points="0,0 30,0 30,30 0,30"&gt;&lt;/polygon&gt;&lt;polygon points="30,15 0,30 0,0"&gt;&lt;/polygon&gt;&lt;/svg&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="container"&gt;&lt;div&gt;&lt;div class="flex items-baseline justify-between"&gt;&lt;h2&gt;Taking duct for a spin&lt;/h2&gt;&lt;div&gt;&lt;span&gt;14.11.2017&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;p&gt;I have been meaning to try building a simple web application using Stuart Sierra's &lt;a href="https://github.com/stuartsierra/component"&gt;Component&lt;/a&gt; library for a while now. If you haven't heard about it, it's definitely worth having a look at - it is a lovely way of organising the different components that go into an application and gives you a smooth workflow in the REPL.&lt;/p&gt;
&lt;p&gt;So we agree that a Component-based approach is good. Where do we start? I had a run-of-the-mill web application based on Ring/Compojure in mind, but at least for me it was not at all evident how to marry a Compojure-based architecture with the Component pattern. The few examples I found seemed a bit &lt;a href="https://gist.github.com/Deraen/9d65f447593859dd07ae"&gt;contrived&lt;/a&gt;. I felt I wanted something more concrete to build on, preferrably a template of some sort.&lt;/p&gt;
&lt;p&gt;I had heard about James Reeves' &lt;a href="https://github.com/weavejester/duct"&gt;duct&lt;/a&gt; library a few weeks prior and it turned out to be exactly what I had been looking for. The duct library comes with a Leiningen plugin that generates a simple Component-based project that is very easy to build on. The integration with Compojure is elegantly handled by wrapping Compojure routes in &lt;em&gt;endpoints&lt;/em&gt;. Here's how the library author defines an endpoint:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Endpoints should resemble microservices, grouping routes by purpose. An endpoint might handle user authentication, or handle comments on a post. Strive to keep your endpoints small and focused.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Besides the endpoint solution, duct provides some other useful things, such as sensible handling of application configuration parameters through environment variables. I love not having to set those things up myself.&lt;/p&gt;
&lt;h3&gt;&lt;a href="#the-application" id="the-application"&gt;&lt;/a&gt;The application&lt;/h3&gt;
&lt;p&gt;For my toy project, I decided to implement a simple payment service. The basic interactions can be seen in the following diagram (yellow boxes represent endpoint components, green boxes are background service components):&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/pay-me.png" alt="interaction diagram" /&gt;&lt;/p&gt;
&lt;p&gt;So the user enters a credit card number, which is verified by a phony verification endpoint. The verification endpoint provides a secure token with which further transactions can be performed. A payment processing component handles interaction with an imaginary third-party service provider and a reporting component keeps track of all transactions. The imaginary third-party payment service provider is notoriously unreliable, so about half the time, the transaction will time out.&lt;/p&gt;
&lt;p&gt;Note that the credit card number verification and the payment transaction processing would in the real world be handled by the &lt;em&gt;same&lt;/em&gt; third party provider — I'm just faking things here, providing the token on my own.&lt;/p&gt;
&lt;p&gt;There's a tiny ClojureScript frontend that handles the AJAX request to get the token and prints out a list of transactions on the payment confirmation page.&lt;/p&gt;
&lt;p&gt;Communication between components is handled using core.async channels. As a side note, I can say that implementing this web application proved a very useful exercise in understanding core.async channels as a means of communication between components. I had earlier mainly seen them as a way of handling background tasks, such as firing web requests using the callback API of &lt;a href="http://www.http-kit.org/"&gt;http-kit&lt;/a&gt;. Now I can see that the perhaps most useful case for core.async is exactly this: communication between different parts of a system.&lt;/p&gt;
&lt;p&gt;The whole thing is deployable using Docke, more information on that in the &lt;a href="https://github.com/jstaffans/pay-me#deployment"&gt;README&lt;/a&gt;. The source code is &lt;a href="https://github.com/jstaffans/pay-me"&gt;available on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;div&gt;&lt;a href="/"&gt;Back&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="footer"&gt;&lt;p&gt;&amp;copy; 2015-2017 Johannes Staffans&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/html&gt;</content><author><name>Johannes Staffans</name></author><category term="clojure"></category><category term="microservices"></category></entry></feed>