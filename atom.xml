<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom"><title>Johannes Staffans</title><subtitle>Johannes Staffans' blog</subtitle><generator uri="https://perun.io/" version="0.4.2-SNAPSHOT">Perun</generator><link href="https://jstaffans.github.io/" type="text/html"></link><link href="https://jstaffans.github.io/atom.xml" rel="self"></link><link href="https://jstaffans.github.io/atom.xml" rel="first"></link><link href="https://jstaffans.github.io/atom-2.xml" rel="last"></link><link href="https://jstaffans.github.io/atom-2.xml" rel="next"></link><updated>2017-11-16T22:02:48Z</updated><id>https://jstaffans.github.io/</id><entry><id>urn:uuid:f5ab79c6-3413-4fd3-a579-8c04228e2175</id><title>A vertical microservice with Spring Boot</title><link href="https://jstaffans.github.io/posts/2015-03-16-spring-boot.html" type="text/html" title="A vertical microservice with Spring Boot" rel="alternate"></link><published>2017-11-16T22:02:48Z</published><updated>2017-11-16T22:02:48Z</updated><content type="html" xml:base="https://jstaffans.github.io/posts/2015-03-16-spring-boot.html">&lt;!DOCTYPE html&gt;
&lt;html&gt;&lt;head&gt;&lt;meta charset="utf-8"&gt;&lt;meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible"&gt;&lt;meta content="width=device-width, initial-scale=1, maximum-scale=1" name="viewport"&gt;&lt;meta content="Johannes Staffans" itemprop="author" name="author"&gt;&lt;title&gt;Johannes Staffans - A vertical microservice with Spring Boot&lt;/title&gt;&lt;link href="https://fonts.googleapis.com/css?family=Merriweather:400,700|Open+Sans:400,700" rel="stylesheet"&gt;&lt;link href="/styles/main.css" rel="stylesheet" type="text/css"&gt;&lt;/head&gt;&lt;div&gt;&lt;div class="header"&gt;&lt;div class="header__content clearfix"&gt;&lt;div class="sm-col sm-col-8"&gt;&lt;div&gt;personal website and blog of&lt;/div&gt;&lt;h1 class="header__headline"&gt;&lt;a href="/"&gt;Johannes Staffans&lt;/a&gt;&lt;/h1&gt;&lt;/div&gt;&lt;div class="sm-col flex-column"&gt;&lt;div&gt;&lt;a href="/"&gt;posts&lt;/a&gt;&lt;span&gt; &amp;middot; &lt;/span&gt;&lt;a href="/pages/about.html"&gt;about&lt;/a&gt;&lt;/div&gt;&lt;div class="pt1"&gt;elsewhere&lt;/div&gt;&lt;div&gt;&lt;a href="https://github.com/jstaffans"&gt;github&lt;/a&gt;&lt;span&gt; &amp;middot; &lt;/span&gt;&lt;a href="https://www.linkedin.com/in/jstaffans"&gt;linkedin&lt;/a&gt;&lt;span&gt; &amp;middot; &lt;/span&gt;&lt;a href="https://twitter.com/jstaffans"&gt;@jstaffans&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="clearfix"&gt;&lt;svg class="left border-triangle" version="1.1" xmlns="http://www.w3.org/2000/svg"&gt;&lt;polygon class="mask" points="0,0 30,0 30,30 0,30"&gt;&lt;/polygon&gt;&lt;polygon points="0,15 30,0 30,30"&gt;&lt;/polygon&gt;&lt;/svg&gt;&lt;svg class="right border-triangle" version="1.1" xmlns="http://www.w3.org/2000/svg"&gt;&lt;polygon class="mask" points="0,0 30,0 30,30 0,30"&gt;&lt;/polygon&gt;&lt;polygon points="30,15 0,30 0,0"&gt;&lt;/polygon&gt;&lt;/svg&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="container"&gt;&lt;div&gt;&lt;div class="flex items-baseline justify-between"&gt;&lt;h2&gt;A vertical microservice with Spring Boot&lt;/h2&gt;&lt;div&gt;&lt;span&gt;16.03.2015&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;p&gt;At &lt;a href="https://www.komoot.de"&gt;komoot&lt;/a&gt;, we have lately been busy moving to a more microservice-oriented architecture. Many of our new features, such as the card feed that shows up whenever our mobile apps are opened, have been implemented in this fashion. We have also refactored and re-implemented some existing core components as dedicated services, one example being our routing engine.&lt;/p&gt;
&lt;p&gt;The microservices we have are so far strictly backend-related — our web client is for example still a monolithic thing, albeit a much more modern one these days. Whenever we are implementing web-facing features we need to write code in two places: for the service containing the backend logic (probably in Java, Python or Clojure) and as part of the web UI, which is written in JavaScript using the &lt;a href="http://facebook.github.io/react/"&gt;React.js library&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The fact that you have to juggle two wildly different environments to do full-stack development can be a pain point. For features that require only simple UI elements React.js is also perhaps overkill — a few server-rendered pages or an iframe with a bit of jQuery can often be enough. I think having the ability to package the UI and the backend logic together as a truly stand-alone service is an attractive concept. This works especially well if the web-facing feature we want to implement is already conceptually separate from the rest of the web UI. Examples would be an import dialog, a feedback form, a payment processor and so on.&lt;/p&gt;
&lt;p&gt;The cost of doing such "vertical microservices" is of course that you do not have as much flexibility, neither in the front- nor in the backend. You may e.g. have to bend Maven into doing things it was never really meant to do, such as optimizing JavaScript files. You also need to find a way of sharing stylesheets, so that the user gets a unified visual experience no matter which service is serving up the HTML (without having to copy and paste anything, of course).&lt;/p&gt;
&lt;h3&gt;&lt;a href="#spring-boot" id="spring-boot"&gt;&lt;/a&gt;Spring Boot&lt;/h3&gt;
&lt;p&gt;In Java land, I have long been a fan of containerless web services à la Dropwizard. After playing around with Spring Boot for a while, I would say that it does an at least equally fine job. For a development team that's already used to Spring, there's also less of a learning curve and more familiar libraries that you can just pick up and start using, Spring Security being a good example.&lt;/p&gt;
&lt;h3&gt;&lt;a href="#the-application" id="the-application"&gt;&lt;/a&gt;The application&lt;/h3&gt;
&lt;p&gt;A while ago I &lt;a href="https://jstaffans.github.io/blog/2015/02/08/duct.html"&gt;developed a toy payment service while checking out Duct, a recent addition to the Clojure web application development ecosystem&lt;/a&gt;. That application also morphed into a kind of "vertical microservice" as described above. I really enjoyed the seamless integration of Clojure and ClojureScript when developing that application, so I decided to see what it would be like to develop roughly the same application using Java and Spring Boot.&lt;/p&gt;
&lt;h4&gt;&lt;a href="#backend" id="backend"&gt;&lt;/a&gt;Backend&lt;/h4&gt;
&lt;p&gt;When developing the Clojure-based payment application, I made good use of core.async for orchestration between different parts of the backend, such as the reporting subsystem and the payment processing component — the separation of behavior and data and event-based approach that core.async brings is a big win in my opinion. When looking for something similar for use in a Java project, I finally landed by &lt;a href="https://github.com/ReactiveX/RxJava"&gt;RxJava&lt;/a&gt;. The concept is not quite the same as core.async, but it does support a more functional, event-driven style of programming. It's also pretty easy to port some core.async goodies, such as implementing timeouts by waiting for the first of several Observables to emit a value (the core.async equivalent would be to wait for the first of several channels to close, where one channel is a timeout channel).&lt;/p&gt;
&lt;p&gt;Some people may say that RxJava is best (or only) suited for UI programming, but I do think it has its place in the backend too. See &lt;a href="http://techblog.netflix.com/2013/02/rxjava-netflix-api.html"&gt;this post on the Netflix blog&lt;/a&gt; for a good example. The library does however come with a lot more concepts than a simple little thing like core.async, and I'm still only learning the basics.&lt;/p&gt;
&lt;h4&gt;&lt;a href="#frontend" id="frontend"&gt;&lt;/a&gt;Frontend&lt;/h4&gt;
&lt;p&gt;The application relies on server-side rendering using Thymeleaf for its HTML, but there are still some frontend assets to take care of, namely stylesheets and Javascript files. When developing the frontend parts of a stand-alone microservice, there are basically two choices:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Implement a separate, node.js-based build chain with for example Grunt for things like SASS compilation, JS minification and so forth. Then just serve the content as static files in your application and have Maven run an external task during the production build. This will be the favorite for most people with JS experience, I think.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Bend your existing Java build system to manage the frontend parts as well. Great for Java devs who don't want to learn about node.js! But good luck trying to get a web designer to install Maven if you need help with those stylesheets ...&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Since I am developing this project on my own and use Maven for Java development, I decided to go with the latter option. In order to not complicate things too much, I opted for a pretty basic but decently scalable setup:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Dependencies to vendor libraries such as jQuery handled by &lt;a href="http://www.webjars.org"&gt;Webjars&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;RequireJS for modularisation, with a &lt;a href="https://github.com/bringking/requirejs-maven-plugin"&gt;Maven plugin&lt;/a&gt; taking care of minification and concatenation of JavaScript files.&lt;/li&gt;
&lt;li&gt;SASS stylesheets with a &lt;a href="https://github.com/darrinholst/sass-java"&gt;filter&lt;/a&gt; for development and, again, a &lt;a href="https://github.com/darrinholst/sass-java/blob/master/sass-java-maven/README.md"&gt;Maven plugin&lt;/a&gt; for building production CSS files.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I would still like to implement cache busting for the frontend assets.&lt;/p&gt;
&lt;p&gt;The hardest part of the entire project was easily getting everything frontend-related to behave as expected, both when running from the IDE and using a production JAR! I would not recommend going with the Maven-based approach for anything really complex. Still, I am pretty satisfied with the result and I hope the project can serve as an example of how to wire things up for a simple application.&lt;/p&gt;
&lt;h3&gt;&lt;a href="#conclusion" id="conclusion"&gt;&lt;/a&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;There are many avenues I didn't explore when creating this application — for the frontend parts, I could for example have relied on an asset pipeline like &lt;a href="https://github.com/wro4j/wro4j"&gt;wro4j&lt;/a&gt; or used a node.js build chain. I wanted to see how far you could get with simple building blocks such as small, focused Maven plugins, and it turns out it is definitely doable.&lt;/p&gt;
&lt;p&gt;Java 8, Spring Boot and RxJava show that there is still some fun to be had in Java land — at least as far as the backend goes. But if you decide to go down the path of vertical microservices on the JVM, I think Clojure and ClojureScript is an unbeatable combination at the moment.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/jstaffans/pay-me-spring-boot"&gt;Check out the application on Github&lt;/a&gt;!&lt;/p&gt;
&lt;/div&gt;&lt;div&gt;&lt;a href="/"&gt;Back&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="footer"&gt;&lt;p&gt;&amp;copy; 2015-2017 Johannes Staffans&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/html&gt;</content><author><name>Johannes Staffans</name></author><category term="java"></category><category term="spring"></category><category term="microservices"></category></entry><entry><id>urn:uuid:efe7d49f-3bef-4375-94be-e660dd4a1be3</id><title>Stop the microservice spaghetti</title><link href="https://jstaffans.github.io/posts/2015-09-01-microservices-spaghetti.html" type="text/html" title="Stop the microservice spaghetti" rel="alternate"></link><published>2017-11-16T22:02:48Z</published><updated>2017-11-16T22:02:48Z</updated><content type="html" xml:base="https://jstaffans.github.io/posts/2015-09-01-microservices-spaghetti.html">&lt;!DOCTYPE html&gt;
&lt;html&gt;&lt;head&gt;&lt;meta charset="utf-8"&gt;&lt;meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible"&gt;&lt;meta content="width=device-width, initial-scale=1, maximum-scale=1" name="viewport"&gt;&lt;meta content="Johannes Staffans" itemprop="author" name="author"&gt;&lt;title&gt;Johannes Staffans - Stop the microservice spaghetti&lt;/title&gt;&lt;link href="https://fonts.googleapis.com/css?family=Merriweather:400,700|Open+Sans:400,700" rel="stylesheet"&gt;&lt;link href="/styles/main.css" rel="stylesheet" type="text/css"&gt;&lt;/head&gt;&lt;div&gt;&lt;div class="header"&gt;&lt;div class="header__content clearfix"&gt;&lt;div class="sm-col sm-col-8"&gt;&lt;div&gt;personal website and blog of&lt;/div&gt;&lt;h1 class="header__headline"&gt;&lt;a href="/"&gt;Johannes Staffans&lt;/a&gt;&lt;/h1&gt;&lt;/div&gt;&lt;div class="sm-col flex-column"&gt;&lt;div&gt;&lt;a href="/"&gt;posts&lt;/a&gt;&lt;span&gt; &amp;middot; &lt;/span&gt;&lt;a href="/pages/about.html"&gt;about&lt;/a&gt;&lt;/div&gt;&lt;div class="pt1"&gt;elsewhere&lt;/div&gt;&lt;div&gt;&lt;a href="https://github.com/jstaffans"&gt;github&lt;/a&gt;&lt;span&gt; &amp;middot; &lt;/span&gt;&lt;a href="https://www.linkedin.com/in/jstaffans"&gt;linkedin&lt;/a&gt;&lt;span&gt; &amp;middot; &lt;/span&gt;&lt;a href="https://twitter.com/jstaffans"&gt;@jstaffans&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="clearfix"&gt;&lt;svg class="left border-triangle" version="1.1" xmlns="http://www.w3.org/2000/svg"&gt;&lt;polygon class="mask" points="0,0 30,0 30,30 0,30"&gt;&lt;/polygon&gt;&lt;polygon points="0,15 30,0 30,30"&gt;&lt;/polygon&gt;&lt;/svg&gt;&lt;svg class="right border-triangle" version="1.1" xmlns="http://www.w3.org/2000/svg"&gt;&lt;polygon class="mask" points="0,0 30,0 30,30 0,30"&gt;&lt;/polygon&gt;&lt;polygon points="30,15 0,30 0,0"&gt;&lt;/polygon&gt;&lt;/svg&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="container"&gt;&lt;div&gt;&lt;div class="flex items-baseline justify-between"&gt;&lt;h2&gt;Stop the microservice spaghetti&lt;/h2&gt;&lt;div&gt;&lt;span&gt;01.09.2015&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;p&gt;When moving from a monolithic architecture to microservices, you immediately appreciate the agility with which you can develop new functionality. It's easy to get over-enthusiastic and throw a microservice at any problem you have and not spend much time thinking about the bigger picture. The last thing you want to do is replace the monolithic spaghetti code with a distributed service spaghetti. Here are some of the lessons I've learned over the last year or so of working with microservices and some thoughts about what could have been solved in a better way.&lt;/p&gt;
&lt;p&gt;The first thing to realise is that as soon as you start doing microservices, you have traded your monolithic problem for a distributed systems problem with implications for deployment, communication, monitirogin and so on. All those things should be carefully thought about. I'm not going into details about deployment this time - suffice to say that microservices should be independently deployable and runnable, ideally as a self-contained thing.&lt;/p&gt;
&lt;h3&gt;&lt;a href="#platform-versus-distributed-services" id="platform-versus-distributed-services"&gt;&lt;/a&gt;Platform versus distributed services&lt;/h3&gt;
&lt;p&gt;I recently watched a &lt;a href="https://www.youtube.com/watch?v=yk_VlKUDKMA"&gt;talk&lt;/a&gt; about microservices from GR8Conf 2015 that resonated very well with me. In the talk, two different kinds of microservice architectures are described: platforms and distributed service layers.&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/platform.png" alt="platform" /&gt;&lt;/p&gt;
&lt;p&gt;A &lt;strong&gt;platform&lt;/strong&gt; consists of vertically sliced microservices and a gateway layer responsible for orchestrating access to the services — the services themselves do not talk to each other but are instead completely self-contained. This includes having their own domain models, which can be shared with the gateway layer via e.g. a client library, a set of Protobuf message types or something else. The gateway layer is responsible for discoverability and in case of failure, should let any clients know that a particular service is not available. HATEOAS is one way of accomplishing this, the gateway providing a service map as part of its API:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;"_links"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nt"&gt;"rel"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"product.reviews"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;"href"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"/reviews{?productId}"&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nt"&gt;"rel"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"product.users"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;"href"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"/users"&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="err"&gt;...&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In a platform architecture, the functionality of various backend services is combined in order to produce a response to a client request. Another kind of microservice architecture is the &lt;strong&gt;distributed service layer&lt;/strong&gt; approach, where services are acting more or less individually in order to accomplish business goals. They may be called by a higher-layer API, by other microservices or maybe directly by clients. This is the case that can easily turn into spaghetti if you are not careful about the interactions between services.&lt;/p&gt;
&lt;h4&gt;&lt;a href="#decoupled-distributed-services" id="decoupled-distributed-services"&gt;&lt;/a&gt;Decoupled distributed services&lt;/h4&gt;
&lt;p&gt;It's useful to strive for a tree-like architecture, with higher-level services calling lower-level ones in a sort of &lt;a href="https://en.wikipedia.org/wiki/Directed_acyclic_graph"&gt;directed acyclic graph&lt;/a&gt;. Anything else will lead to high coupling between services. It's also useful to organise services into two rough camps - services that produce data and other services that consume data.&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/distributed-services.png" alt="platform" /&gt;&lt;/p&gt;
&lt;p&gt;The clients of a particular service should be responsible for understanding its API and provide data in a format that the service expects. API versioning and good documentation help here — sharing a domain model is not such a good idea, because the landscape is more dynamic with any service being able to call basically any other service in the topography.&lt;/p&gt;
&lt;p&gt;The above diagram sort of implies RPC being the method of communication between services. In my mind, RPC should however be avoided whenever possible. Communicating using queues (for services where latency is not such a big deal, such an email sending service) or with some distributed messaging scheme should be greatly preferred, because it further decouples services from each other. If you are worried about introducing further overhead in the form of a central message broker, have a look at what your platform already offers — in an AWS landscape, for example, it's possible to build a pub/sub architecture using SQS and SNS. It can be &lt;a href="https://github.com/meducation/propono"&gt;beautifully simple&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As the bane of distributed service communication, look no further than shared database schemas. This introduces extreme coupling between services and makes maintaining the database schema very hard. Avoid at all costs!&lt;/p&gt;
&lt;h3&gt;&lt;a href="#conclusion" id="conclusion"&gt;&lt;/a&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;This post was more or less a brain dump of my thoughts on how to architect a microservice-based backend. I hope it can work as food for though for anyone embarking on a similar venture. As with any fancy information system, microservices aren't a silver bullet but proper design and some forethought can enable you to reap their full benefit in terms of speed of development, testability and scalability.&lt;/p&gt;
&lt;/div&gt;&lt;div&gt;&lt;a href="/"&gt;Back&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="footer"&gt;&lt;p&gt;&amp;copy; 2015-2017 Johannes Staffans&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/html&gt;</content><author><name>Johannes Staffans</name></author><category term="devops"></category><category term="microservices"></category></entry><entry><id>urn:uuid:cdaae8c8-78a6-4e3b-9749-7333c4381482</id><title>Action leads to inspiration</title><link href="https://jstaffans.github.io/posts/2016-01-25-action-inspiration.html" type="text/html" title="Action leads to inspiration" rel="alternate"></link><published>2017-11-16T22:02:48Z</published><updated>2017-11-16T22:02:48Z</updated><content type="html" xml:base="https://jstaffans.github.io/posts/2016-01-25-action-inspiration.html">&lt;!DOCTYPE html&gt;
&lt;html&gt;&lt;head&gt;&lt;meta charset="utf-8"&gt;&lt;meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible"&gt;&lt;meta content="width=device-width, initial-scale=1, maximum-scale=1" name="viewport"&gt;&lt;meta content="Johannes Staffans" itemprop="author" name="author"&gt;&lt;title&gt;Johannes Staffans - Action leads to inspiration&lt;/title&gt;&lt;link href="https://fonts.googleapis.com/css?family=Merriweather:400,700|Open+Sans:400,700" rel="stylesheet"&gt;&lt;link href="/styles/main.css" rel="stylesheet" type="text/css"&gt;&lt;/head&gt;&lt;div&gt;&lt;div class="header"&gt;&lt;div class="header__content clearfix"&gt;&lt;div class="sm-col sm-col-8"&gt;&lt;div&gt;personal website and blog of&lt;/div&gt;&lt;h1 class="header__headline"&gt;&lt;a href="/"&gt;Johannes Staffans&lt;/a&gt;&lt;/h1&gt;&lt;/div&gt;&lt;div class="sm-col flex-column"&gt;&lt;div&gt;&lt;a href="/"&gt;posts&lt;/a&gt;&lt;span&gt; &amp;middot; &lt;/span&gt;&lt;a href="/pages/about.html"&gt;about&lt;/a&gt;&lt;/div&gt;&lt;div class="pt1"&gt;elsewhere&lt;/div&gt;&lt;div&gt;&lt;a href="https://github.com/jstaffans"&gt;github&lt;/a&gt;&lt;span&gt; &amp;middot; &lt;/span&gt;&lt;a href="https://www.linkedin.com/in/jstaffans"&gt;linkedin&lt;/a&gt;&lt;span&gt; &amp;middot; &lt;/span&gt;&lt;a href="https://twitter.com/jstaffans"&gt;@jstaffans&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="clearfix"&gt;&lt;svg class="left border-triangle" version="1.1" xmlns="http://www.w3.org/2000/svg"&gt;&lt;polygon class="mask" points="0,0 30,0 30,30 0,30"&gt;&lt;/polygon&gt;&lt;polygon points="0,15 30,0 30,30"&gt;&lt;/polygon&gt;&lt;/svg&gt;&lt;svg class="right border-triangle" version="1.1" xmlns="http://www.w3.org/2000/svg"&gt;&lt;polygon class="mask" points="0,0 30,0 30,30 0,30"&gt;&lt;/polygon&gt;&lt;polygon points="30,15 0,30 0,0"&gt;&lt;/polygon&gt;&lt;/svg&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="container"&gt;&lt;div&gt;&lt;div class="flex items-baseline justify-between"&gt;&lt;h2&gt;Action leads to inspiration&lt;/h2&gt;&lt;div&gt;&lt;span&gt;25.01.2016&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;p&gt;Last weekend, a &lt;a href="http://www.clojurebridge.org/"&gt;ClojureBridge&lt;/a&gt; event &lt;a href="http://clojurebridge-berlin.github.io/"&gt;took place in Berlin&lt;/a&gt;. I was one of the coaches and had a wonderful time exploring Clojure with a group of new-comers to the language. In addition to coding, some lightning talks touching upon different aspects of software development in general and Clojure in particular were held. One of the presentations was by me, in which I talked about some of the hurdles that novice programmers might face and gave some tips on how to overcome them. This is that talk in blog form.&lt;/p&gt;
&lt;h3&gt;&lt;a href="#what-does-programming-boil-down-to" id="what-does-programming-boil-down-to"&gt;&lt;/a&gt;What does programming boil down to?&lt;/h3&gt;
&lt;p&gt;I'll take the premise that programming isn't something that is very hard to learn. It's not rocket science (unless your code is not running a website but an actual rocket!) or neurosurgery. Programmers regularily deal with simple math, basic logic and the syntax of programming languages - how you call functions, how data structures like vectors or hash maps are represented and so on. Once you start developing more complex applications, there are of course more things to learn, such as how the Internet works, the mechanics of different libraries and how to organize code in larger projects. But you actually don't need that much to get started solving smaller problems.&lt;/p&gt;
&lt;h3&gt;&lt;a href="#so-whats-the-problem" id="so-whats-the-problem"&gt;&lt;/a&gt;So what's the problem?&lt;/h3&gt;
&lt;p&gt;Despite the relatively simple nature of programming, it seems there is a general perception of software development as being something that's hard to pick up. Many people who start to learn to code seem to become discouraged at an early stage and don't continue learning. Why is that?&lt;/p&gt;
&lt;p&gt;I think the issues beginners face when coding can generally be split into two categories:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Not knowing how to begin.&lt;/li&gt;
&lt;li&gt;Getting stuck along the way and becoming discouraged.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href="#not-knowing-where-to-start" id="not-knowing-where-to-start"&gt;&lt;/a&gt;Not knowing where to start&lt;/h3&gt;
&lt;p&gt;The step from thinking "I'm going to code a program that does X" to actually having running code can be intimidating if you are not familiar with programming. What editor should I be using? What framework can help me solve my problem? How on earth should I code so that the solution is elegant, I heard that writing spaghetti code is really bad?&lt;/p&gt;
&lt;p&gt;There's a quote by &lt;a href="https://en.wikipedia.org/wiki/Arthur_Ashe"&gt;Arthur Ashe&lt;/a&gt;, winner of three Grand Slams in tennis and recipient of the Presidential Medal of Freedom, that goes:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Start where you are. Use what you have. Do what you can.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;My take on this is that you should begin your solution using what knowledge you already have. If you have only ever coded a Java program with a "Hello World!" string printed from a &lt;code&gt;main()&lt;/code&gt; method, a Java program with a &lt;code&gt;main()&lt;/code&gt; method is probably a good place to start. I'd interpret "do what you can" as trying to first solve the parts of the problem that you understand, such as printing out text or getting user input from the command prompt.&lt;/p&gt;
&lt;p&gt;Your favourite search engine is also your friend when taking the first steps to implement a new program. You can start by typing in code from examples of similar applications, from tutorials or from screencasts.&lt;/p&gt;
&lt;p&gt;Iterating in small steps is key - a common beginner mistake is to try to solve the whole problem at once. Always try to find the smallest thing you can solve first. If your problem involves working with a collection of values, first implement a solution that handles a single value. Work your way from the small to the large. There are some good books out there that can help you to learn this divide-and-conquer approach, such as &lt;a href="http://www.goodreads.com/book/show/154154.Programming_Interviews_Exposed"&gt;"Programming Interviews Exposed"&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Beware of &lt;a href="https://en.wikipedia.org/wiki/Law_of_triviality"&gt;bikeshedding&lt;/a&gt; (a term that gets thrown around a lot among software developers and basically means wasting time on irrelevant details). At the end of the day, what your program &lt;em&gt;does&lt;/em&gt; is what matters, not which framework you use, which editor or which programming language.&lt;/p&gt;
&lt;p&gt;Another favourite quote of mine, which I unfortunately don't know who to attribute to, is:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Action leads to inspiration.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A common misconception is that a programmer should know exactly what they're doing before starting to code. The solution should just appear before the mental eye in a puff of magical smoke and the actual coding is just the mechanical task of writing the program in an editor. In reality, I think it is often the other way around - we start coding first, without having much of an idea what we're doing. As we proceed, we see patterns, have new ideas on what we could go back and change in order to make it better and thoughts on what we should concentrate on next. In short, taking the action of starting to code leads to inspiration about how to solve the problem at hand - not the other way around.&lt;/p&gt;
&lt;p&gt;A programmer will often find that the inspiration that comes from coding will take the solution in wholly new directions that could never have been anticipated when starting out. Often this can mean throwing out heaps of existing code and starting afresh, which I see as a good thing - the first attempts at a solution are usually just about gaining a deeper understanding of the problem. Don't become too attached to your code, a lot of times throwing it out is just the right thing to do.&lt;/p&gt;
&lt;h3&gt;&lt;a href="#getting-stuck" id="getting-stuck"&gt;&lt;/a&gt;Getting stuck&lt;/h3&gt;
&lt;p&gt;Getting stuck and not knowing how to proceed with a particular programming problem is maybe the biggest source of discouragment for new coders. It is unfortunately something one has to become used to, as this is something that happens very often, even to experienced programmers.&lt;/p&gt;
&lt;p&gt;The scary thing about getting stuck coding is that it can feel very personal and intimidating. In other occupations, one might get stuck because a tool breaks, or a shipment of goods is late, or something else that is out of our control. In software development, it's easy to think, "I should really know how to solve this problem!", or something along those lines. Programming is after all primarily a mental excercise.&lt;/p&gt;
&lt;p&gt;Once down the rabbit hole of feeling inadequate, it's difficult to get out. The primitive and irrational part of the mind, the limbic system that produces emotions like fear and anger and triggers fight-or-flight responses, is in full control and does not give the slow, logical prefrontal cortex a chance to solve the problem. Daniel Kahneman's excellent book &lt;a href="http://www.goodreads.com/book/show/11468377-thinking-fast-and-slow"&gt;"Thinking, Fast and Slow"&lt;/a&gt; explains this mental process, modeled as two systems that drive the way we think, in fascinating detail.&lt;/p&gt;
&lt;p&gt;To get un-stuck with a difficult problem, you need to give your brain time to process the information. You can for example go out for a walk, watch a movie or go dancing - anything! For me, solutions to problems I've faced during the day often come to me just before I go to sleep. Having a notebook by the bed may be useful if that's the case for you, too.&lt;/p&gt;
&lt;p&gt;Novice programmers can often feel intimidated by more experienced developers, as these seem to blaze out code without much effort, taking every problem in stride. You should know, however, that a programmer like that has probably seen similar problems hundreds of times already and has developed a repertoire of patterns around them. Recognizing patterns and having a gut feeling about how to approach them, what data structures to use and which algorithms are a good fit is something that comes with experience. Once you start building your own repertoire, you'll start seeing patterns too and know instinctively what solutions to apply.&lt;/p&gt;
&lt;h3&gt;&lt;a href="#conclusion" id="conclusion"&gt;&lt;/a&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;Software development is fun and rewarding, but can also be frustrating, particularily for inexperienced programmers who don't know how to start approaching a problem. Getting stuck can be intimidating but is something that I think new programmers need to become friendly with. I hope this post can give some ideas on what actions to take to get that inspiration flowing!&lt;/p&gt;
&lt;p&gt;Thanks again to the organizers of ClojureBridge Berlin!&lt;/p&gt;
&lt;/div&gt;&lt;div&gt;&lt;a href="/"&gt;Back&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="footer"&gt;&lt;p&gt;&amp;copy; 2015-2017 Johannes Staffans&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/html&gt;</content><author><name>Johannes Staffans</name></author><category term="software development"></category><category term="getting started"></category><category term="advice"></category><category term="clojurebridge"></category><category term="clojure"></category></entry><entry><id>urn:uuid:74f22045-a456-43fd-b638-734c3dd30d6d</id><title>Event stream processing: backfills</title><link href="https://jstaffans.github.io/posts/2016-11-05-backfills.html" type="text/html" title="Event stream processing: backfills" rel="alternate"></link><published>2017-11-16T22:02:48Z</published><updated>2017-11-16T22:02:48Z</updated><content type="html" xml:base="https://jstaffans.github.io/posts/2016-11-05-backfills.html">&lt;!DOCTYPE html&gt;
&lt;html&gt;&lt;head&gt;&lt;meta charset="utf-8"&gt;&lt;meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible"&gt;&lt;meta content="width=device-width, initial-scale=1, maximum-scale=1" name="viewport"&gt;&lt;meta content="Johannes Staffans" itemprop="author" name="author"&gt;&lt;title&gt;Johannes Staffans - Event stream processing: backfills&lt;/title&gt;&lt;link href="https://fonts.googleapis.com/css?family=Merriweather:400,700|Open+Sans:400,700" rel="stylesheet"&gt;&lt;link href="/styles/main.css" rel="stylesheet" type="text/css"&gt;&lt;/head&gt;&lt;div&gt;&lt;div class="header"&gt;&lt;div class="header__content clearfix"&gt;&lt;div class="sm-col sm-col-8"&gt;&lt;div&gt;personal website and blog of&lt;/div&gt;&lt;h1 class="header__headline"&gt;&lt;a href="/"&gt;Johannes Staffans&lt;/a&gt;&lt;/h1&gt;&lt;/div&gt;&lt;div class="sm-col flex-column"&gt;&lt;div&gt;&lt;a href="/"&gt;posts&lt;/a&gt;&lt;span&gt; &amp;middot; &lt;/span&gt;&lt;a href="/pages/about.html"&gt;about&lt;/a&gt;&lt;/div&gt;&lt;div class="pt1"&gt;elsewhere&lt;/div&gt;&lt;div&gt;&lt;a href="https://github.com/jstaffans"&gt;github&lt;/a&gt;&lt;span&gt; &amp;middot; &lt;/span&gt;&lt;a href="https://www.linkedin.com/in/jstaffans"&gt;linkedin&lt;/a&gt;&lt;span&gt; &amp;middot; &lt;/span&gt;&lt;a href="https://twitter.com/jstaffans"&gt;@jstaffans&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="clearfix"&gt;&lt;svg class="left border-triangle" version="1.1" xmlns="http://www.w3.org/2000/svg"&gt;&lt;polygon class="mask" points="0,0 30,0 30,30 0,30"&gt;&lt;/polygon&gt;&lt;polygon points="0,15 30,0 30,30"&gt;&lt;/polygon&gt;&lt;/svg&gt;&lt;svg class="right border-triangle" version="1.1" xmlns="http://www.w3.org/2000/svg"&gt;&lt;polygon class="mask" points="0,0 30,0 30,30 0,30"&gt;&lt;/polygon&gt;&lt;polygon points="30,15 0,30 0,0"&gt;&lt;/polygon&gt;&lt;/svg&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="container"&gt;&lt;div&gt;&lt;div class="flex items-baseline justify-between"&gt;&lt;h2&gt;Event stream processing: backfills&lt;/h2&gt;&lt;div&gt;&lt;span&gt;05.11.2016&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;p&gt;During the last months I have been involved in developing an event processing pipeline based on Amazon Kinesis. This post is about different strategies for replaying or &lt;strong&gt;backfilling&lt;/strong&gt; events, to make up for lost events or a buggy stream worker implementation.&lt;/p&gt;
&lt;h3&gt;&lt;a href="#what-are-backfills" id="what-are-backfills"&gt;&lt;/a&gt;What are backfills?&lt;/h3&gt;
&lt;p&gt;The architecture of a Kinesis-based event pipeline is pretty simple. Events are sent to Kinesis from various clients and later processed by several worker components performing various tasks — in my case, backups, machine learning and persisting events to Redshift. A nice thing about Kinesis is that events are available for 24 hours after being sent, which means that when a worker crashes, it can be re-started and no events will be lost, as long as the downtime wasn't longer than the Kinesis 24 hour horizon. The worker will simply pick up the stream where it left off — a nice feature of the Amazon Kinesis Client Library!&lt;/p&gt;
&lt;p&gt;But of course, due to various reasons, it might happen that a worker is offline for more than 24 hours. Or you may notice a bug in the implementation of a worker which means that the results it has painstakingly refined from the event stream are wrong and need to be re-calculated.&lt;/p&gt;
&lt;p&gt;If we take the case of a buggy worker implementation, after the problem has been fixed, the worker now needs to be let loose on all old events and perform a re-calculation. The source of the old events are your event backups — Amazon provides a nice way to dump events from Kinesis to S3 via Kinesis Firehose, which is what we are using for backing up all Kinesis events, but there are other backup possibilities as well.&lt;/p&gt;
&lt;h3&gt;&lt;a href="#batch-or-online" id="batch-or-online"&gt;&lt;/a&gt;Batch or online?&lt;/h3&gt;
&lt;p&gt;Conceptually, there are two basic strategies of providing input to the worker that will perform the re-calculation: either as one big batch of events (maybe reading straight from the S3 backups),  or by backfilling the events through the event pipeline itself, which I'll call &lt;strong&gt;online&lt;/strong&gt; backfilling.&lt;/p&gt;
&lt;p&gt;I think the batch update approach has a lot going for it. It is simpler and involves less components. One drawback is however that the worker component needs to be set up with two distinct code paths: one on  which events are read from Kinesis and one where events are read from a file dump, e.g. in S3. I tend to be in favor of having less code paths in my code. If you instead set up your worker to be prepared for receiving backfilled events online, you can use the same infrastructure and code paths for the backfills as during normal operation.&lt;/p&gt;
&lt;h3&gt;&lt;a href="#distinguishing-backfilled-events" id="distinguishing-backfilled-events"&gt;&lt;/a&gt;Distinguishing backfilled events&lt;/h3&gt;
&lt;p&gt;Going with the online approach, we need a way of isolating the backfilled events, so that they aren't mistakenly re-read by other components in our event processing architecture. We only want to target a single worker component, namely the one that had a bug, for the backfill.&lt;/p&gt;
&lt;p&gt;We could imagine tagging indivdual events with some kind of metadata to let other components know that they should ignore it, because it is a backfill event that should only be processed by one particular worker. But it seems redundant to implement this filtering in each and every component. Why should every component need to care about a backfill being performed?&lt;/p&gt;
&lt;p&gt;I think the simplest approach is to set up a completely separate Kinesis stream just for the purpose of the backfill, which amounts to a couple of clicks in the AWS console. Ideally, the name of the Kinesis stream that the worker component reads events from is configured as an environment variable or similar — if that's the case, the worker can simply be re-started with an updated piece of configuration that causes it to read events from the backfill stream instead. When the backfill is done, just switch back over to the main stream. No events are lost, as long as you didn't spend more than 24 hours backfilling and not listening to the main stream!&lt;/p&gt;
&lt;h3&gt;&lt;a href="#other-considerations" id="other-considerations"&gt;&lt;/a&gt;Other considerations&lt;/h3&gt;
&lt;p&gt;In the online backfilling scenario, there needs to be something that writes the events to the backfill Kinesis stream. I ended up writing around 20 lines of Python that gets the event backup archives from S3 for a given date range and sends them off to Kinesis in batches of a few hundred events each. Care needs to be taken not to exceed Kinesis write limits!&lt;/p&gt;
&lt;h3&gt;&lt;a href="#conclusion" id="conclusion"&gt;&lt;/a&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;It's important to have a strategy in mind for backfilling events in a stream processing pipeline. The day will inevitabely come when a bug or extended downtime makes it necessary to replay events. Making it easy to switch components over from the main stream to a separate backfill stream enables replays with the least amount of extra code.&lt;/p&gt;
&lt;/div&gt;&lt;div&gt;&lt;a href="/"&gt;Back&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="footer"&gt;&lt;p&gt;&amp;copy; 2015-2017 Johannes Staffans&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/html&gt;</content><author><name>Johannes Staffans</name></author><category term="streams"></category><category term="stream processing"></category><category term="kinesis"></category><category term="events"></category></entry><entry><id>urn:uuid:94ce595a-3378-47b0-bb76-91991db0d618</id><title>freq-words: learn to read with ClojureScript</title><link href="https://jstaffans.github.io/posts/2015-05-25-freq-words.html" type="text/html" title="freq-words: learn to read with ClojureScript" rel="alternate"></link><published>2017-11-16T22:02:48Z</published><updated>2017-11-16T22:02:48Z</updated><content type="html" xml:base="https://jstaffans.github.io/posts/2015-05-25-freq-words.html">&lt;!DOCTYPE html&gt;
&lt;html&gt;&lt;head&gt;&lt;meta charset="utf-8"&gt;&lt;meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible"&gt;&lt;meta content="width=device-width, initial-scale=1, maximum-scale=1" name="viewport"&gt;&lt;meta content="Johannes Staffans" itemprop="author" name="author"&gt;&lt;title&gt;Johannes Staffans - freq-words: learn to read with ClojureScript&lt;/title&gt;&lt;link href="https://fonts.googleapis.com/css?family=Merriweather:400,700|Open+Sans:400,700" rel="stylesheet"&gt;&lt;link href="/styles/main.css" rel="stylesheet" type="text/css"&gt;&lt;/head&gt;&lt;div&gt;&lt;div class="header"&gt;&lt;div class="header__content clearfix"&gt;&lt;div class="sm-col sm-col-8"&gt;&lt;div&gt;personal website and blog of&lt;/div&gt;&lt;h1 class="header__headline"&gt;&lt;a href="/"&gt;Johannes Staffans&lt;/a&gt;&lt;/h1&gt;&lt;/div&gt;&lt;div class="sm-col flex-column"&gt;&lt;div&gt;&lt;a href="/"&gt;posts&lt;/a&gt;&lt;span&gt; &amp;middot; &lt;/span&gt;&lt;a href="/pages/about.html"&gt;about&lt;/a&gt;&lt;/div&gt;&lt;div class="pt1"&gt;elsewhere&lt;/div&gt;&lt;div&gt;&lt;a href="https://github.com/jstaffans"&gt;github&lt;/a&gt;&lt;span&gt; &amp;middot; &lt;/span&gt;&lt;a href="https://www.linkedin.com/in/jstaffans"&gt;linkedin&lt;/a&gt;&lt;span&gt; &amp;middot; &lt;/span&gt;&lt;a href="https://twitter.com/jstaffans"&gt;@jstaffans&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="clearfix"&gt;&lt;svg class="left border-triangle" version="1.1" xmlns="http://www.w3.org/2000/svg"&gt;&lt;polygon class="mask" points="0,0 30,0 30,30 0,30"&gt;&lt;/polygon&gt;&lt;polygon points="0,15 30,0 30,30"&gt;&lt;/polygon&gt;&lt;/svg&gt;&lt;svg class="right border-triangle" version="1.1" xmlns="http://www.w3.org/2000/svg"&gt;&lt;polygon class="mask" points="0,0 30,0 30,30 0,30"&gt;&lt;/polygon&gt;&lt;polygon points="30,15 0,30 0,0"&gt;&lt;/polygon&gt;&lt;/svg&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="container"&gt;&lt;div&gt;&lt;div class="flex items-baseline justify-between"&gt;&lt;h2&gt;freq-words: learn to read with ClojureScript&lt;/h2&gt;&lt;div&gt;&lt;span&gt;25.05.2015&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;p&gt;My father, a retired elementary school teacher, runs a &lt;a href="http://www.kjellstaffans.fi"&gt;website&lt;/a&gt; offering material for young children who are just starting to learn how to read and write in Swedish. A big portion of the material is geared towards children who experience difficulties learning the basics of reading and writing and one of the teaching aids is an &lt;a href="http://www.kjellstaffans.fi/wp-content/uploads/frekord.html"&gt;old Flash application&lt;/a&gt; I wrote almost a decade ago; children can use the application to practice reading some of the most common words in the Swedish language.&lt;/p&gt;
&lt;p&gt;I think it's time to give the application a make-over by way of modernising the UI and providing some frequently-asked-for features such as a timer and the possibility of saving high scores. I'll take the opportunity to learn some more about web application development using ClojureScript. This article is the first in a series describing my successes and failures developing the application.&lt;/p&gt;
&lt;p&gt;I use React.js a lot a work, so I'm interested in trying out one of its ClojureScript wrappers. I decided to pick Reagent because its state management facilities seem simpler than Om's. While I'm at it I'll try out &lt;a href="http://boot-clj.com"&gt;Boot&lt;/a&gt; as well. Martin Klepsch, a friend from the Berlin Clojure meetup group, handily provides a &lt;a href="https://github.com/martinklepsch/tenzing"&gt;batteries-included template for ClojureScript development with Boot&lt;/a&gt;. Thanks Martin!&lt;/p&gt;
&lt;p&gt;I'll use Cursive Clojure as my development environment and base my styles on Twitter Bootstrap. Sass is a must-have in my book so I'll try to integrate that as well.&lt;/p&gt;
&lt;p&gt;With the basic dependencies sorted out it's time to get started!&lt;/p&gt;
&lt;h3&gt;&lt;a href="#setting-up-the-project" id="setting-up-the-project"&gt;&lt;/a&gt;Setting up the project&lt;/h3&gt;
&lt;p&gt;Setting up a new Boot+ClojureScript project is easy with Tenzing:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight"&gt;&lt;span&gt;&lt;/span&gt;$&amp;gt; lein new tenzing freq-words +reagent
$&amp;gt; &lt;span class="nb"&gt;cd&lt;/span&gt; freq-words
$&amp;gt; boot dev
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pointing a browser to &lt;code&gt;localhost:3000&lt;/code&gt; now gives us a view of the basic default application.&lt;/p&gt;
&lt;p&gt;As I said earlier, I use Cursive (the Clojure/ClojureScript plugin for IntelliJ IDEA) as my development environment, which unfortunately does not integrate directly with Boot for the goodies like auto-completion and inline documentation that I'm used to. In order to get those working, I add a dummy &lt;code&gt;project.clj&lt;/code&gt; file that Cursive can pick up, containing the application dependencies from &lt;code&gt;build.boot&lt;/code&gt; file (I won't add any Boot-specific dependencies since I won't be changing the &lt;code&gt;build.boot&lt;/code&gt; file that much):&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defproject &lt;/span&gt;&lt;span class="nv"&gt;freq-words&lt;/span&gt; &lt;span class="s"&gt;"0.1.0-SNAPSHOT"&lt;/span&gt;
  &lt;span class="ss"&gt;:description&lt;/span&gt; &lt;span class="s"&gt;"freq-words - project file for Cursive Clojure"&lt;/span&gt;
  &lt;span class="ss"&gt;:license&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:name&lt;/span&gt; &lt;span class="s"&gt;"Eclipse Public License"&lt;/span&gt;
            &lt;span class="ss"&gt;:url&lt;/span&gt; &lt;span class="s"&gt;"http://www.eclipse.org/legal/epl-v10.html"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="ss"&gt;:dependencies&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="nv"&gt;reagent&lt;/span&gt; &lt;span class="s"&gt;"0.5.0"&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Cursive can now pick up the project's dependencies. I'll just have to remember to update both files if I add any third-party libraries.&lt;/p&gt;
&lt;h4&gt;&lt;a href="#my-first-boot-task-compiling-sass-files" id="my-first-boot-task-compiling-sass-files"&gt;&lt;/a&gt;My first Boot task: compiling Sass files&lt;/h4&gt;
&lt;p&gt;I will base my layout on a free theme from Bootswatch, but will also most likely add some styles of my own. I think CSS gets tedious really fast so I prefer to use a higher-level language like Sass. Having downloaded the base theme as &lt;code&gt;src/scss/_bootstrap.scss&lt;/code&gt;, I will add an &lt;code&gt;src/scss/main.scss&lt;/code&gt; file as well where I include the base theme and can add any custom styles:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s2"&gt;bootstrap'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// a little custom style&lt;/span&gt;
&lt;span class="nc"&gt;.my-form&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;background&lt;/span&gt;&lt;span class="nd"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;blue&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The challenge now is to add Sass compilation to the Boot build chain. A custom task does the trick (based on a conversation on the &lt;a href="http://hoplon.discoursehosting.net/t/trying-to-create-a-boot-task-to-compile-sass-files/386"&gt;Hoplon mailing list&lt;/a&gt;):&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;deftask&lt;/span&gt; &lt;span class="nv"&gt;sass&lt;/span&gt;
  &lt;span class="p"&gt;[]&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;tmp&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;core/tmp-dir!&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;core/with-pre-wrap&lt;/span&gt; &lt;span class="nv"&gt;fs&lt;/span&gt; 
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;in-files&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;core/input-files&lt;/span&gt; &lt;span class="nv"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="nv"&gt;in-main&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;first &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;core/by-re&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="s"&gt;"^(?!_).*\.scss"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="nv"&gt;in-files&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="nv"&gt;out-dir&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;io/file&lt;/span&gt; &lt;span class="nv"&gt;tmp&lt;/span&gt; &lt;span class="s"&gt;"stylesheets"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="nv"&gt;out&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;io/file&lt;/span&gt; &lt;span class="nv"&gt;out-dir&lt;/span&gt; &lt;span class="s"&gt;"main.css"&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;.mkdirs&lt;/span&gt; &lt;span class="nv"&gt;out-dir&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;util/dosh&lt;/span&gt; &lt;span class="s"&gt;"sassc"&lt;/span&gt;
          &lt;span class="s"&gt;"--style"&lt;/span&gt; &lt;span class="s"&gt;"compressed"&lt;/span&gt;
          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;.getPath&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;core/tmp-file&lt;/span&gt; &lt;span class="nv"&gt;in-main&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;.getPath&lt;/span&gt; &lt;span class="nv"&gt;out&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;-&amp;gt; &lt;/span&gt;&lt;span class="nv"&gt;fs&lt;/span&gt;
          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;core/add-resource&lt;/span&gt; &lt;span class="nv"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;core/commit!&lt;/span&gt;&lt;span class="p"&gt;))))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This task only considers one file (the first &lt;code&gt;.scss&lt;/code&gt; files that does not start with an underscore). When using Sass, files whose name start with an underscore are files that are included in another stylesheet (&lt;code&gt;src/scss/main.scss&lt;/code&gt; handles all the includes in my case), so we do not need to consider them separately.&lt;/p&gt;
&lt;p&gt;To make the task find the Sass sources, we need to add the relevant directory to the &lt;code&gt;:source-paths&lt;/code&gt; key in the Boot environment:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;; This is one of the first lines in the build.boot file&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;set-env!&lt;/span&gt; &lt;span class="ss"&gt;:source-paths&lt;/span&gt; &lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"src/cljs"&lt;/span&gt; &lt;span class="s"&gt;"src/scss"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nv"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And to integrate our task into the Boot build chain, we'll add it to the pre-defined &lt;code&gt;build&lt;/code&gt; task that is part of the Tenzing template:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;deftask&lt;/span&gt; &lt;span class="nv"&gt;build&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;comp &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;speak&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;sass&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;cljs&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Boot being awesome, we get things like file change watching for the Sass files automatically.&lt;/p&gt;
&lt;p&gt;We can verify that everything works, both for development and production use:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight"&gt;&lt;span&gt;&lt;/span&gt;§&amp;gt; boot dev  
&lt;span class="c1"&gt;# Development site running on http://localhost:3000&lt;/span&gt;
§&amp;gt; boot build
$&amp;gt; &lt;span class="nb"&gt;cd&lt;/span&gt; target &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; python -m SimpleHTTPServer
&lt;span class="c1"&gt;# Production site running on http://localhost:8000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a href="#wrap-up" id="wrap-up"&gt;&lt;/a&gt;Wrap-up&lt;/h3&gt;
&lt;p&gt;We now have a pretty nice setup to start working on the application itself. Sources are &lt;a href="https://github.com/jstaffans/freq-words"&gt;available on Github&lt;/a&gt;. Stay tuned for the next installment in the series!&lt;/p&gt;
&lt;/div&gt;&lt;div&gt;&lt;a href="/"&gt;Back&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="footer"&gt;&lt;p&gt;&amp;copy; 2015-2017 Johannes Staffans&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/html&gt;</content><author><name>Johannes Staffans</name></author><category term="clojurescript"></category><category term="reagent"></category><category term="boot"></category></entry><entry><id>urn:uuid:21baeb20-e717-47ea-9309-9f7c15e42618</id><title>A whiff of data science in Clojure</title><link href="https://jstaffans.github.io/posts/2017-11-14-clojure-data-science.html" type="text/html" title="A whiff of data science in Clojure" rel="alternate"></link><published>2017-11-16T22:02:48Z</published><updated>2017-11-16T22:02:48Z</updated><content type="html" xml:base="https://jstaffans.github.io/posts/2017-11-14-clojure-data-science.html">&lt;!DOCTYPE html&gt;
&lt;html&gt;&lt;head&gt;&lt;meta charset="utf-8"&gt;&lt;meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible"&gt;&lt;meta content="width=device-width, initial-scale=1, maximum-scale=1" name="viewport"&gt;&lt;meta content="Johannes Staffans" itemprop="author" name="author"&gt;&lt;title&gt;Johannes Staffans - A whiff of data science in Clojure&lt;/title&gt;&lt;link href="https://fonts.googleapis.com/css?family=Merriweather:400,700|Open+Sans:400,700" rel="stylesheet"&gt;&lt;link href="/styles/main.css" rel="stylesheet" type="text/css"&gt;&lt;/head&gt;&lt;div&gt;&lt;div class="header"&gt;&lt;div class="header__content clearfix"&gt;&lt;div class="sm-col sm-col-8"&gt;&lt;div&gt;personal website and blog of&lt;/div&gt;&lt;h1 class="header__headline"&gt;&lt;a href="/"&gt;Johannes Staffans&lt;/a&gt;&lt;/h1&gt;&lt;/div&gt;&lt;div class="sm-col flex-column"&gt;&lt;div&gt;&lt;a href="/"&gt;posts&lt;/a&gt;&lt;span&gt; &amp;middot; &lt;/span&gt;&lt;a href="/pages/about.html"&gt;about&lt;/a&gt;&lt;/div&gt;&lt;div class="pt1"&gt;elsewhere&lt;/div&gt;&lt;div&gt;&lt;a href="https://github.com/jstaffans"&gt;github&lt;/a&gt;&lt;span&gt; &amp;middot; &lt;/span&gt;&lt;a href="https://www.linkedin.com/in/jstaffans"&gt;linkedin&lt;/a&gt;&lt;span&gt; &amp;middot; &lt;/span&gt;&lt;a href="https://twitter.com/jstaffans"&gt;@jstaffans&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="clearfix"&gt;&lt;svg class="left border-triangle" version="1.1" xmlns="http://www.w3.org/2000/svg"&gt;&lt;polygon class="mask" points="0,0 30,0 30,30 0,30"&gt;&lt;/polygon&gt;&lt;polygon points="0,15 30,0 30,30"&gt;&lt;/polygon&gt;&lt;/svg&gt;&lt;svg class="right border-triangle" version="1.1" xmlns="http://www.w3.org/2000/svg"&gt;&lt;polygon class="mask" points="0,0 30,0 30,30 0,30"&gt;&lt;/polygon&gt;&lt;polygon points="30,15 0,30 0,0"&gt;&lt;/polygon&gt;&lt;/svg&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="container"&gt;&lt;div&gt;&lt;div class="flex items-baseline justify-between"&gt;&lt;h2&gt;A whiff of data science in Clojure&lt;/h2&gt;&lt;div&gt;&lt;span&gt;14.11.2017&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;p&gt;As part of learning more about applied statistics, I decided to trawl around the &lt;a href="http://www.hri.fi/en/"&gt;Helsinki Region Infoshare&lt;/a&gt; open data portal for interesting data sets to analyse. I also took the opportunity to familiarise myself with &lt;a href="gorilla-repl.org"&gt;Gorilla REPL&lt;/a&gt;, a  Clojure take on notebook-style programming made popular for data science by IPython notebooks.&lt;/p&gt;
&lt;p&gt;The data set I picked is a customer satisfaction survey for a youth services bureau. Feedback is collected via a terminal with four buttons, ranging from a sad smiley to a happy one. The question asked is "how happy are with the services of the youth services bureau today"? The question &lt;strong&gt;I&lt;/strong&gt; ask is whether customer happiness depends on the time of the day.&lt;/p&gt;
&lt;p&gt;Gorilla REPL comes with a handy online viewer (although it'd be even handier if Github would support Gorilla REPL notebooks natively, as it does IPython and Jupyter notebooks). You can check out the rest of the story and the results of my analysis &lt;a href="http://viewer.gorilla-repl.org/view.html?source=github&amp;amp;user=jstaffans&amp;amp;repo=happy-or-not&amp;amp;path=src/happy_or_not/repl.clj"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;div&gt;&lt;a href="/"&gt;Back&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="footer"&gt;&lt;p&gt;&amp;copy; 2015-2017 Johannes Staffans&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/html&gt;</content><author><name>Johannes Staffans</name></author><category term="data"></category><category term="science"></category><category term="clojure"></category><category term="gorilla"></category><category term="repl"></category></entry><entry><id>urn:uuid:3fbed48d-2bd8-4fb8-8470-73d658ea2b22</id><title>Learn to read with ClojureScript, part 2</title><link href="https://jstaffans.github.io/posts/2016-03-06-freq-words-2.html" type="text/html" title="Learn to read with ClojureScript, part 2" rel="alternate"></link><published>2017-11-16T22:02:48Z</published><updated>2017-11-16T22:02:48Z</updated><content type="html" xml:base="https://jstaffans.github.io/posts/2016-03-06-freq-words-2.html">&lt;!DOCTYPE html&gt;
&lt;html&gt;&lt;head&gt;&lt;meta charset="utf-8"&gt;&lt;meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible"&gt;&lt;meta content="width=device-width, initial-scale=1, maximum-scale=1" name="viewport"&gt;&lt;meta content="Johannes Staffans" itemprop="author" name="author"&gt;&lt;title&gt;Johannes Staffans - Learn to read with ClojureScript, part 2&lt;/title&gt;&lt;link href="https://fonts.googleapis.com/css?family=Merriweather:400,700|Open+Sans:400,700" rel="stylesheet"&gt;&lt;link href="/styles/main.css" rel="stylesheet" type="text/css"&gt;&lt;/head&gt;&lt;div&gt;&lt;div class="header"&gt;&lt;div class="header__content clearfix"&gt;&lt;div class="sm-col sm-col-8"&gt;&lt;div&gt;personal website and blog of&lt;/div&gt;&lt;h1 class="header__headline"&gt;&lt;a href="/"&gt;Johannes Staffans&lt;/a&gt;&lt;/h1&gt;&lt;/div&gt;&lt;div class="sm-col flex-column"&gt;&lt;div&gt;&lt;a href="/"&gt;posts&lt;/a&gt;&lt;span&gt; &amp;middot; &lt;/span&gt;&lt;a href="/pages/about.html"&gt;about&lt;/a&gt;&lt;/div&gt;&lt;div class="pt1"&gt;elsewhere&lt;/div&gt;&lt;div&gt;&lt;a href="https://github.com/jstaffans"&gt;github&lt;/a&gt;&lt;span&gt; &amp;middot; &lt;/span&gt;&lt;a href="https://www.linkedin.com/in/jstaffans"&gt;linkedin&lt;/a&gt;&lt;span&gt; &amp;middot; &lt;/span&gt;&lt;a href="https://twitter.com/jstaffans"&gt;@jstaffans&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="clearfix"&gt;&lt;svg class="left border-triangle" version="1.1" xmlns="http://www.w3.org/2000/svg"&gt;&lt;polygon class="mask" points="0,0 30,0 30,30 0,30"&gt;&lt;/polygon&gt;&lt;polygon points="0,15 30,0 30,30"&gt;&lt;/polygon&gt;&lt;/svg&gt;&lt;svg class="right border-triangle" version="1.1" xmlns="http://www.w3.org/2000/svg"&gt;&lt;polygon class="mask" points="0,0 30,0 30,30 0,30"&gt;&lt;/polygon&gt;&lt;polygon points="30,15 0,30 0,0"&gt;&lt;/polygon&gt;&lt;/svg&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="container"&gt;&lt;div&gt;&lt;div class="flex items-baseline justify-between"&gt;&lt;h2&gt;Learn to read with ClojureScript, part 2&lt;/h2&gt;&lt;div&gt;&lt;span&gt;06.03.2016&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;p&gt;Almost a year ago, I &lt;a href="http://jstaffans.github.io/2015/05/25/freq-words.html"&gt;wrote about implementing a learning aid for children in elementary school using ClojureScript&lt;/a&gt;. I finally got around to finishing this project now and decided to write a few words about the experience.&lt;/p&gt;
&lt;p&gt;For the first iteration, I had decided to use Boot, mostly due to the simpler integration of things like SASS compilation into the development workflow. I didn't get very far with the first version of the application until it got put on the back burner, but a few weeks ago, I decided I should really finish the project and save all those children from having to look at my Flash application from 2007.&lt;/p&gt;
&lt;p&gt;The project was still on a year-old version of ClojureScript (ancient in ClojureScript terms!) and an old version of Boot. When I tried to fire the app up, nothing worked!&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;clojure.lang.Compiler$CompilerException: java.lang.RuntimeException:
  No such var: cljs.repl/IParseError, compiling:(cemerick/piggieback.clj:89:1)
  java.lang.RuntimeException: No such var: cljs.repl/IParseError
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I tried looking over some more recent Boot/Reagent examples to learn what I should be doing, but couldn't really figure anything out. Giving up, I started a new project from scratch using Leiningen and Figwheel, using the &lt;a href="https://github.com/gadfly361/reagent-figwheel"&gt;reagent-figwheel template&lt;/a&gt;. Oh the joy of greenfields development!&lt;/p&gt;
&lt;h3&gt;&lt;a href="#re-frame" id="re-frame"&gt;&lt;/a&gt;Re-frame&lt;/h3&gt;
&lt;p&gt;For the new version, I decided to try out &lt;a href="https://github.com/Day8/re-frame"&gt;re-frame&lt;/a&gt;, an Elm-inspired, FRP-ish framework for Reagent applications. Working within the confines of a well-defined framework turned out to be a big win for me. I agree with Malcolm Sparks about the &lt;a href="https://skillsmatter.com/skillscasts/6718-introduction-to-clojurescript-reagent-and-reframe"&gt;advantage of having a box to put your stuff into&lt;/a&gt; when you're getting used to developing in a new environment — for me, in this case, frontend development with Reagent. You should watch that talk, it's pretty good!&lt;/p&gt;
&lt;p&gt;Of course, re-frame is no magic bullet. I put a lot of thought into for example what my state model should look like. In the end, I found it best to keep only the things that really change in the app state atom and derive the rest from that. As an example, the application I built has a number of groups of words that the user can select for practice:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight"&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="s"&gt;"att"&lt;/span&gt;, &lt;span class="s"&gt;"den"&lt;/span&gt;, &lt;span class="s"&gt;"ett"&lt;/span&gt;, &lt;span class="s"&gt;" där"&lt;/span&gt;, &lt;span class="s"&gt;"fin"&lt;/span&gt;, &lt;span class="s"&gt;"han"&lt;/span&gt; &lt;span class="nv"&gt;...&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
   &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"mitt"&lt;/span&gt;, &lt;span class="s"&gt;"in"&lt;/span&gt;, &lt;span class="s"&gt;"kom"&lt;/span&gt;, &lt;span class="s"&gt;"dem"&lt;/span&gt;, &lt;span class="s"&gt;"mig"&lt;/span&gt;, &lt;span class="s"&gt;"dig"&lt;/span&gt; &lt;span class="nv"&gt;...&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
   &lt;span class="nv"&gt;...&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To keep track of the current words to show, I could have put the entire word array into the app state and pushed the currently selected group via a subscription to the view component. But as the actual words constitute just static data, I instead just pushed a &lt;code&gt;:current-group&lt;/code&gt; key to the view and let the view component do a lookup of the actual words to show based on that. Re-frame stresses to keep view components dumb; I think a a simple lookup is dumb enough!&lt;/p&gt;
&lt;h3&gt;&lt;a href="#figwheel" id="figwheel"&gt;&lt;/a&gt;Figwheel&lt;/h3&gt;
&lt;p&gt;I had some problems with Figwheel reloading at first. I used &lt;a href="https://github.com/gf3/secretary"&gt;secretary&lt;/a&gt; for routing, and whereas the root page reloads fine, reloading while on a route (&lt;code&gt;/#/group/4&lt;/code&gt; for example) would result in a blank page. I could fix that by removing the Fighweel reloading configuration from the Leiningen project file and putting it in a &lt;code&gt;dev&lt;/code&gt; namespace instead — it turns out that you shouldn't let Figwheel reset the whole app, just re-mount the root node.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;core&lt;/code&gt; namespace has a function that performs initialisation of the app and mounts the root node:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defn &lt;/span&gt;&lt;span class="nv"&gt;mount-root&lt;/span&gt;
  &lt;span class="p"&gt;[]&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;reagent/render&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;freq-words-2.views/app&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;.getElementById&lt;/span&gt; &lt;span class="nv"&gt;js/document&lt;/span&gt; &lt;span class="s"&gt;"app"&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defn &lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="ss"&gt;:export&lt;/span&gt; &lt;span class="nv"&gt;main&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;dispatch&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:initialise-db&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;routes/init&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;mount-root&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The project file had this setting:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;;; project.clj:&lt;/span&gt;

&lt;span class="c1"&gt;;; reload whole app: causes blank pages when reloading route&lt;/span&gt;
&lt;span class="ss"&gt;:figwheel&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:on-jsload&lt;/span&gt; &lt;span class="s"&gt;"freq-words-2.core/main"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The replacement for the above:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;;; dev.cljs:&lt;/span&gt;

&lt;span class="c1"&gt;;; only re-mount root on reload&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;figwheel/watch-and-reload&lt;/span&gt;
   &lt;span class="ss"&gt;:websocket-url&lt;/span&gt; &lt;span class="s"&gt;"ws://localhost:3449/figwheel-ws"&lt;/span&gt;
   &lt;span class="ss"&gt;:jsload-callback&lt;/span&gt; &lt;span class="nv"&gt;mount-root&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Check out the [sources] &lt;a href="https://github.com/jstaffans/freq-words-2"&gt;9&lt;/a&gt; to see the whole setup.&lt;/p&gt;
&lt;h3&gt;&lt;a href="#devtools-repl" id="devtools-repl"&gt;&lt;/a&gt;Devtools, REPL&lt;/h3&gt;
&lt;p&gt;Another gem that I discovered during the development of this application was &lt;a href="https://github.com/binaryage/cljs-devtools"&gt;cljs-devtools&lt;/a&gt;. It's extremely helpful for logging ClojureScript values to the Chrome console. I enable it in the &lt;code&gt;dev&lt;/code&gt; namespace, so it's only available during development:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;devtools/enable-feature!&lt;/span&gt; &lt;span class="ss"&gt;:sanity-hints&lt;/span&gt; &lt;span class="ss"&gt;:dirac&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;devtools/install!&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I didn't use the ClojureScript REPL much — Figwheel reloading and cljs-devtools were enough for a smooth development experience. The rare occasions when I put the REPL to use were mostly for &lt;a href="https://github.com/Day8/re-frame/wiki/FAQ#5-how-can-i-inspect-app-db"&gt;inspecting and interacting with the app state directly&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a href="#conclusion" id="conclusion"&gt;&lt;/a&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;Leiningen, Figwheel and re-frame brought stability and sanity to my frontend development undertakings. Hats off to all the people who have brought the ClojureScript ecosystem and development experience to where we are now!&lt;/p&gt;
&lt;p&gt;You can see the live application &lt;a href="http://www.kjellstaffans.fi/ord/"&gt;here&lt;/a&gt;. Sources are on &lt;a href="https://github.com/jstaffans/freq-words-2"&gt;Github&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;div&gt;&lt;a href="/"&gt;Back&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="footer"&gt;&lt;p&gt;&amp;copy; 2015-2017 Johannes Staffans&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/html&gt;</content><author><name>Johannes Staffans</name></author><category term="clojurescript"></category><category term="reagent"></category><category term="re-frame"></category><category term="boot"></category><category term="figwheel"></category></entry><entry><id>urn:uuid:8c6519b4-ffe0-4ca8-9a9b-b0ca203cd1fc</id><title>A new blog is born</title><link href="https://jstaffans.github.io/posts/2015-01-11-a-new-blog-is-born.html" type="text/html" title="A new blog is born" rel="alternate"></link><published>2017-11-16T22:02:48Z</published><updated>2017-11-16T22:02:48Z</updated><content type="html" xml:base="https://jstaffans.github.io/posts/2015-01-11-a-new-blog-is-born.html">&lt;!DOCTYPE html&gt;
&lt;html&gt;&lt;head&gt;&lt;meta charset="utf-8"&gt;&lt;meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible"&gt;&lt;meta content="width=device-width, initial-scale=1, maximum-scale=1" name="viewport"&gt;&lt;meta content="Johannes Staffans" itemprop="author" name="author"&gt;&lt;title&gt;Johannes Staffans - A new blog is born&lt;/title&gt;&lt;link href="https://fonts.googleapis.com/css?family=Merriweather:400,700|Open+Sans:400,700" rel="stylesheet"&gt;&lt;link href="/styles/main.css" rel="stylesheet" type="text/css"&gt;&lt;/head&gt;&lt;div&gt;&lt;div class="header"&gt;&lt;div class="header__content clearfix"&gt;&lt;div class="sm-col sm-col-8"&gt;&lt;div&gt;personal website and blog of&lt;/div&gt;&lt;h1 class="header__headline"&gt;&lt;a href="/"&gt;Johannes Staffans&lt;/a&gt;&lt;/h1&gt;&lt;/div&gt;&lt;div class="sm-col flex-column"&gt;&lt;div&gt;&lt;a href="/"&gt;posts&lt;/a&gt;&lt;span&gt; &amp;middot; &lt;/span&gt;&lt;a href="/pages/about.html"&gt;about&lt;/a&gt;&lt;/div&gt;&lt;div class="pt1"&gt;elsewhere&lt;/div&gt;&lt;div&gt;&lt;a href="https://github.com/jstaffans"&gt;github&lt;/a&gt;&lt;span&gt; &amp;middot; &lt;/span&gt;&lt;a href="https://www.linkedin.com/in/jstaffans"&gt;linkedin&lt;/a&gt;&lt;span&gt; &amp;middot; &lt;/span&gt;&lt;a href="https://twitter.com/jstaffans"&gt;@jstaffans&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="clearfix"&gt;&lt;svg class="left border-triangle" version="1.1" xmlns="http://www.w3.org/2000/svg"&gt;&lt;polygon class="mask" points="0,0 30,0 30,30 0,30"&gt;&lt;/polygon&gt;&lt;polygon points="0,15 30,0 30,30"&gt;&lt;/polygon&gt;&lt;/svg&gt;&lt;svg class="right border-triangle" version="1.1" xmlns="http://www.w3.org/2000/svg"&gt;&lt;polygon class="mask" points="0,0 30,0 30,30 0,30"&gt;&lt;/polygon&gt;&lt;polygon points="30,15 0,30 0,0"&gt;&lt;/polygon&gt;&lt;/svg&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="container"&gt;&lt;div&gt;&lt;div class="flex items-baseline justify-between"&gt;&lt;h2&gt;A new blog is born&lt;/h2&gt;&lt;div&gt;&lt;span&gt;11.01.2015&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;p&gt;It is time for a new blog. My experiences over the last few years have changed the way I develop software a lot and I feel the need to reflect on that. I am also now more focused on the technological side of software development as opposed to working as an agile coach and scrum master, which was what a large part of the posts on my previous blog were about.&lt;/p&gt;
&lt;p&gt;So what experiences am I talking about? In early 2013, after the end of a consulting contract and some extended travelling, I found myself without any consulting work lined up. I was at that point rather fed up with consulting, so I started looking for a normal job as a software developer. At the same time I took the opportunity to brush up on my tech skills and what better way to do that than to learn a new programming language?&lt;/p&gt;
&lt;p&gt;Since I work mostly in the Java space, Scala and Clojure were at the top of my list. I didn't know anything about either of them, but the &lt;a href="http://java.dzone.com/articles/my-scala-vs-clojure-impression"&gt;analogy of Clojure as a serene cathedral to Scala's bazaar&lt;/a&gt; had a deep impression on me and soon I was neck-deep in Clojure. Discovering Clojure and all the ideas that come with it has been a wonderful journey. And I still feel like I am only scratching the surface!&lt;/p&gt;
&lt;p&gt;My interest in Clojure first brought me to &lt;a href="http://mysema.com/"&gt;Mysema&lt;/a&gt;, a small consultancy in Helsinki that has a strong focus on functional programming and Clojure. Since early 2014 I live in Berlin where I work at &lt;a href="https://www.komoot.de"&gt;komoot&lt;/a&gt;. Clojure hasn't been a focus so far at work, but being involved with the development of a hugely successful product like komoot luckily brings its own set of interesting challenges. And besides, most of the ideas that I have been exposed to while learning Clojure are perfectly applicable in any environment.&lt;/p&gt;
&lt;p&gt;So by now you have probably figured out that I will write mostly about functional programming with a focus on Clojure, probably interleaved with tidbits from the Berlin startup scene and anything else I am finding interesting. I hope I can keep it up!&lt;/p&gt;
&lt;/div&gt;&lt;div&gt;&lt;a href="/"&gt;Back&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="footer"&gt;&lt;p&gt;&amp;copy; 2015-2017 Johannes Staffans&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/html&gt;</content><author><name>Johannes Staffans</name></author><category term="blog"></category><category term="about"></category></entry><entry><id>urn:uuid:abcc8b46-f711-4191-9c40-39c868c17c32</id><title>Mob programming</title><link href="https://jstaffans.github.io/posts/2017-02-15-mob-programming.html" type="text/html" title="Mob programming" rel="alternate"></link><published>2017-11-16T22:02:48Z</published><updated>2017-11-16T22:02:48Z</updated><content type="html" xml:base="https://jstaffans.github.io/posts/2017-02-15-mob-programming.html">&lt;!DOCTYPE html&gt;
&lt;html&gt;&lt;head&gt;&lt;meta charset="utf-8"&gt;&lt;meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible"&gt;&lt;meta content="width=device-width, initial-scale=1, maximum-scale=1" name="viewport"&gt;&lt;meta content="Johannes Staffans" itemprop="author" name="author"&gt;&lt;title&gt;Johannes Staffans - Mob programming&lt;/title&gt;&lt;link href="https://fonts.googleapis.com/css?family=Merriweather:400,700|Open+Sans:400,700" rel="stylesheet"&gt;&lt;link href="/styles/main.css" rel="stylesheet" type="text/css"&gt;&lt;/head&gt;&lt;div&gt;&lt;div class="header"&gt;&lt;div class="header__content clearfix"&gt;&lt;div class="sm-col sm-col-8"&gt;&lt;div&gt;personal website and blog of&lt;/div&gt;&lt;h1 class="header__headline"&gt;&lt;a href="/"&gt;Johannes Staffans&lt;/a&gt;&lt;/h1&gt;&lt;/div&gt;&lt;div class="sm-col flex-column"&gt;&lt;div&gt;&lt;a href="/"&gt;posts&lt;/a&gt;&lt;span&gt; &amp;middot; &lt;/span&gt;&lt;a href="/pages/about.html"&gt;about&lt;/a&gt;&lt;/div&gt;&lt;div class="pt1"&gt;elsewhere&lt;/div&gt;&lt;div&gt;&lt;a href="https://github.com/jstaffans"&gt;github&lt;/a&gt;&lt;span&gt; &amp;middot; &lt;/span&gt;&lt;a href="https://www.linkedin.com/in/jstaffans"&gt;linkedin&lt;/a&gt;&lt;span&gt; &amp;middot; &lt;/span&gt;&lt;a href="https://twitter.com/jstaffans"&gt;@jstaffans&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="clearfix"&gt;&lt;svg class="left border-triangle" version="1.1" xmlns="http://www.w3.org/2000/svg"&gt;&lt;polygon class="mask" points="0,0 30,0 30,30 0,30"&gt;&lt;/polygon&gt;&lt;polygon points="0,15 30,0 30,30"&gt;&lt;/polygon&gt;&lt;/svg&gt;&lt;svg class="right border-triangle" version="1.1" xmlns="http://www.w3.org/2000/svg"&gt;&lt;polygon class="mask" points="0,0 30,0 30,30 0,30"&gt;&lt;/polygon&gt;&lt;polygon points="30,15 0,30 0,0"&gt;&lt;/polygon&gt;&lt;/svg&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="container"&gt;&lt;div&gt;&lt;div class="flex items-baseline justify-between"&gt;&lt;h2&gt;Mob programming&lt;/h2&gt;&lt;div&gt;&lt;span&gt;15.02.2017&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;p&gt;Last week, my team and I had the need to re-focus our priorities and put our joint efforts into pushing a new project forward. Traditionally, we have had a bit of work segregation going on with individuals and pairs working on smaller sub-projects, but the business now needed something different. Since we were all going to work on the same thing, which was new to most of us, we decided that doing a few days of &lt;a href="http://mobprogramming.org/"&gt;mob programming&lt;/a&gt; would be a good way to kick things off.&lt;/p&gt;
&lt;p&gt;Mob programming is a concept that none of us had any prior experience with — I had heard about it in passing, but that was about it. We are however used to working in pairs and have a pretty well-functioning team without any derailers, which made things a lot easier.&lt;/p&gt;
&lt;h2&gt;&lt;a href="#motivation" id="motivation"&gt;&lt;/a&gt;Motivation&lt;/h2&gt;
&lt;p&gt;The primary motivation for having all engineers work tightly together was to &lt;strong&gt;develop a shared understanding&lt;/strong&gt; of the problem domain and to enable us to later split up into pairs and work on smaller tasks while still having a good general overview. "The mob", as we rather quickly started referring to ourselves as, could &lt;strong&gt;reach consensus&lt;/strong&gt; on important technical architecture and project setup issues early on.&lt;/p&gt;
&lt;p&gt;Just as important as getting ahead with the engineering effort itself was what it did for team morale. I think that a hallmark of an effective team is that its members work in an interdependent fashion — in such a setting, each individual is aware of the other team members' areas of expertise and skillset and rely upon the support of colleagues to effectively complete their tasks¹. Both mob and pair programming foster collaboration and mutual learning.&lt;/p&gt;
&lt;h2&gt;&lt;a href="#the-setup" id="the-setup"&gt;&lt;/a&gt;The setup&lt;/h2&gt;
&lt;p&gt;We booked a meeting room and re-arranged the tables and chairs to face in one direction and set up a projector to mirror a laptop screen onto the wall. We had a few different keyboards to cater to people's preferred layouts. A nice touch was providing hand desinfectant, since we would all be sharing a keyboard and mouse.&lt;/p&gt;
&lt;p&gt;We used a timer to ping us to rotate the "driver" every twenty minutes.&lt;/p&gt;
&lt;h2&gt;&lt;a href="#day-one-requirements" id="day-one-requirements"&gt;&lt;/a&gt;Day one: requirements&lt;/h2&gt;
&lt;p&gt;The project was new, but still based on some previous work that had been going on within the company as well as on extensive research that had been done previously by an individual on the team. We started things off by &lt;strong&gt;setting an agenda for the day&lt;/strong&gt; — present the research and previous art, determine some initial high-level requirements, identify technical risks and so on. We quickly decided that we would &lt;strong&gt;not&lt;/strong&gt; do any programming the first day, so we didn't do any driver rotation either. One team member just acted as a secretary and took down notes in a shared document.&lt;/p&gt;
&lt;p&gt;Even though we didn't do any coding, having the whole team together with a clear agenda worked really well towards building up understanding for the problem domain.&lt;/p&gt;
&lt;h2&gt;&lt;a href="#day-two" id="day-two"&gt;&lt;/a&gt;Day two&lt;/h2&gt;
&lt;p&gt;In the morning, we set up a goal for the day — to get a basic project setup running and deployed on AWS. We chose a Python/Django-based backend because of familiarity with that stack, but included more modern, Webpack-based frontend asset tooling than what usually comes with Django (we anticipate the need to move to a single-page application soon-ish, and Django's own static asset handling isn't very modern or flexible).&lt;/p&gt;
&lt;p&gt;As we started programming, it didn't take long for suggestions for key combinations, shortcuts and terminal tricks started flying through the room. The driver usually didn't contribute much to the discussion, instead just acting as the conduit for typing things out. We frequently paused in order for the driver to explain something he had just done, though — there were frequent comments along the line of "I had no idea you could do that with PyCharm!".&lt;/p&gt;
&lt;p&gt;By the end of the day, we had reached our goal — a service running on AWS, with everything up and ready for real implementation work to commence the following day.&lt;/p&gt;
&lt;h2&gt;&lt;a href="#day-three" id="day-three"&gt;&lt;/a&gt;Day three&lt;/h2&gt;
&lt;p&gt;The agenda for the day was to tackle one of the areas of the system that needed especially careful architecting and carried considerable technical risk with it. We spent some time in the morning brainstorming ideas on a whiteboard, identifying pros and cons with each approach and finally settling on one of them.&lt;/p&gt;
&lt;p&gt;With everyone on the same page with regards to what the solution we were striving for was, it felt like we later breezed through the actual programming bit. With so many bright people in the same room, it was guaranteed that at least someone was on the ball, knowing exactly what the next step should be in order to achieve the solution we had sketched out earlier.&lt;/p&gt;
&lt;p&gt;At one point in the day, we had a lengthy discussion with the person who was going to play the role of product owner. Normally, that discussion would probably have taken place between only one or two developers and the PO, but now we were all together in the same room. Since we had developed a shared understanding of the problem domain from a technical viewpoint, we could all speak confidently about what the team's standpoint were on the issues that we discussed. It was almost as if we could read each others' minds!&lt;/p&gt;
&lt;p&gt;We achieved our goal and did a short retrospective about the experience doing mob programming. Everyone was very happy with the experience. One team member suggested that the mob programming format should be the &lt;em&gt;default&lt;/em&gt; from now on and we should split up only if we really have to!&lt;/p&gt;
&lt;h2&gt;&lt;a href="#conclusion" id="conclusion"&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;A highly effective team is one that collaborates well. Mob programming is maybe the most collaborative way of working for a software development team and has positive repercussions long after the mob has disbanded (if it ever does). I'd especially recommend it during the start of a new project and with a new team, so that everyone gets to know each others' strengths and ways of working better.&lt;/p&gt;
&lt;p&gt;One caveat is that the rest of the organisation may feel left in the dark if the mob fails to communicate its process and its goals to others. In the worst case, the mob may become seen as a dangerous clique that is derailing the company and needs to be dissolved immediately. The mob needs to communicate effectively to others within the organisation to prevent this, for example by posting daily status updates.&lt;/p&gt;
&lt;/div&gt;&lt;div&gt;&lt;a href="/"&gt;Back&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="footer"&gt;&lt;p&gt;&amp;copy; 2015-2017 Johannes Staffans&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/html&gt;</content><author><name>Johannes Staffans</name></author><category term="team"></category><category term="engineering"></category><category term="agile"></category></entry><entry><id>urn:uuid:07ae01ec-82fb-418d-9e1f-53040dae2424</id><title>Fun with Specter</title><link href="https://jstaffans.github.io/posts/2015-11-19-fun-with-specter.html" type="text/html" title="Fun with Specter" rel="alternate"></link><published>2017-11-16T22:02:48Z</published><updated>2017-11-16T22:02:48Z</updated><content type="html" xml:base="https://jstaffans.github.io/posts/2015-11-19-fun-with-specter.html">&lt;!DOCTYPE html&gt;
&lt;html&gt;&lt;head&gt;&lt;meta charset="utf-8"&gt;&lt;meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible"&gt;&lt;meta content="width=device-width, initial-scale=1, maximum-scale=1" name="viewport"&gt;&lt;meta content="Johannes Staffans" itemprop="author" name="author"&gt;&lt;title&gt;Johannes Staffans - Fun with Specter&lt;/title&gt;&lt;link href="https://fonts.googleapis.com/css?family=Merriweather:400,700|Open+Sans:400,700" rel="stylesheet"&gt;&lt;link href="/styles/main.css" rel="stylesheet" type="text/css"&gt;&lt;/head&gt;&lt;div&gt;&lt;div class="header"&gt;&lt;div class="header__content clearfix"&gt;&lt;div class="sm-col sm-col-8"&gt;&lt;div&gt;personal website and blog of&lt;/div&gt;&lt;h1 class="header__headline"&gt;&lt;a href="/"&gt;Johannes Staffans&lt;/a&gt;&lt;/h1&gt;&lt;/div&gt;&lt;div class="sm-col flex-column"&gt;&lt;div&gt;&lt;a href="/"&gt;posts&lt;/a&gt;&lt;span&gt; &amp;middot; &lt;/span&gt;&lt;a href="/pages/about.html"&gt;about&lt;/a&gt;&lt;/div&gt;&lt;div class="pt1"&gt;elsewhere&lt;/div&gt;&lt;div&gt;&lt;a href="https://github.com/jstaffans"&gt;github&lt;/a&gt;&lt;span&gt; &amp;middot; &lt;/span&gt;&lt;a href="https://www.linkedin.com/in/jstaffans"&gt;linkedin&lt;/a&gt;&lt;span&gt; &amp;middot; &lt;/span&gt;&lt;a href="https://twitter.com/jstaffans"&gt;@jstaffans&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="clearfix"&gt;&lt;svg class="left border-triangle" version="1.1" xmlns="http://www.w3.org/2000/svg"&gt;&lt;polygon class="mask" points="0,0 30,0 30,30 0,30"&gt;&lt;/polygon&gt;&lt;polygon points="0,15 30,0 30,30"&gt;&lt;/polygon&gt;&lt;/svg&gt;&lt;svg class="right border-triangle" version="1.1" xmlns="http://www.w3.org/2000/svg"&gt;&lt;polygon class="mask" points="0,0 30,0 30,30 0,30"&gt;&lt;/polygon&gt;&lt;polygon points="30,15 0,30 0,0"&gt;&lt;/polygon&gt;&lt;/svg&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="container"&gt;&lt;div&gt;&lt;div class="flex items-baseline justify-between"&gt;&lt;h2&gt;Fun with Specter&lt;/h2&gt;&lt;div&gt;&lt;span&gt;19.11.2015&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;p&gt;&lt;a href="https://github.com/nathanmarz/specter"&gt;Specter&lt;/a&gt; is a new library by Nathan Marz that makes it easier to deal with nested data structures, such as lists of maps of maps. This post explores some less-documented parts of the library.&lt;/p&gt;
&lt;p&gt;For this post, we'll be dealing with a simple movie dataset:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="ss"&gt;:name&lt;/span&gt; &lt;span class="s"&gt;"First Blood"&lt;/span&gt;, &lt;span class="ss"&gt;:director&lt;/span&gt; &lt;span class="s"&gt;"Ted Kotcheff"&lt;/span&gt;, &lt;span class="ss"&gt;:rating&lt;/span&gt; &lt;span class="mf"&gt;7.6&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:name&lt;/span&gt; &lt;span class="s"&gt;"Lethal Weapon 3"&lt;/span&gt;, &lt;span class="ss"&gt;:director&lt;/span&gt; &lt;span class="s"&gt;"Richard Donner"&lt;/span&gt;, &lt;span class="ss"&gt;:rating&lt;/span&gt; &lt;span class="mf"&gt;6.6&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:name&lt;/span&gt; &lt;span class="s"&gt;"Predator"&lt;/span&gt;, &lt;span class="ss"&gt;:director&lt;/span&gt; &lt;span class="s"&gt;"John McTiernan"&lt;/span&gt;, &lt;span class="ss"&gt;:rating&lt;/span&gt; &lt;span class="mf"&gt;7.8&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:name&lt;/span&gt; &lt;span class="s"&gt;"Mad Max Beyond Thunderdome"&lt;/span&gt;, &lt;span class="ss"&gt;:director&lt;/span&gt; &lt;span class="s"&gt;"George Miller"&lt;/span&gt;, &lt;span class="ss"&gt;:rating&lt;/span&gt; &lt;span class="mf"&gt;6.1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:name&lt;/span&gt; &lt;span class="s"&gt;"The Terminator"&lt;/span&gt;, &lt;span class="ss"&gt;:director&lt;/span&gt; &lt;span class="s"&gt;"James Cameron"&lt;/span&gt;, &lt;span class="ss"&gt;:rating&lt;/span&gt; &lt;span class="mf"&gt;8.1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="nv"&gt;...&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Transforming the sequence is simple enough:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;require&lt;/span&gt; &lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;com.rpl.specter&lt;/span&gt; &lt;span class="ss"&gt;:as&lt;/span&gt; &lt;span class="nv"&gt;s&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="nv"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;nil&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;s/transform&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;s/ALL&lt;/span&gt; &lt;span class="ss"&gt;:name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="nv"&gt;clojure.string/upper-case&lt;/span&gt; &lt;span class="nv"&gt;movies&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="ss"&gt;:name&lt;/span&gt; &lt;span class="s"&gt;"FIRST BLOOD"&lt;/span&gt;, &lt;span class="ss"&gt;:director&lt;/span&gt; &lt;span class="s"&gt;"Ted Kotcheff"&lt;/span&gt;, &lt;span class="ss"&gt;:rating&lt;/span&gt; &lt;span class="mf"&gt;7.6&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;, &lt;span class="nv"&gt;...&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In general, transformation is Specter's forte and is covered very well by the &lt;a href="https://github.com/nathanmarz/specter"&gt;documentation&lt;/a&gt;. I was however interested in exploiting Specter for doing analysis and aggregation of data stored in a sequence of nested maps. It is possible to do so with standard Clojure functions, but I like the declarativeness of Specter and wanted to give it a shot.&lt;/p&gt;
&lt;p&gt;Let's for example find all movies by James Cameron with a rating higher than 8.0:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;s/select&lt;/span&gt; 
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;s/ALL&lt;/span&gt; 
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;s/cond-path&lt;/span&gt; 
     &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:director&lt;/span&gt; &lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;= &lt;/span&gt;&lt;span class="s"&gt;"James Cameron"&lt;/span&gt; &lt;span class="nv"&gt;%&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; 
     &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:rating&lt;/span&gt; &lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;&amp;gt; &lt;/span&gt;&lt;span class="nv"&gt;%&lt;/span&gt; &lt;span class="mf"&gt;8.0&lt;/span&gt;&lt;span class="p"&gt;)])]&lt;/span&gt; 
  &lt;span class="nv"&gt;movies&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;8.1&lt;/span&gt; &lt;span class="mf"&gt;8.5&lt;/span&gt; &lt;span class="mf"&gt;8.6&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;(Note: Nathan Marz let me know via Twitter that there's a better to do the following, more on that at the end of the post!)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;So we get the ratings and they are all greater than 8.0, but we have lost the original maps. How do we get those? It turns out that you can reference the &lt;code&gt;VAL&lt;/code&gt; symbol basically anywhere within the selector path. This resolves to whatever value is selected by Specter at this level of nesting. If we example put &lt;code&gt;VAL&lt;/code&gt; at the end, we duplicate the rating:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;s/select&lt;/span&gt; 
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;s/ALL&lt;/span&gt; 
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;s/cond-path&lt;/span&gt; 
     &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:director&lt;/span&gt; &lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;= &lt;/span&gt;&lt;span class="s"&gt;"James Cameron"&lt;/span&gt; &lt;span class="nv"&gt;%&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; 
     &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:rating&lt;/span&gt; &lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;&amp;gt; &lt;/span&gt;&lt;span class="nv"&gt;%&lt;/span&gt; &lt;span class="mf"&gt;8.0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;s/VAL&lt;/span&gt;&lt;span class="p"&gt;])]&lt;/span&gt; 
  &lt;span class="nv"&gt;movies&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="mf"&gt;8.1&lt;/span&gt; &lt;span class="mf"&gt;8.1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;8.5&lt;/span&gt; &lt;span class="mf"&gt;8.5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;8.6&lt;/span&gt; &lt;span class="mf"&gt;8.6&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When working with sequences of maps, it's usually the case that we want to get the whole map back, so we should put &lt;code&gt;VAL&lt;/code&gt; at the beginning of the selector path:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;s/select&lt;/span&gt; 
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;s/ALL&lt;/span&gt; 
   &lt;span class="nv"&gt;s/VAL&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;s/cond-path&lt;/span&gt; 
     &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:director&lt;/span&gt; &lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;= &lt;/span&gt;&lt;span class="s"&gt;"James Cameron"&lt;/span&gt; &lt;span class="nv"&gt;%&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; 
     &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:rating&lt;/span&gt; &lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;&amp;gt; &lt;/span&gt;&lt;span class="nv"&gt;%&lt;/span&gt; &lt;span class="mf"&gt;8.0&lt;/span&gt;&lt;span class="p"&gt;)])]&lt;/span&gt; 
  &lt;span class="nv"&gt;movies&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[[{&lt;/span&gt;&lt;span class="ss"&gt;:name&lt;/span&gt; &lt;span class="s"&gt;"The Terminator"&lt;/span&gt;, &lt;span class="ss"&gt;:director&lt;/span&gt; &lt;span class="s"&gt;"James Cameron"&lt;/span&gt;, &lt;span class="ss"&gt;:rating&lt;/span&gt; &lt;span class="mf"&gt;8.1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="mf"&gt;8.1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="nv"&gt;...&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we get the full map back, but it's wrapped in a collection. We can introduce a helper function for this use case:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defn &lt;/span&gt;&lt;span class="nv"&gt;select-maps&lt;/span&gt; 
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;selector&lt;/span&gt; &lt;span class="nv"&gt;structure&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;-&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;s/select&lt;/span&gt; &lt;span class="nv"&gt;selector&lt;/span&gt; &lt;span class="nv"&gt;structure&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
         &lt;span class="c1"&gt;; the map we're after is always the first argument&lt;/span&gt;
         &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;mapv&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;fn &lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="nv"&gt;m&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="nv"&gt;_&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="nv"&gt;m&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;    
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now working with sequences of maps is more comfortable:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;select-maps&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;s/ALL&lt;/span&gt; 
   &lt;span class="nv"&gt;s/VAL&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;s/cond-path&lt;/span&gt; 
     &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:director&lt;/span&gt; &lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;= &lt;/span&gt;&lt;span class="s"&gt;"James Cameron"&lt;/span&gt; &lt;span class="nv"&gt;%&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; 
     &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:rating&lt;/span&gt; &lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;&amp;gt; &lt;/span&gt;&lt;span class="nv"&gt;%&lt;/span&gt; &lt;span class="mf"&gt;8.0&lt;/span&gt;&lt;span class="p"&gt;)])]&lt;/span&gt; 
  &lt;span class="nv"&gt;movies&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="ss"&gt;:name&lt;/span&gt; &lt;span class="s"&gt;"The Terminator"&lt;/span&gt;, &lt;span class="ss"&gt;:director&lt;/span&gt; &lt;span class="s"&gt;"James Cameron"&lt;/span&gt;, &lt;span class="ss"&gt;:rating&lt;/span&gt; &lt;span class="mf"&gt;8.1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nv"&gt;...&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Specter's path definition functions can be exploited to get e.g. movies of James Cameron that have an either very bad or very good rating:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;select-maps&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;s/ALL&lt;/span&gt; 
   &lt;span class="nv"&gt;s/VAL&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;s/cond-path&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:director&lt;/span&gt; &lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;= &lt;/span&gt;&lt;span class="s"&gt;"James Cameron"&lt;/span&gt; &lt;span class="nv"&gt;%&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;s/multi-path&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:rating&lt;/span&gt; &lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;&amp;gt; &lt;/span&gt;&lt;span class="nv"&gt;%&lt;/span&gt; &lt;span class="mf"&gt;8.5&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:rating&lt;/span&gt; &lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;&amp;lt; &lt;/span&gt;&lt;span class="nv"&gt;%&lt;/span&gt; &lt;span class="mf"&gt;6.0&lt;/span&gt;&lt;span class="p"&gt;)]))]&lt;/span&gt; 
  &lt;span class="nv"&gt;movies&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;=&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="ss"&gt;:name&lt;/span&gt; &lt;span class="s"&gt;"Terminator 3: Judgment Day"&lt;/span&gt;, 
  &lt;span class="ss"&gt;:director&lt;/span&gt; &lt;span class="s"&gt;"James Cameron"&lt;/span&gt;, &lt;span class="ss"&gt;:rating&lt;/span&gt; &lt;span class="mf"&gt;8.6&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:name&lt;/span&gt; &lt;span class="s"&gt;"Piranhas II"&lt;/span&gt;, &lt;span class="ss"&gt;:director&lt;/span&gt; &lt;span class="s"&gt;"James Cameron"&lt;/span&gt;, &lt;span class="ss"&gt;:rating&lt;/span&gt; &lt;span class="mf"&gt;3.5&lt;/span&gt;&lt;span class="p"&gt;}]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So this works, but it's clunky and requires a helper function. Is there an easier way?&lt;/p&gt;
&lt;h4&gt;&lt;a href="#the-right-way" id="the-right-way"&gt;&lt;/a&gt;The right way&lt;/h4&gt;
&lt;p&gt;As pointed out to me by the library author, there's a much better way of accomplishing the above:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;s/select&lt;/span&gt; 
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;s/ALL&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;s/selected?&lt;/span&gt; &lt;span class="ss"&gt;:director&lt;/span&gt; &lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;= &lt;/span&gt;&lt;span class="s"&gt;"James Cameron"&lt;/span&gt; &lt;span class="nv"&gt;%&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;s/selected?&lt;/span&gt; &lt;span class="ss"&gt;:rating&lt;/span&gt; &lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;&amp;gt; &lt;/span&gt;&lt;span class="nv"&gt;%&lt;/span&gt; &lt;span class="mf"&gt;8.0&lt;/span&gt;&lt;span class="p"&gt;))]&lt;/span&gt;
  &lt;span class="nv"&gt;movies&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;selected?&lt;/code&gt; function filters the current value based on whether the selector that follows matches anything. It doesn't mess up the return value like the other examples above. It can of course be combined with conditional paths or multipaths as in the previous example:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;s/select&lt;/span&gt; 
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;s/ALL&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;s/selected?&lt;/span&gt; &lt;span class="ss"&gt;:director&lt;/span&gt; &lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;= &lt;/span&gt;&lt;span class="s"&gt;"James Cameron"&lt;/span&gt; &lt;span class="nv"&gt;%&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;s/selected?&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;s/multi-path&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:rating&lt;/span&gt; &lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;&amp;gt; &lt;/span&gt;&lt;span class="nv"&gt;%&lt;/span&gt; &lt;span class="mf"&gt;8.0&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:rating&lt;/span&gt; &lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;&amp;lt; &lt;/span&gt;&lt;span class="nv"&gt;%&lt;/span&gt; &lt;span class="mf"&gt;6.0&lt;/span&gt;&lt;span class="p"&gt;)]))]&lt;/span&gt;
  &lt;span class="nv"&gt;movies&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;&lt;a href="#conclusion" id="conclusion"&gt;&lt;/a&gt;Conclusion&lt;/h4&gt;
&lt;p&gt;I think Specter is one of the best things to come out of the Clojure ecosystem recently. I find it a lot easier to grasp how to use Specter than for example zippers, which is another popular way of working with nested data structures. It's still a bit dense to get into, though — Specter would benefit greatly from something like the &lt;a href="http://www.learndatalogtoday.org/"&gt;Learn Datalog Today&lt;/a&gt; website!&lt;/p&gt;
&lt;/div&gt;&lt;div&gt;&lt;a href="/"&gt;Back&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="footer"&gt;&lt;p&gt;&amp;copy; 2015-2017 Johannes Staffans&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/html&gt;</content><author><name>Johannes Staffans</name></author><category term="clojure"></category><category term="data structures"></category><category term="specter"></category></entry></feed>