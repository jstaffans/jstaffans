<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom"><title>Johannes Staffans</title><subtitle>Johannes Staffans' blog</subtitle><generator uri="https://perun.io/" version="0.4.2-SNAPSHOT">Perun</generator><link href="https://jstaffans.github.io/" type="text/html"></link><link href="https://jstaffans.github.io/atom.xml" rel="self"></link><link href="https://jstaffans.github.io/atom.xml" rel="first"></link><link href="https://jstaffans.github.io/atom-2.xml" rel="last"></link><link href="https://jstaffans.github.io/atom-2.xml" rel="next"></link><updated>2018-01-03T21:10:06Z</updated><id>https://jstaffans.github.io/</id><entry><id>urn:uuid:32df7bf4-e980-4224-9954-988f487134c2</id><title>Why I'm excited about AWS Fargate</title><link href="https://jstaffans.github.io/posts/2018-01-02-aws-fargate.html" type="text/html" title="Why I'm excited about AWS Fargate" rel="alternate"></link><published>2018-01-02T00:00:00Z</published><updated>2018-01-02T00:00:00Z</updated><content type="html" xml:base="https://jstaffans.github.io/posts/2018-01-02-aws-fargate.html">&lt;!DOCTYPE html&gt;
&lt;html&gt;&lt;head&gt;&lt;meta charset="utf-8"&gt;&lt;meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible"&gt;&lt;meta content="width=device-width, initial-scale=1, maximum-scale=1" name="viewport"&gt;&lt;meta content="Johannes Staffans" itemprop="author" name="author"&gt;&lt;title&gt;Johannes Staffans - Why I'm excited about AWS Fargate&lt;/title&gt;&lt;link href="https://fonts.googleapis.com/css?family=Merriweather:400,700|Open+Sans:400,700" rel="stylesheet"&gt;&lt;link href="/styles/main.css" rel="stylesheet" type="text/css"&gt;&lt;/head&gt;&lt;div&gt;&lt;div class="header"&gt;&lt;div class="header__content clearfix"&gt;&lt;div class="sm-col sm-col-8"&gt;&lt;div&gt;personal website and blog of&lt;/div&gt;&lt;h1 class="header__headline"&gt;&lt;a href="/"&gt;Johannes Staffans&lt;/a&gt;&lt;/h1&gt;&lt;/div&gt;&lt;div class="sm-col flex-column"&gt;&lt;div&gt;&lt;a href="/"&gt;posts&lt;/a&gt;&lt;span&gt; &amp;middot; &lt;/span&gt;&lt;a href="/pages/about.html"&gt;about&lt;/a&gt;&lt;/div&gt;&lt;div class="pt1"&gt;elsewhere&lt;/div&gt;&lt;div&gt;&lt;a href="https://github.com/jstaffans"&gt;github&lt;/a&gt;&lt;span&gt; &amp;middot; &lt;/span&gt;&lt;a href="https://www.linkedin.com/in/jstaffans"&gt;linkedin&lt;/a&gt;&lt;span&gt; &amp;middot; &lt;/span&gt;&lt;a href="https://twitter.com/jstaffans"&gt;@jstaffans&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="clearfix"&gt;&lt;svg class="left border-triangle" version="1.1" xmlns="http://www.w3.org/2000/svg"&gt;&lt;polygon class="mask" points="0,0 30,0 30,30 0,30"&gt;&lt;/polygon&gt;&lt;polygon points="0,15 30,0 30,30"&gt;&lt;/polygon&gt;&lt;/svg&gt;&lt;svg class="right border-triangle" version="1.1" xmlns="http://www.w3.org/2000/svg"&gt;&lt;polygon class="mask" points="0,0 30,0 30,30 0,30"&gt;&lt;/polygon&gt;&lt;polygon points="30,15 0,30 0,0"&gt;&lt;/polygon&gt;&lt;/svg&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="container"&gt;&lt;div&gt;&lt;div class="flex items-baseline justify-between"&gt;&lt;h2&gt;Why I'm excited about AWS Fargate&lt;/h2&gt;&lt;div&gt;&lt;span&gt;02.01.2018&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;p&gt;Most of the systems I've worked on over the past several years have been deployed as Docker containers in the AWS cloud. Regardless of which approach to deploying containers on AWS you take, there's always been a clunky step involved, namely managing the underlying infrastructure in terms of EC2 instances, auto-scaling groups and so forth. AWS Fargate promises to change that.&lt;/p&gt;
&lt;h3&gt;&lt;a href="#the-story-thus-far" id="the-story-thus-far"&gt;&lt;/a&gt;The story thus far&lt;/h3&gt;
&lt;p&gt;I've tried a lot of approaches to deploying Docker containers on AWS, and learned a few lessons along the way.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;OpsWorks&lt;/strong&gt; — my team and I were attracted by niceties such as user and key management, useful monitoring, flexible scaling and a sane way of defining environment variables. Still, we ended up writing a lot of glue code in the form of Chef recipes to fetch Docker images, launch containers and so forth — not to mention having to manually implement blue-green and rolling deployments. The biggest pain point was however the OpsWorks agent, which was the cause of unacceptably long boot times. The agent was even so busy at times that it caused auto-scaling events all on its own!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Docker Machine&lt;/strong&gt; — single-instance environments, e.g. for test purposes, can be easily created and torn down using &lt;a href="https://docs.docker.com/machine/"&gt;Docker Machine&lt;/a&gt; and its AWS driver. Sharing those environments quickly becomes a hassle, though, since the configuration and access keys are usually only available on whatever system was used to create the environment. It's impossible to scale this solution to production use cases.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Docker Swarm&lt;/strong&gt; — it seems elegant to be able to use the same Docker client that is so familiar from local development to create and deploy multi-instance production environments as well. In practice, though, maintaining a Docker Swarm cluster on your own is a lot of overhead for a small team. Probably the same thing can be said of maintaining a Kubernetes cluster, which is something I haven't tried yet.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Elastic Beanstalk&lt;/strong&gt; — multi-container deployments on Elastic Beanstalk is my current go-to way of launching new systems that utilise Docker containers. A multi-container setup essentially turns your Elastic Beanstalk environment into a managed ECS cluster. Elastic Beanstalk provides a lot of useful features like monitoring, simple auto-scaling, and rolling deployments out of the box. There are a few drawbacks as well, for example that each instance needs to run the same container configuration, which can lead to sub-optimal resource usage. A long-standing gripe of mine is also the fact that environment variables can only be stored in plain text, which is obviosly a bad idea from a security perspective. Finally, debugging Elastic Beanstalk deployments is usually not a trivial exercise, since the whole platform seems to consist of a rickety patchwork of shell scripts.&lt;/p&gt;
&lt;p&gt;One noteable exception to the list above is ECS. The overhead of cluster maintenance never seemed to justify the added flexibility over the simpler approach of deploying Docker containers to Elastic Beanstalk.&lt;/p&gt;
&lt;h3&gt;&lt;a href="#aws-fargate-the-future" id="aws-fargate-the-future"&gt;&lt;/a&gt;AWS Fargate: the future?&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://aws.amazon.com/de/blogs/aws/aws-fargate/"&gt;Fargate&lt;/a&gt; is the latest container orchestration offering from AWS. From what I've gathered from the launch announcements, Fargate promises to relieve us developers from the burden of managing the underlying ECS cluster ourselves. If Fargate can give me fine-grained control over containers, deployments fas easy as multi-container Elastic Beanstalk deployments, and modern features around things like auto-scaling, configuration through environment variables and so forth, I'm hopeful it'll meet my container deployment needs for the foreseeable future.&lt;/p&gt;
&lt;/div&gt;&lt;div&gt;&lt;a href="/"&gt;Back&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="footer"&gt;&lt;p&gt;&amp;copy; 2015-2018 Johannes Staffans&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/html&gt;</content><author><name>Johannes Staffans</name></author><category term="aws"></category><category term="devops"></category><category term="containers"></category><category term="docker"></category><category term="ecs"></category></entry><entry><id>urn:uuid:81bfcabf-e523-4d67-9711-52bc8128208d</id><title>#NoHandovers</title><link href="https://jstaffans.github.io/posts/2017-12-17-nohandovers.html" type="text/html" title="#NoHandovers" rel="alternate"></link><published>2017-12-17T00:00:00Z</published><updated>2017-12-17T00:00:00Z</updated><content type="html" xml:base="https://jstaffans.github.io/posts/2017-12-17-nohandovers.html">&lt;!DOCTYPE html&gt;
&lt;html&gt;&lt;head&gt;&lt;meta charset="utf-8"&gt;&lt;meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible"&gt;&lt;meta content="width=device-width, initial-scale=1, maximum-scale=1" name="viewport"&gt;&lt;meta content="Johannes Staffans" itemprop="author" name="author"&gt;&lt;title&gt;Johannes Staffans - #NoHandovers&lt;/title&gt;&lt;link href="https://fonts.googleapis.com/css?family=Merriweather:400,700|Open+Sans:400,700" rel="stylesheet"&gt;&lt;link href="/styles/main.css" rel="stylesheet" type="text/css"&gt;&lt;/head&gt;&lt;div&gt;&lt;div class="header"&gt;&lt;div class="header__content clearfix"&gt;&lt;div class="sm-col sm-col-8"&gt;&lt;div&gt;personal website and blog of&lt;/div&gt;&lt;h1 class="header__headline"&gt;&lt;a href="/"&gt;Johannes Staffans&lt;/a&gt;&lt;/h1&gt;&lt;/div&gt;&lt;div class="sm-col flex-column"&gt;&lt;div&gt;&lt;a href="/"&gt;posts&lt;/a&gt;&lt;span&gt; &amp;middot; &lt;/span&gt;&lt;a href="/pages/about.html"&gt;about&lt;/a&gt;&lt;/div&gt;&lt;div class="pt1"&gt;elsewhere&lt;/div&gt;&lt;div&gt;&lt;a href="https://github.com/jstaffans"&gt;github&lt;/a&gt;&lt;span&gt; &amp;middot; &lt;/span&gt;&lt;a href="https://www.linkedin.com/in/jstaffans"&gt;linkedin&lt;/a&gt;&lt;span&gt; &amp;middot; &lt;/span&gt;&lt;a href="https://twitter.com/jstaffans"&gt;@jstaffans&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="clearfix"&gt;&lt;svg class="left border-triangle" version="1.1" xmlns="http://www.w3.org/2000/svg"&gt;&lt;polygon class="mask" points="0,0 30,0 30,30 0,30"&gt;&lt;/polygon&gt;&lt;polygon points="0,15 30,0 30,30"&gt;&lt;/polygon&gt;&lt;/svg&gt;&lt;svg class="right border-triangle" version="1.1" xmlns="http://www.w3.org/2000/svg"&gt;&lt;polygon class="mask" points="0,0 30,0 30,30 0,30"&gt;&lt;/polygon&gt;&lt;polygon points="30,15 0,30 0,0"&gt;&lt;/polygon&gt;&lt;/svg&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="container"&gt;&lt;div&gt;&lt;div class="flex items-baseline justify-between"&gt;&lt;h2&gt;#NoHandovers&lt;/h2&gt;&lt;div&gt;&lt;span&gt;17.12.2017&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;p&gt;Time to take another look at the subject of a previous post, namely &lt;a href="http://jstaffans.github.io/posts/2017-09-08-the-handover.html"&gt;handovers within development teams&lt;/a&gt;. Making sure handovers go as smoothly as possible is all well and good, but what if we could eliminate them completely?&lt;/p&gt;
&lt;p&gt;One of the underlying principles of lean software development is the elimination of waste. Waste can be defined as anything we do that does not directly provide the customer with value. To me, it seems that the activities needed for smooth handovers (like writing detailed pull request descriptions) clearly constitute forms of waste.&lt;/p&gt;
&lt;h3&gt;&lt;a href="#why-are-handovers-necessary" id="why-are-handovers-necessary"&gt;&lt;/a&gt;Why are handovers necessary?&lt;/h3&gt;
&lt;p&gt;A handover becomes necessary when a developer, working alone, cannot finish the task he or she has undertaken in due time.&lt;/p&gt;
&lt;p&gt;There could be several reasons for why it's not possible to finish the task:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;unforeseen complexity, lack of design&lt;/li&gt;
&lt;li&gt;too large work items (batch size)&lt;/li&gt;
&lt;li&gt;need to wait for e.g. code review&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a href="#batch-size" id="batch-size"&gt;&lt;/a&gt;Batch size&lt;/h4&gt;
&lt;p&gt;The ability to split work into small, yet meaningful pieces is one of the best skills to have in software development. But going too granular during planning sessions means these take a very long time — now you're not just wasting your own time, but everyone else's too!&lt;/p&gt;
&lt;p&gt;As with everything else in lean, we prefer to split work items at the last responsible moment. So the first thing a software developer should do before starting to implement a new work item is to think hard about possible ways of splitting the work up in smaller pieces. Ideally, you find ways to split the task up that make parallelisation possible.&lt;/p&gt;
&lt;p&gt;Maybe some of the work items even end up being thrown back into the backlog. Work items getting bloated with unnecessary bells and whistles on their way from the backlog to "In Progress" is not exactly unheard of.&lt;/p&gt;
&lt;p&gt;In my experience, a reason for having large work items is the &lt;strong&gt;reluctancy to release half-baked features&lt;/strong&gt;. Working in very small batches inevitably means that the first iterations of a new feature will be very rough. Maybe validation is lacking or there is no error handling.&lt;/p&gt;
&lt;p&gt;The way to work around this is to get very friendly with the concept of &lt;a href="https://martinfowler.com/articles/feature-toggles.html"&gt;feature toggles&lt;/a&gt;. This way, you can provide value to &lt;strong&gt;some&lt;/strong&gt; of your downstream customers, even if the end customer is oblivious to the feature's existence. Your tester can have a go at breaking the feature, for instance, or your UX designer can provide feedback.&lt;/p&gt;
&lt;p&gt;Big bang deployments are the source of many software engineering horror stories. Feature toggles help here as well since they are great for uncovering issues that might arise from deploying a feature to production. One example would be a feature whose performance relies on a cache being warm, something which can be hard to simulate accurately in a test environment. Once the feature goes live to end users, it has already been deployed behind a feature flag and monitored by the development team, which should have made any performance issues visible early on.&lt;/p&gt;
&lt;h4&gt;&lt;a href="#nofeaturebranches" id="nofeaturebranches"&gt;&lt;/a&gt;#NoFeatureBranches?&lt;/h4&gt;
&lt;p&gt;The idea that work should be completed in small batches and deployed frequently, using feature toggles, excludes us from using long-lived feature branches.&lt;/p&gt;
&lt;p&gt;I can't say I'd miss them. Even with just a few developers, it's easy to waste lots of time resolving merge conflicts, keeping track of which branch has which features on them and so on. Before long, you end up basing feature branches on other feature branches that are themselves still in progress, because you rely on some part of the functionality. You better hope that the code review of the base branch doesn't bring any big changes!&lt;/p&gt;
&lt;p&gt;The longest-running branches I usually see are ones that include massive refactorings of some key functionality. This seems to be something that we would absolutely &lt;strong&gt;not&lt;/strong&gt; want to keep in limbo any longer than necessary, but building up to a big-bang merge takes time. An alternative for these refactorings is to &lt;a href="https://martinfowler.com/bliki/BranchByAbstraction.html"&gt;branch by abstraction&lt;/a&gt; instead.&lt;/p&gt;
&lt;p&gt;Code reviews are probably the only thing that I think feature branches have going for them. Some possible solutions to consider:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Do code review in small batches as well, &lt;em&gt;aka&lt;/em&gt; pair programming.&lt;/li&gt;
&lt;li&gt;Review commits after they've been merged to master.&lt;/li&gt;
&lt;li&gt;Do reviews a committee fashion, focusing on the most critical bits of code.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href="#conclusion" id="conclusion"&gt;&lt;/a&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;Lean software development is about eliminating waste. Making handovers go smoothly certainly makes work flow better, but as with anything, we should strive to continue improving. A handover that never needs to happen is the most efficient handover there is.&lt;/p&gt;
&lt;/div&gt;&lt;div&gt;&lt;a href="/"&gt;Back&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="footer"&gt;&lt;p&gt;&amp;copy; 2015-2018 Johannes Staffans&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/html&gt;</content><author><name>Johannes Staffans</name></author><category term="agile"></category><category term="team"></category><category term="flow"></category><category term="lean"></category></entry><entry><id>urn:uuid:21baeb20-e717-47ea-9309-9f7c15e42618</id><title>A whiff of data science in Clojure</title><link href="https://jstaffans.github.io/posts/2017-11-14-clojure-data-science.html" type="text/html" title="A whiff of data science in Clojure" rel="alternate"></link><published>2017-11-14T00:00:00Z</published><updated>2017-11-14T00:00:00Z</updated><content type="html" xml:base="https://jstaffans.github.io/posts/2017-11-14-clojure-data-science.html">&lt;!DOCTYPE html&gt;
&lt;html&gt;&lt;head&gt;&lt;meta charset="utf-8"&gt;&lt;meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible"&gt;&lt;meta content="width=device-width, initial-scale=1, maximum-scale=1" name="viewport"&gt;&lt;meta content="Johannes Staffans" itemprop="author" name="author"&gt;&lt;title&gt;Johannes Staffans - A whiff of data science in Clojure&lt;/title&gt;&lt;link href="https://fonts.googleapis.com/css?family=Merriweather:400,700|Open+Sans:400,700" rel="stylesheet"&gt;&lt;link href="/styles/main.css" rel="stylesheet" type="text/css"&gt;&lt;/head&gt;&lt;div&gt;&lt;div class="header"&gt;&lt;div class="header__content clearfix"&gt;&lt;div class="sm-col sm-col-8"&gt;&lt;div&gt;personal website and blog of&lt;/div&gt;&lt;h1 class="header__headline"&gt;&lt;a href="/"&gt;Johannes Staffans&lt;/a&gt;&lt;/h1&gt;&lt;/div&gt;&lt;div class="sm-col flex-column"&gt;&lt;div&gt;&lt;a href="/"&gt;posts&lt;/a&gt;&lt;span&gt; &amp;middot; &lt;/span&gt;&lt;a href="/pages/about.html"&gt;about&lt;/a&gt;&lt;/div&gt;&lt;div class="pt1"&gt;elsewhere&lt;/div&gt;&lt;div&gt;&lt;a href="https://github.com/jstaffans"&gt;github&lt;/a&gt;&lt;span&gt; &amp;middot; &lt;/span&gt;&lt;a href="https://www.linkedin.com/in/jstaffans"&gt;linkedin&lt;/a&gt;&lt;span&gt; &amp;middot; &lt;/span&gt;&lt;a href="https://twitter.com/jstaffans"&gt;@jstaffans&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="clearfix"&gt;&lt;svg class="left border-triangle" version="1.1" xmlns="http://www.w3.org/2000/svg"&gt;&lt;polygon class="mask" points="0,0 30,0 30,30 0,30"&gt;&lt;/polygon&gt;&lt;polygon points="0,15 30,0 30,30"&gt;&lt;/polygon&gt;&lt;/svg&gt;&lt;svg class="right border-triangle" version="1.1" xmlns="http://www.w3.org/2000/svg"&gt;&lt;polygon class="mask" points="0,0 30,0 30,30 0,30"&gt;&lt;/polygon&gt;&lt;polygon points="30,15 0,30 0,0"&gt;&lt;/polygon&gt;&lt;/svg&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="container"&gt;&lt;div&gt;&lt;div class="flex items-baseline justify-between"&gt;&lt;h2&gt;A whiff of data science in Clojure&lt;/h2&gt;&lt;div&gt;&lt;span&gt;14.11.2017&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;p&gt;As part of learning more about applied statistics, I decided to trawl around the &lt;a href="http://www.hri.fi/en/"&gt;Helsinki Region Infoshare&lt;/a&gt; open data portal for interesting data sets to analyse. I also took the opportunity to familiarise myself with &lt;a href="gorilla-repl.org"&gt;Gorilla REPL&lt;/a&gt;, a  Clojure take on notebook-style programming made popular for data science by IPython notebooks.&lt;/p&gt;
&lt;p&gt;The data set I picked is a customer satisfaction survey for a youth services bureau. Feedback is collected via a terminal with four buttons, ranging from a sad smiley to a happy one. The question asked is "how happy are with the services of the youth services bureau today"? The question &lt;strong&gt;I&lt;/strong&gt; ask is whether customer happiness depends on the time of the day.&lt;/p&gt;
&lt;p&gt;Gorilla REPL comes with a handy online viewer (although it'd be even handier if Github would support Gorilla REPL notebooks natively, as it does IPython and Jupyter notebooks). You can check out the rest of the story and the results of my analysis &lt;a href="http://viewer.gorilla-repl.org/view.html?source=github&amp;amp;user=jstaffans&amp;amp;repo=happy-or-not&amp;amp;path=src/happy_or_not/repl.clj"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;div&gt;&lt;a href="/"&gt;Back&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="footer"&gt;&lt;p&gt;&amp;copy; 2015-2018 Johannes Staffans&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/html&gt;</content><author><name>Johannes Staffans</name></author><category term="data"></category><category term="science"></category><category term="clojure"></category><category term="gorilla"></category><category term="repl"></category></entry><entry><id>urn:uuid:7affbd65-5cb6-4e62-8f06-0ca42962f1a3</id><title>The handover</title><link href="https://jstaffans.github.io/posts/2017-09-08-the-handover.html" type="text/html" title="The handover" rel="alternate"></link><published>2017-09-08T00:00:00Z</published><updated>2017-09-08T00:00:00Z</updated><content type="html" xml:base="https://jstaffans.github.io/posts/2017-09-08-the-handover.html">&lt;!DOCTYPE html&gt;
&lt;html&gt;&lt;head&gt;&lt;meta charset="utf-8"&gt;&lt;meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible"&gt;&lt;meta content="width=device-width, initial-scale=1, maximum-scale=1" name="viewport"&gt;&lt;meta content="Johannes Staffans" itemprop="author" name="author"&gt;&lt;title&gt;Johannes Staffans - The handover&lt;/title&gt;&lt;link href="https://fonts.googleapis.com/css?family=Merriweather:400,700|Open+Sans:400,700" rel="stylesheet"&gt;&lt;link href="/styles/main.css" rel="stylesheet" type="text/css"&gt;&lt;/head&gt;&lt;div&gt;&lt;div class="header"&gt;&lt;div class="header__content clearfix"&gt;&lt;div class="sm-col sm-col-8"&gt;&lt;div&gt;personal website and blog of&lt;/div&gt;&lt;h1 class="header__headline"&gt;&lt;a href="/"&gt;Johannes Staffans&lt;/a&gt;&lt;/h1&gt;&lt;/div&gt;&lt;div class="sm-col flex-column"&gt;&lt;div&gt;&lt;a href="/"&gt;posts&lt;/a&gt;&lt;span&gt; &amp;middot; &lt;/span&gt;&lt;a href="/pages/about.html"&gt;about&lt;/a&gt;&lt;/div&gt;&lt;div class="pt1"&gt;elsewhere&lt;/div&gt;&lt;div&gt;&lt;a href="https://github.com/jstaffans"&gt;github&lt;/a&gt;&lt;span&gt; &amp;middot; &lt;/span&gt;&lt;a href="https://www.linkedin.com/in/jstaffans"&gt;linkedin&lt;/a&gt;&lt;span&gt; &amp;middot; &lt;/span&gt;&lt;a href="https://twitter.com/jstaffans"&gt;@jstaffans&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="clearfix"&gt;&lt;svg class="left border-triangle" version="1.1" xmlns="http://www.w3.org/2000/svg"&gt;&lt;polygon class="mask" points="0,0 30,0 30,30 0,30"&gt;&lt;/polygon&gt;&lt;polygon points="0,15 30,0 30,30"&gt;&lt;/polygon&gt;&lt;/svg&gt;&lt;svg class="right border-triangle" version="1.1" xmlns="http://www.w3.org/2000/svg"&gt;&lt;polygon class="mask" points="0,0 30,0 30,30 0,30"&gt;&lt;/polygon&gt;&lt;polygon points="30,15 0,30 0,0"&gt;&lt;/polygon&gt;&lt;/svg&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="container"&gt;&lt;div&gt;&lt;div class="flex items-baseline justify-between"&gt;&lt;h2&gt;The handover&lt;/h2&gt;&lt;div&gt;&lt;span&gt;08.09.2017&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;p&gt;The usual wisdom in software development is that a co-located team made up of full-time developers working together on a single project will perform best. But how many teams are there like that? I'd like to instead consider a team much more like the ones that I see around me — part-time team members, often distributed, and working on multiple projects at once. What can a team like that do to improve its performance?&lt;/p&gt;
&lt;p&gt;To break things down a bit, let's look at the efforts of a software development team from three, somewhat arbitrary angles:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Flow&lt;/strong&gt; — how steady is the progress of the team?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Knowledge&lt;/strong&gt; — does everyone on the team know what they need to know in order to do their jobs?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Process&lt;/strong&gt; — does the team strive to improve? Is its efforts supported by the rest of the organisation?&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href="#flow" id="flow"&gt;&lt;/a&gt;Flow&lt;/h3&gt;
&lt;p&gt;Both for individual developers and for the team as a whole, getting into the "zone" and achieving a steady flow is important. Unfortunately, there are all too many ways for the flow to be disturbed.&lt;/p&gt;
&lt;p&gt;For the individual developer, not knowing what the next task is is for example a sure way of breaking the flow, as is being interrupted by unnecessary notifications or people stopping by with requests or questions.&lt;/p&gt;
&lt;p&gt;On a project level, let's assume we're doing something like Scrum or Kanban and consider the flow of issues (let's call them stories) from the Product Backlog through whatever "In Progress" columns there may be to a final "Done" state. A steady flow here would mean that a story spends only a &lt;strong&gt;short amount of time in every state&lt;/strong&gt;, rapidly moving from one state to the next as it is being worked on.&lt;/p&gt;
&lt;p&gt;What if a developer, who has Thursday and Friday off, picks up a story on Wednesday morning? Depending on the effort involved, there might be some hope of finishing it the same day. Usually, though, squeezing design, implementation and code review into a single day rarely works. So probably it'll take until the following week, when the engineer is back at work, before the story can be finished. During the days that the developer is away, the story remains in limbo.&lt;/p&gt;
&lt;p&gt;Recognising this as a problem, the developer would do best not to pick up any stories on his or her own the day before leaving, but instead &lt;strong&gt;pair up&lt;/strong&gt; with another engineer. This is often the best way of ensuring smooth progress of a task.&lt;/p&gt;
&lt;p&gt;If pairing is not an option, there needs to be a &lt;strong&gt;handover&lt;/strong&gt;. On my team, the developer who started the work on any given story is expected to open a &lt;strong&gt;work-in-progress pull request&lt;/strong&gt; and add detailed information about the state of the implementation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;High-level description&lt;/li&gt;
&lt;li&gt;Free-form text is good&lt;/li&gt;
&lt;li&gt;Bullet points are better&lt;/li&gt;
&lt;li&gt;References to further descriptions and acceptance criteria (e.g. a link to an issue in your issue tracker)&lt;/li&gt;
&lt;li&gt;Detailed todo list in the form of checkboxes, including items that have already been implemented&lt;/li&gt;
&lt;li&gt;How-to-test instructions, screenshots, animated GIFs displaying UI behavior&lt;/li&gt;
&lt;li&gt;Any technical debt incurred or items that need to be postponed&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;An example of a handover-friendly pull request would be:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Add password reminder functionality
===================================

Widget where user can enter a registered e-mail address and press 'Reset password'.
The user will receive an e-mail. See [JIRA link], UI mockups [here].

## TODO

- [x] Backend (password reset API route, validation)
- [x] Frontend routes
- [x] Frontend component: enter e-mail
- [ ] Frontend component: landing page
- [ ] Error handling
- [ ] Mail template
- [ ] Mail sending
- [ ] Integration test

## How to test

Open browser to http://localhost:8000/reset-password, enter registered e-mail address. 

## Later

Metrics gathering (how often do users reset passwords?)

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It's also important to keep the pull request focused on the story at hand because it is all too easy to get caught up in unrelated, small fixes and refactorings when implementing a story. &lt;strong&gt;If something doesn't relate directly to the task at hand it should be in a separate pull request!&lt;/strong&gt; I'd suggest getting friendly with Git rebasing and cherry-picking, because often you'll realise you're working on something unrelated only when your halfway done with it.&lt;/p&gt;
&lt;h3&gt;&lt;a href="#knowledge" id="knowledge"&gt;&lt;/a&gt;Knowledge&lt;/h3&gt;
&lt;p&gt;On a team where handovers are frequent, you cannot have knowledge silos, because that will put a limit on who work can be handed over to. We've applied several strategies to avoid knowledge silos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For devops work, we rely heavily on the principle of &lt;strong&gt;"infrastructure as code"&lt;/strong&gt;. All our cloud resources are for example documented in templates like CloudFormation or Terraform, and deployments are scripted.&lt;/li&gt;
&lt;li&gt;Cross-code-reviewing: request review from an engineer that is not too familiar with the area of the system your code touches and take the opportunity to explain it in more detail.&lt;/li&gt;
&lt;li&gt;Treat documentation as a first-class citizen.&lt;/li&gt;
&lt;li&gt;Lots of pairing and design discussions.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Besides knowledge about the system the team is building, team members also need to be on the same page with regards to the development process and the interfaces to the rest of the organisation. If for example a new staging system is set up, team members need to know its purpose and how to deploy it. If an important customer demo is coming up, the team might need to know not to mess with a particular test system, and so forth. Our solution is to have a &lt;strong&gt;dedicated &lt;code&gt;#announcements&lt;/code&gt; Slack channel&lt;/strong&gt;, which is only for important updates and where discussion on those topics is forbidden (we have other channels for that). A team member coming back from a few days off can quickly scan this channel to get up to speed.&lt;/p&gt;
&lt;h3&gt;&lt;a href="#process" id="process"&gt;&lt;/a&gt;Process&lt;/h3&gt;
&lt;p&gt;A &lt;strong&gt;working retrospective practice&lt;/strong&gt; is important for the team to be able to improve. In our case, the retrospective, which we do at two-week intervals, is one of the few times that all team members meet in the same room. We try very hard to keep the discussion focused on things that are actionable to us, and not surprisingly, we've come to see the handover as one of the most important things to "get right". If a handover goes badly for some reason, we can be sure that it will be discussed in the retrospective, and that some action will come out of it.&lt;/p&gt;
&lt;p&gt;One technique that we've found useful at the start of new projects is &lt;strong&gt;&lt;a href="http://jstaffans.github.io/posts/2017-02-15-mob-programming.html"&gt;mob programming&lt;/a&gt;&lt;/strong&gt;. By building out the foundations of the project in a group setting, knowledge silos can be avoided from the get-go. It's also a great way of getting to know your team mates better — after all, you're going to rely on them heavily!&lt;/p&gt;
&lt;h2&gt;&lt;a href="#conclusion" id="conclusion"&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Working in an interdependent fashion is part of what jells a team together. For a team consisting mostly of part-time engineers, interdependency often comes in the form of handovers. Instead of dumping a PR as a hot potato in your teammate's lap, spend a little bit of time communicating what needs to done, what parts are already in place, what can be done later and so on — your teammates will thank you for it! Promote co-ownership of the code, so that no part of it is known and understood only by a single team member.&lt;/p&gt;
&lt;/div&gt;&lt;div&gt;&lt;a href="/"&gt;Back&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="footer"&gt;&lt;p&gt;&amp;copy; 2015-2018 Johannes Staffans&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/html&gt;</content><author><name>Johannes Staffans</name></author><category term="agile"></category><category term="teamwork"></category><category term="part-time teams"></category></entry><entry><id>urn:uuid:fabcc8b46-f711-4191-9c40-39c868c17c32</id><title>Mob programming</title><link href="https://jstaffans.github.io/posts/2017-02-15-mob-programming.html" type="text/html" title="Mob programming" rel="alternate"></link><published>2017-02-15T00:00:00Z</published><updated>2017-02-15T00:00:00Z</updated><content type="html" xml:base="https://jstaffans.github.io/posts/2017-02-15-mob-programming.html">&lt;!DOCTYPE html&gt;
&lt;html&gt;&lt;head&gt;&lt;meta charset="utf-8"&gt;&lt;meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible"&gt;&lt;meta content="width=device-width, initial-scale=1, maximum-scale=1" name="viewport"&gt;&lt;meta content="Johannes Staffans" itemprop="author" name="author"&gt;&lt;title&gt;Johannes Staffans - Mob programming&lt;/title&gt;&lt;link href="https://fonts.googleapis.com/css?family=Merriweather:400,700|Open+Sans:400,700" rel="stylesheet"&gt;&lt;link href="/styles/main.css" rel="stylesheet" type="text/css"&gt;&lt;/head&gt;&lt;div&gt;&lt;div class="header"&gt;&lt;div class="header__content clearfix"&gt;&lt;div class="sm-col sm-col-8"&gt;&lt;div&gt;personal website and blog of&lt;/div&gt;&lt;h1 class="header__headline"&gt;&lt;a href="/"&gt;Johannes Staffans&lt;/a&gt;&lt;/h1&gt;&lt;/div&gt;&lt;div class="sm-col flex-column"&gt;&lt;div&gt;&lt;a href="/"&gt;posts&lt;/a&gt;&lt;span&gt; &amp;middot; &lt;/span&gt;&lt;a href="/pages/about.html"&gt;about&lt;/a&gt;&lt;/div&gt;&lt;div class="pt1"&gt;elsewhere&lt;/div&gt;&lt;div&gt;&lt;a href="https://github.com/jstaffans"&gt;github&lt;/a&gt;&lt;span&gt; &amp;middot; &lt;/span&gt;&lt;a href="https://www.linkedin.com/in/jstaffans"&gt;linkedin&lt;/a&gt;&lt;span&gt; &amp;middot; &lt;/span&gt;&lt;a href="https://twitter.com/jstaffans"&gt;@jstaffans&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="clearfix"&gt;&lt;svg class="left border-triangle" version="1.1" xmlns="http://www.w3.org/2000/svg"&gt;&lt;polygon class="mask" points="0,0 30,0 30,30 0,30"&gt;&lt;/polygon&gt;&lt;polygon points="0,15 30,0 30,30"&gt;&lt;/polygon&gt;&lt;/svg&gt;&lt;svg class="right border-triangle" version="1.1" xmlns="http://www.w3.org/2000/svg"&gt;&lt;polygon class="mask" points="0,0 30,0 30,30 0,30"&gt;&lt;/polygon&gt;&lt;polygon points="30,15 0,30 0,0"&gt;&lt;/polygon&gt;&lt;/svg&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="container"&gt;&lt;div&gt;&lt;div class="flex items-baseline justify-between"&gt;&lt;h2&gt;Mob programming&lt;/h2&gt;&lt;div&gt;&lt;span&gt;15.02.2017&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;p&gt;Last week, my team and I had the need to re-focus our priorities and put our joint efforts into pushing a new project forward. Traditionally, we have had a bit of work segregation going on with individuals and pairs working on smaller sub-projects, but the business now needed something different. Since we were all going to work on the same thing, which was new to most of us, we decided that doing a few days of &lt;a href="http://mobprogramming.org/"&gt;mob programming&lt;/a&gt; would be a good way to kick things off.&lt;/p&gt;
&lt;p&gt;Mob programming is a concept that none of us had any prior experience with — I had heard about it in passing, but that was about it. We are however used to working in pairs and have a pretty well-functioning team without any derailers, which made things a lot easier.&lt;/p&gt;
&lt;h2&gt;&lt;a href="#motivation" id="motivation"&gt;&lt;/a&gt;Motivation&lt;/h2&gt;
&lt;p&gt;The primary motivation for having all engineers work tightly together was to &lt;strong&gt;develop a shared understanding&lt;/strong&gt; of the problem domain and to enable us to later split up into pairs and work on smaller tasks while still having a good general overview. "The mob", as we rather quickly started referring to ourselves as, could &lt;strong&gt;reach consensus&lt;/strong&gt; on important technical architecture and project setup issues early on.&lt;/p&gt;
&lt;p&gt;Just as important as getting ahead with the engineering effort itself was what it did for team morale. I think that a hallmark of an effective team is that its members work in an interdependent fashion — in such a setting, each individual is aware of the other team members' areas of expertise and skillset and rely upon the support of colleagues to effectively complete their tasks¹. Both mob and pair programming foster collaboration and mutual learning.&lt;/p&gt;
&lt;h2&gt;&lt;a href="#the-setup" id="the-setup"&gt;&lt;/a&gt;The setup&lt;/h2&gt;
&lt;p&gt;We booked a meeting room and re-arranged the tables and chairs to face in one direction and set up a projector to mirror a laptop screen onto the wall. We had a few different keyboards to cater to people's preferred layouts. A nice touch was providing hand desinfectant, since we would all be sharing a keyboard and mouse.&lt;/p&gt;
&lt;p&gt;We used a timer to ping us to rotate the "driver" every twenty minutes.&lt;/p&gt;
&lt;h2&gt;&lt;a href="#day-one-requirements" id="day-one-requirements"&gt;&lt;/a&gt;Day one: requirements&lt;/h2&gt;
&lt;p&gt;The project was new, but still based on some previous work that had been going on within the company as well as on extensive research that had been done previously by an individual on the team. We started things off by &lt;strong&gt;setting an agenda for the day&lt;/strong&gt; — present the research and previous art, determine some initial high-level requirements, identify technical risks and so on. We quickly decided that we would &lt;strong&gt;not&lt;/strong&gt; do any programming the first day, so we didn't do any driver rotation either. One team member just acted as a secretary and took down notes in a shared document.&lt;/p&gt;
&lt;p&gt;Even though we didn't do any coding, having the whole team together with a clear agenda worked really well towards building up understanding for the problem domain.&lt;/p&gt;
&lt;h2&gt;&lt;a href="#day-two" id="day-two"&gt;&lt;/a&gt;Day two&lt;/h2&gt;
&lt;p&gt;In the morning, we set up a goal for the day — to get a basic project setup running and deployed on AWS. We chose a Python/Django-based backend because of familiarity with that stack, but included more modern, Webpack-based frontend asset tooling than what usually comes with Django (we anticipate the need to move to a single-page application soon-ish, and Django's own static asset handling isn't very modern or flexible).&lt;/p&gt;
&lt;p&gt;As we started programming, it didn't take long for suggestions for key combinations, shortcuts and terminal tricks started flying through the room. The driver usually didn't contribute much to the discussion, instead just acting as the conduit for typing things out. We frequently paused in order for the driver to explain something he had just done, though — there were frequent comments along the line of "I had no idea you could do that with PyCharm!".&lt;/p&gt;
&lt;p&gt;By the end of the day, we had reached our goal — a service running on AWS, with everything up and ready for real implementation work to commence the following day.&lt;/p&gt;
&lt;h2&gt;&lt;a href="#day-three" id="day-three"&gt;&lt;/a&gt;Day three&lt;/h2&gt;
&lt;p&gt;The agenda for the day was to tackle one of the areas of the system that needed especially careful architecting and carried considerable technical risk with it. We spent some time in the morning brainstorming ideas on a whiteboard, identifying pros and cons with each approach and finally settling on one of them.&lt;/p&gt;
&lt;p&gt;With everyone on the same page with regards to what the solution we were striving for was, it felt like we later breezed through the actual programming bit. With so many bright people in the same room, it was guaranteed that at least someone was on the ball, knowing exactly what the next step should be in order to achieve the solution we had sketched out earlier.&lt;/p&gt;
&lt;p&gt;At one point in the day, we had a lengthy discussion with the person who was going to play the role of product owner. Normally, that discussion would probably have taken place between only one or two developers and the PO, but now we were all together in the same room. Since we had developed a shared understanding of the problem domain from a technical viewpoint, we could all speak confidently about what the team's standpoint were on the issues that we discussed. It was almost as if we could read each others' minds!&lt;/p&gt;
&lt;p&gt;We achieved our goal and did a short retrospective about the experience doing mob programming. Everyone was very happy with the experience. One team member suggested that the mob programming format should be the &lt;em&gt;default&lt;/em&gt; from now on and we should split up only if we really have to!&lt;/p&gt;
&lt;h2&gt;&lt;a href="#conclusion" id="conclusion"&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;A highly effective team is one that collaborates well. Mob programming is maybe the most collaborative way of working for a software development team and has positive repercussions long after the mob has disbanded (if it ever does). I'd especially recommend it during the start of a new project and with a new team, so that everyone gets to know each others' strengths and ways of working better.&lt;/p&gt;
&lt;p&gt;One caveat is that the rest of the organisation may feel left in the dark if the mob fails to communicate its process and its goals to others. In the worst case, the mob may become seen as a dangerous clique that is derailing the company and needs to be dissolved immediately. The mob needs to communicate effectively to others within the organisation to prevent this, for example by posting daily status updates.&lt;/p&gt;
&lt;/div&gt;&lt;div&gt;&lt;a href="/"&gt;Back&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="footer"&gt;&lt;p&gt;&amp;copy; 2015-2018 Johannes Staffans&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/html&gt;</content><author><name>Johannes Staffans</name></author><category term="team"></category><category term="engineering"></category><category term="agile"></category></entry><entry><id>urn:uuid:74f22045-a456-43fd-b638-734c3dd30d6d</id><title>Event stream processing: backfills</title><link href="https://jstaffans.github.io/posts/2016-11-05-backfills.html" type="text/html" title="Event stream processing: backfills" rel="alternate"></link><published>2016-11-05T00:00:00Z</published><updated>2016-11-05T00:00:00Z</updated><content type="html" xml:base="https://jstaffans.github.io/posts/2016-11-05-backfills.html">&lt;!DOCTYPE html&gt;
&lt;html&gt;&lt;head&gt;&lt;meta charset="utf-8"&gt;&lt;meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible"&gt;&lt;meta content="width=device-width, initial-scale=1, maximum-scale=1" name="viewport"&gt;&lt;meta content="Johannes Staffans" itemprop="author" name="author"&gt;&lt;title&gt;Johannes Staffans - Event stream processing: backfills&lt;/title&gt;&lt;link href="https://fonts.googleapis.com/css?family=Merriweather:400,700|Open+Sans:400,700" rel="stylesheet"&gt;&lt;link href="/styles/main.css" rel="stylesheet" type="text/css"&gt;&lt;/head&gt;&lt;div&gt;&lt;div class="header"&gt;&lt;div class="header__content clearfix"&gt;&lt;div class="sm-col sm-col-8"&gt;&lt;div&gt;personal website and blog of&lt;/div&gt;&lt;h1 class="header__headline"&gt;&lt;a href="/"&gt;Johannes Staffans&lt;/a&gt;&lt;/h1&gt;&lt;/div&gt;&lt;div class="sm-col flex-column"&gt;&lt;div&gt;&lt;a href="/"&gt;posts&lt;/a&gt;&lt;span&gt; &amp;middot; &lt;/span&gt;&lt;a href="/pages/about.html"&gt;about&lt;/a&gt;&lt;/div&gt;&lt;div class="pt1"&gt;elsewhere&lt;/div&gt;&lt;div&gt;&lt;a href="https://github.com/jstaffans"&gt;github&lt;/a&gt;&lt;span&gt; &amp;middot; &lt;/span&gt;&lt;a href="https://www.linkedin.com/in/jstaffans"&gt;linkedin&lt;/a&gt;&lt;span&gt; &amp;middot; &lt;/span&gt;&lt;a href="https://twitter.com/jstaffans"&gt;@jstaffans&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="clearfix"&gt;&lt;svg class="left border-triangle" version="1.1" xmlns="http://www.w3.org/2000/svg"&gt;&lt;polygon class="mask" points="0,0 30,0 30,30 0,30"&gt;&lt;/polygon&gt;&lt;polygon points="0,15 30,0 30,30"&gt;&lt;/polygon&gt;&lt;/svg&gt;&lt;svg class="right border-triangle" version="1.1" xmlns="http://www.w3.org/2000/svg"&gt;&lt;polygon class="mask" points="0,0 30,0 30,30 0,30"&gt;&lt;/polygon&gt;&lt;polygon points="30,15 0,30 0,0"&gt;&lt;/polygon&gt;&lt;/svg&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="container"&gt;&lt;div&gt;&lt;div class="flex items-baseline justify-between"&gt;&lt;h2&gt;Event stream processing: backfills&lt;/h2&gt;&lt;div&gt;&lt;span&gt;05.11.2016&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;p&gt;During the last months I have been involved in developing an event processing pipeline based on Amazon Kinesis. This post is about different strategies for replaying or &lt;strong&gt;backfilling&lt;/strong&gt; events, to make up for lost events or a buggy stream worker implementation.&lt;/p&gt;
&lt;h3&gt;&lt;a href="#what-are-backfills" id="what-are-backfills"&gt;&lt;/a&gt;What are backfills?&lt;/h3&gt;
&lt;p&gt;The architecture of a Kinesis-based event pipeline is pretty simple. Events are sent to Kinesis from various clients and later processed by several worker components performing various tasks — in my case, backups, machine learning and persisting events to Redshift. A nice thing about Kinesis is that events are available for 24 hours after being sent, which means that when a worker crashes, it can be re-started and no events will be lost, as long as the downtime wasn't longer than the Kinesis 24 hour horizon. The worker will simply pick up the stream where it left off — a nice feature of the Amazon Kinesis Client Library!&lt;/p&gt;
&lt;p&gt;But of course, due to various reasons, it might happen that a worker is offline for more than 24 hours. Or you may notice a bug in the implementation of a worker which means that the results it has painstakingly refined from the event stream are wrong and need to be re-calculated.&lt;/p&gt;
&lt;p&gt;If we take the case of a buggy worker implementation, after the problem has been fixed, the worker now needs to be let loose on all old events and perform a re-calculation. The source of the old events are your event backups — Amazon provides a nice way to dump events from Kinesis to S3 via Kinesis Firehose, which is what we are using for backing up all Kinesis events, but there are other backup possibilities as well.&lt;/p&gt;
&lt;h3&gt;&lt;a href="#batch-or-online" id="batch-or-online"&gt;&lt;/a&gt;Batch or online?&lt;/h3&gt;
&lt;p&gt;Conceptually, there are two basic strategies of providing input to the worker that will perform the re-calculation: either as one big batch of events (maybe reading straight from the S3 backups),  or by backfilling the events through the event pipeline itself, which I'll call &lt;strong&gt;online&lt;/strong&gt; backfilling.&lt;/p&gt;
&lt;p&gt;I think the batch update approach has a lot going for it. It is simpler and involves less components. One drawback is however that the worker component needs to be set up with two distinct code paths: one on  which events are read from Kinesis and one where events are read from a file dump, e.g. in S3. I tend to be in favor of having less code paths in my code. If you instead set up your worker to be prepared for receiving backfilled events online, you can use the same infrastructure and code paths for the backfills as during normal operation.&lt;/p&gt;
&lt;h3&gt;&lt;a href="#distinguishing-backfilled-events" id="distinguishing-backfilled-events"&gt;&lt;/a&gt;Distinguishing backfilled events&lt;/h3&gt;
&lt;p&gt;Going with the online approach, we need a way of isolating the backfilled events, so that they aren't mistakenly re-read by other components in our event processing architecture. We only want to target a single worker component, namely the one that had a bug, for the backfill.&lt;/p&gt;
&lt;p&gt;We could imagine tagging indivdual events with some kind of metadata to let other components know that they should ignore it, because it is a backfill event that should only be processed by one particular worker. But it seems redundant to implement this filtering in each and every component. Why should every component need to care about a backfill being performed?&lt;/p&gt;
&lt;p&gt;I think the simplest approach is to set up a completely separate Kinesis stream just for the purpose of the backfill, which amounts to a couple of clicks in the AWS console. Ideally, the name of the Kinesis stream that the worker component reads events from is configured as an environment variable or similar — if that's the case, the worker can simply be re-started with an updated piece of configuration that causes it to read events from the backfill stream instead. When the backfill is done, just switch back over to the main stream. No events are lost, as long as you didn't spend more than 24 hours backfilling and not listening to the main stream!&lt;/p&gt;
&lt;h3&gt;&lt;a href="#other-considerations" id="other-considerations"&gt;&lt;/a&gt;Other considerations&lt;/h3&gt;
&lt;p&gt;In the online backfilling scenario, there needs to be something that writes the events to the backfill Kinesis stream. I ended up writing around 20 lines of Python that gets the event backup archives from S3 for a given date range and sends them off to Kinesis in batches of a few hundred events each. Care needs to be taken not to exceed Kinesis write limits!&lt;/p&gt;
&lt;h3&gt;&lt;a href="#conclusion" id="conclusion"&gt;&lt;/a&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;It's important to have a strategy in mind for backfilling events in a stream processing pipeline. The day will inevitabely come when a bug or extended downtime makes it necessary to replay events. Making it easy to switch components over from the main stream to a separate backfill stream enables replays with the least amount of extra code.&lt;/p&gt;
&lt;/div&gt;&lt;div&gt;&lt;a href="/"&gt;Back&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="footer"&gt;&lt;p&gt;&amp;copy; 2015-2018 Johannes Staffans&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/html&gt;</content><author><name>Johannes Staffans</name></author><category term="streams"></category><category term="stream processing"></category><category term="kinesis"></category><category term="events"></category></entry><entry><id>urn:uuid:3fbed48d-2bd8-4fb8-8470-73d658ea2b22</id><title>Learn to read with ClojureScript, part 2</title><link href="https://jstaffans.github.io/posts/2016-03-06-freq-words-2.html" type="text/html" title="Learn to read with ClojureScript, part 2" rel="alternate"></link><published>2016-03-06T00:00:00Z</published><updated>2016-03-06T00:00:00Z</updated><content type="html" xml:base="https://jstaffans.github.io/posts/2016-03-06-freq-words-2.html">&lt;!DOCTYPE html&gt;
&lt;html&gt;&lt;head&gt;&lt;meta charset="utf-8"&gt;&lt;meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible"&gt;&lt;meta content="width=device-width, initial-scale=1, maximum-scale=1" name="viewport"&gt;&lt;meta content="Johannes Staffans" itemprop="author" name="author"&gt;&lt;title&gt;Johannes Staffans - Learn to read with ClojureScript, part 2&lt;/title&gt;&lt;link href="https://fonts.googleapis.com/css?family=Merriweather:400,700|Open+Sans:400,700" rel="stylesheet"&gt;&lt;link href="/styles/main.css" rel="stylesheet" type="text/css"&gt;&lt;/head&gt;&lt;div&gt;&lt;div class="header"&gt;&lt;div class="header__content clearfix"&gt;&lt;div class="sm-col sm-col-8"&gt;&lt;div&gt;personal website and blog of&lt;/div&gt;&lt;h1 class="header__headline"&gt;&lt;a href="/"&gt;Johannes Staffans&lt;/a&gt;&lt;/h1&gt;&lt;/div&gt;&lt;div class="sm-col flex-column"&gt;&lt;div&gt;&lt;a href="/"&gt;posts&lt;/a&gt;&lt;span&gt; &amp;middot; &lt;/span&gt;&lt;a href="/pages/about.html"&gt;about&lt;/a&gt;&lt;/div&gt;&lt;div class="pt1"&gt;elsewhere&lt;/div&gt;&lt;div&gt;&lt;a href="https://github.com/jstaffans"&gt;github&lt;/a&gt;&lt;span&gt; &amp;middot; &lt;/span&gt;&lt;a href="https://www.linkedin.com/in/jstaffans"&gt;linkedin&lt;/a&gt;&lt;span&gt; &amp;middot; &lt;/span&gt;&lt;a href="https://twitter.com/jstaffans"&gt;@jstaffans&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="clearfix"&gt;&lt;svg class="left border-triangle" version="1.1" xmlns="http://www.w3.org/2000/svg"&gt;&lt;polygon class="mask" points="0,0 30,0 30,30 0,30"&gt;&lt;/polygon&gt;&lt;polygon points="0,15 30,0 30,30"&gt;&lt;/polygon&gt;&lt;/svg&gt;&lt;svg class="right border-triangle" version="1.1" xmlns="http://www.w3.org/2000/svg"&gt;&lt;polygon class="mask" points="0,0 30,0 30,30 0,30"&gt;&lt;/polygon&gt;&lt;polygon points="30,15 0,30 0,0"&gt;&lt;/polygon&gt;&lt;/svg&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="container"&gt;&lt;div&gt;&lt;div class="flex items-baseline justify-between"&gt;&lt;h2&gt;Learn to read with ClojureScript, part 2&lt;/h2&gt;&lt;div&gt;&lt;span&gt;06.03.2016&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;p&gt;Almost a year ago, I &lt;a href="http://jstaffans.github.io/2015/05/25/freq-words.html"&gt;wrote about implementing a learning aid for children in elementary school using ClojureScript&lt;/a&gt;. I finally got around to finishing this project now and decided to write a few words about the experience.&lt;/p&gt;
&lt;p&gt;For the first iteration, I had decided to use Boot, mostly due to the simpler integration of things like SASS compilation into the development workflow. I didn't get very far with the first version of the application until it got put on the back burner, but a few weeks ago, I decided I should really finish the project and save all those children from having to look at my Flash application from 2007.&lt;/p&gt;
&lt;p&gt;The project was still on a year-old version of ClojureScript (ancient in ClojureScript terms!) and an old version of Boot. When I tried to fire the app up, nothing worked!&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;clojure.lang.Compiler$CompilerException: java.lang.RuntimeException:
  No such var: cljs.repl/IParseError, compiling:(cemerick/piggieback.clj:89:1)
  java.lang.RuntimeException: No such var: cljs.repl/IParseError
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I tried looking over some more recent Boot/Reagent examples to learn what I should be doing, but couldn't really figure anything out. Giving up, I started a new project from scratch using Leiningen and Figwheel, using the &lt;a href="https://github.com/gadfly361/reagent-figwheel"&gt;reagent-figwheel template&lt;/a&gt;. Oh the joy of greenfields development!&lt;/p&gt;
&lt;h3&gt;&lt;a href="#re-frame" id="re-frame"&gt;&lt;/a&gt;Re-frame&lt;/h3&gt;
&lt;p&gt;For the new version, I decided to try out &lt;a href="https://github.com/Day8/re-frame"&gt;re-frame&lt;/a&gt;, an Elm-inspired, FRP-ish framework for Reagent applications. Working within the confines of a well-defined framework turned out to be a big win for me. I agree with Malcolm Sparks about the &lt;a href="https://skillsmatter.com/skillscasts/6718-introduction-to-clojurescript-reagent-and-reframe"&gt;advantage of having a box to put your stuff into&lt;/a&gt; when you're getting used to developing in a new environment — for me, in this case, frontend development with Reagent. You should watch that talk, it's pretty good!&lt;/p&gt;
&lt;p&gt;Of course, re-frame is no magic bullet. I put a lot of thought into for example what my state model should look like. In the end, I found it best to keep only the things that really change in the app state atom and derive the rest from that. As an example, the application I built has a number of groups of words that the user can select for practice:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight"&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="s"&gt;"att"&lt;/span&gt;, &lt;span class="s"&gt;"den"&lt;/span&gt;, &lt;span class="s"&gt;"ett"&lt;/span&gt;, &lt;span class="s"&gt;" där"&lt;/span&gt;, &lt;span class="s"&gt;"fin"&lt;/span&gt;, &lt;span class="s"&gt;"han"&lt;/span&gt; &lt;span class="nv"&gt;...&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
   &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"mitt"&lt;/span&gt;, &lt;span class="s"&gt;"in"&lt;/span&gt;, &lt;span class="s"&gt;"kom"&lt;/span&gt;, &lt;span class="s"&gt;"dem"&lt;/span&gt;, &lt;span class="s"&gt;"mig"&lt;/span&gt;, &lt;span class="s"&gt;"dig"&lt;/span&gt; &lt;span class="nv"&gt;...&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
   &lt;span class="nv"&gt;...&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To keep track of the current words to show, I could have put the entire word array into the app state and pushed the currently selected group via a subscription to the view component. But as the actual words constitute just static data, I instead just pushed a &lt;code&gt;:current-group&lt;/code&gt; key to the view and let the view component do a lookup of the actual words to show based on that. Re-frame stresses to keep view components dumb; I think a a simple lookup is dumb enough!&lt;/p&gt;
&lt;h3&gt;&lt;a href="#figwheel" id="figwheel"&gt;&lt;/a&gt;Figwheel&lt;/h3&gt;
&lt;p&gt;I had some problems with Figwheel reloading at first. I used &lt;a href="https://github.com/gf3/secretary"&gt;secretary&lt;/a&gt; for routing, and whereas the root page reloads fine, reloading while on a route (&lt;code&gt;/#/group/4&lt;/code&gt; for example) would result in a blank page. I could fix that by removing the Fighweel reloading configuration from the Leiningen project file and putting it in a &lt;code&gt;dev&lt;/code&gt; namespace instead — it turns out that you shouldn't let Figwheel reset the whole app, just re-mount the root node.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;core&lt;/code&gt; namespace has a function that performs initialisation of the app and mounts the root node:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defn &lt;/span&gt;&lt;span class="nv"&gt;mount-root&lt;/span&gt;
  &lt;span class="p"&gt;[]&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;reagent/render&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;freq-words-2.views/app&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;.getElementById&lt;/span&gt; &lt;span class="nv"&gt;js/document&lt;/span&gt; &lt;span class="s"&gt;"app"&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defn &lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="ss"&gt;:export&lt;/span&gt; &lt;span class="nv"&gt;main&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;dispatch&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:initialise-db&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;routes/init&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;mount-root&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The project file had this setting:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;;; project.clj:&lt;/span&gt;

&lt;span class="c1"&gt;;; reload whole app: causes blank pages when reloading route&lt;/span&gt;
&lt;span class="ss"&gt;:figwheel&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:on-jsload&lt;/span&gt; &lt;span class="s"&gt;"freq-words-2.core/main"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The replacement for the above:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;;; dev.cljs:&lt;/span&gt;

&lt;span class="c1"&gt;;; only re-mount root on reload&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;figwheel/watch-and-reload&lt;/span&gt;
   &lt;span class="ss"&gt;:websocket-url&lt;/span&gt; &lt;span class="s"&gt;"ws://localhost:3449/figwheel-ws"&lt;/span&gt;
   &lt;span class="ss"&gt;:jsload-callback&lt;/span&gt; &lt;span class="nv"&gt;mount-root&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Check out the [sources] &lt;a href="https://github.com/jstaffans/freq-words-2"&gt;9&lt;/a&gt; to see the whole setup.&lt;/p&gt;
&lt;h3&gt;&lt;a href="#devtools-repl" id="devtools-repl"&gt;&lt;/a&gt;Devtools, REPL&lt;/h3&gt;
&lt;p&gt;Another gem that I discovered during the development of this application was &lt;a href="https://github.com/binaryage/cljs-devtools"&gt;cljs-devtools&lt;/a&gt;. It's extremely helpful for logging ClojureScript values to the Chrome console. I enable it in the &lt;code&gt;dev&lt;/code&gt; namespace, so it's only available during development:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;devtools/enable-feature!&lt;/span&gt; &lt;span class="ss"&gt;:sanity-hints&lt;/span&gt; &lt;span class="ss"&gt;:dirac&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;devtools/install!&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I didn't use the ClojureScript REPL much — Figwheel reloading and cljs-devtools were enough for a smooth development experience. The rare occasions when I put the REPL to use were mostly for &lt;a href="https://github.com/Day8/re-frame/wiki/FAQ#5-how-can-i-inspect-app-db"&gt;inspecting and interacting with the app state directly&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a href="#conclusion" id="conclusion"&gt;&lt;/a&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;Leiningen, Figwheel and re-frame brought stability and sanity to my frontend development undertakings. Hats off to all the people who have brought the ClojureScript ecosystem and development experience to where we are now!&lt;/p&gt;
&lt;p&gt;You can see the live application &lt;a href="http://www.kjellstaffans.fi/ord/"&gt;here&lt;/a&gt;. Sources are on &lt;a href="https://github.com/jstaffans/freq-words-2"&gt;Github&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;div&gt;&lt;a href="/"&gt;Back&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="footer"&gt;&lt;p&gt;&amp;copy; 2015-2018 Johannes Staffans&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/html&gt;</content><author><name>Johannes Staffans</name></author><category term="clojurescript"></category><category term="reagent"></category><category term="re-frame"></category><category term="boot"></category><category term="figwheel"></category></entry><entry><id>urn:uuid:cdaae8c8-78a6-4e3b-9749-7333c4381482</id><title>Action leads to inspiration</title><link href="https://jstaffans.github.io/posts/2016-01-25-action-inspiration.html" type="text/html" title="Action leads to inspiration" rel="alternate"></link><published>2016-01-25T00:00:00Z</published><updated>2016-01-25T00:00:00Z</updated><content type="html" xml:base="https://jstaffans.github.io/posts/2016-01-25-action-inspiration.html">&lt;!DOCTYPE html&gt;
&lt;html&gt;&lt;head&gt;&lt;meta charset="utf-8"&gt;&lt;meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible"&gt;&lt;meta content="width=device-width, initial-scale=1, maximum-scale=1" name="viewport"&gt;&lt;meta content="Johannes Staffans" itemprop="author" name="author"&gt;&lt;title&gt;Johannes Staffans - Action leads to inspiration&lt;/title&gt;&lt;link href="https://fonts.googleapis.com/css?family=Merriweather:400,700|Open+Sans:400,700" rel="stylesheet"&gt;&lt;link href="/styles/main.css" rel="stylesheet" type="text/css"&gt;&lt;/head&gt;&lt;div&gt;&lt;div class="header"&gt;&lt;div class="header__content clearfix"&gt;&lt;div class="sm-col sm-col-8"&gt;&lt;div&gt;personal website and blog of&lt;/div&gt;&lt;h1 class="header__headline"&gt;&lt;a href="/"&gt;Johannes Staffans&lt;/a&gt;&lt;/h1&gt;&lt;/div&gt;&lt;div class="sm-col flex-column"&gt;&lt;div&gt;&lt;a href="/"&gt;posts&lt;/a&gt;&lt;span&gt; &amp;middot; &lt;/span&gt;&lt;a href="/pages/about.html"&gt;about&lt;/a&gt;&lt;/div&gt;&lt;div class="pt1"&gt;elsewhere&lt;/div&gt;&lt;div&gt;&lt;a href="https://github.com/jstaffans"&gt;github&lt;/a&gt;&lt;span&gt; &amp;middot; &lt;/span&gt;&lt;a href="https://www.linkedin.com/in/jstaffans"&gt;linkedin&lt;/a&gt;&lt;span&gt; &amp;middot; &lt;/span&gt;&lt;a href="https://twitter.com/jstaffans"&gt;@jstaffans&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="clearfix"&gt;&lt;svg class="left border-triangle" version="1.1" xmlns="http://www.w3.org/2000/svg"&gt;&lt;polygon class="mask" points="0,0 30,0 30,30 0,30"&gt;&lt;/polygon&gt;&lt;polygon points="0,15 30,0 30,30"&gt;&lt;/polygon&gt;&lt;/svg&gt;&lt;svg class="right border-triangle" version="1.1" xmlns="http://www.w3.org/2000/svg"&gt;&lt;polygon class="mask" points="0,0 30,0 30,30 0,30"&gt;&lt;/polygon&gt;&lt;polygon points="30,15 0,30 0,0"&gt;&lt;/polygon&gt;&lt;/svg&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="container"&gt;&lt;div&gt;&lt;div class="flex items-baseline justify-between"&gt;&lt;h2&gt;Action leads to inspiration&lt;/h2&gt;&lt;div&gt;&lt;span&gt;25.01.2016&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;p&gt;Last weekend, a &lt;a href="http://www.clojurebridge.org/"&gt;ClojureBridge&lt;/a&gt; event &lt;a href="http://clojurebridge-berlin.github.io/"&gt;took place in Berlin&lt;/a&gt;. I was one of the coaches and had a wonderful time exploring Clojure with a group of new-comers to the language. In addition to coding, some lightning talks touching upon different aspects of software development in general and Clojure in particular were held. One of the presentations was by me, in which I talked about some of the hurdles that novice programmers might face and gave some tips on how to overcome them. This is that talk in blog form.&lt;/p&gt;
&lt;h3&gt;&lt;a href="#what-does-programming-boil-down-to" id="what-does-programming-boil-down-to"&gt;&lt;/a&gt;What does programming boil down to?&lt;/h3&gt;
&lt;p&gt;I'll take the premise that programming isn't something that is very hard to learn. It's not rocket science (unless your code is not running a website but an actual rocket!) or neurosurgery. Programmers regularily deal with simple math, basic logic and the syntax of programming languages - how you call functions, how data structures like vectors or hash maps are represented and so on. Once you start developing more complex applications, there are of course more things to learn, such as how the Internet works, the mechanics of different libraries and how to organize code in larger projects. But you actually don't need that much to get started solving smaller problems.&lt;/p&gt;
&lt;h3&gt;&lt;a href="#so-whats-the-problem" id="so-whats-the-problem"&gt;&lt;/a&gt;So what's the problem?&lt;/h3&gt;
&lt;p&gt;Despite the relatively simple nature of programming, it seems there is a general perception of software development as being something that's hard to pick up. Many people who start to learn to code seem to become discouraged at an early stage and don't continue learning. Why is that?&lt;/p&gt;
&lt;p&gt;I think the issues beginners face when coding can generally be split into two categories:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Not knowing how to begin.&lt;/li&gt;
&lt;li&gt;Getting stuck along the way and becoming discouraged.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href="#not-knowing-where-to-start" id="not-knowing-where-to-start"&gt;&lt;/a&gt;Not knowing where to start&lt;/h3&gt;
&lt;p&gt;The step from thinking "I'm going to code a program that does X" to actually having running code can be intimidating if you are not familiar with programming. What editor should I be using? What framework can help me solve my problem? How on earth should I code so that the solution is elegant, I heard that writing spaghetti code is really bad?&lt;/p&gt;
&lt;p&gt;There's a quote by &lt;a href="https://en.wikipedia.org/wiki/Arthur_Ashe"&gt;Arthur Ashe&lt;/a&gt;, winner of three Grand Slams in tennis and recipient of the Presidential Medal of Freedom, that goes:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Start where you are. Use what you have. Do what you can.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;My take on this is that you should begin your solution using what knowledge you already have. If you have only ever coded a Java program with a "Hello World!" string printed from a &lt;code&gt;main()&lt;/code&gt; method, a Java program with a &lt;code&gt;main()&lt;/code&gt; method is probably a good place to start. I'd interpret "do what you can" as trying to first solve the parts of the problem that you understand, such as printing out text or getting user input from the command prompt.&lt;/p&gt;
&lt;p&gt;Your favourite search engine is also your friend when taking the first steps to implement a new program. You can start by typing in code from examples of similar applications, from tutorials or from screencasts.&lt;/p&gt;
&lt;p&gt;Iterating in small steps is key - a common beginner mistake is to try to solve the whole problem at once. Always try to find the smallest thing you can solve first. If your problem involves working with a collection of values, first implement a solution that handles a single value. Work your way from the small to the large. There are some good books out there that can help you to learn this divide-and-conquer approach, such as &lt;a href="http://www.goodreads.com/book/show/154154.Programming_Interviews_Exposed"&gt;"Programming Interviews Exposed"&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Beware of &lt;a href="https://en.wikipedia.org/wiki/Law_of_triviality"&gt;bikeshedding&lt;/a&gt; (a term that gets thrown around a lot among software developers and basically means wasting time on irrelevant details). At the end of the day, what your program &lt;em&gt;does&lt;/em&gt; is what matters, not which framework you use, which editor or which programming language.&lt;/p&gt;
&lt;p&gt;Another favourite quote of mine, which I unfortunately don't know who to attribute to, is:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Action leads to inspiration.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A common misconception is that a programmer should know exactly what they're doing before starting to code. The solution should just appear before the mental eye in a puff of magical smoke and the actual coding is just the mechanical task of writing the program in an editor. In reality, I think it is often the other way around - we start coding first, without having much of an idea what we're doing. As we proceed, we see patterns, have new ideas on what we could go back and change in order to make it better and thoughts on what we should concentrate on next. In short, taking the action of starting to code leads to inspiration about how to solve the problem at hand - not the other way around.&lt;/p&gt;
&lt;p&gt;A programmer will often find that the inspiration that comes from coding will take the solution in wholly new directions that could never have been anticipated when starting out. Often this can mean throwing out heaps of existing code and starting afresh, which I see as a good thing - the first attempts at a solution are usually just about gaining a deeper understanding of the problem. Don't become too attached to your code, a lot of times throwing it out is just the right thing to do.&lt;/p&gt;
&lt;h3&gt;&lt;a href="#getting-stuck" id="getting-stuck"&gt;&lt;/a&gt;Getting stuck&lt;/h3&gt;
&lt;p&gt;Getting stuck and not knowing how to proceed with a particular programming problem is maybe the biggest source of discouragment for new coders. It is unfortunately something one has to become used to, as this is something that happens very often, even to experienced programmers.&lt;/p&gt;
&lt;p&gt;The scary thing about getting stuck coding is that it can feel very personal and intimidating. In other occupations, one might get stuck because a tool breaks, or a shipment of goods is late, or something else that is out of our control. In software development, it's easy to think, "I should really know how to solve this problem!", or something along those lines. Programming is after all primarily a mental excercise.&lt;/p&gt;
&lt;p&gt;Once down the rabbit hole of feeling inadequate, it's difficult to get out. The primitive and irrational part of the mind, the limbic system that produces emotions like fear and anger and triggers fight-or-flight responses, is in full control and does not give the slow, logical prefrontal cortex a chance to solve the problem. Daniel Kahneman's excellent book &lt;a href="http://www.goodreads.com/book/show/11468377-thinking-fast-and-slow"&gt;"Thinking, Fast and Slow"&lt;/a&gt; explains this mental process, modeled as two systems that drive the way we think, in fascinating detail.&lt;/p&gt;
&lt;p&gt;To get un-stuck with a difficult problem, you need to give your brain time to process the information. You can for example go out for a walk, watch a movie or go dancing - anything! For me, solutions to problems I've faced during the day often come to me just before I go to sleep. Having a notebook by the bed may be useful if that's the case for you, too.&lt;/p&gt;
&lt;p&gt;Novice programmers can often feel intimidated by more experienced developers, as these seem to blaze out code without much effort, taking every problem in stride. You should know, however, that a programmer like that has probably seen similar problems hundreds of times already and has developed a repertoire of patterns around them. Recognizing patterns and having a gut feeling about how to approach them, what data structures to use and which algorithms are a good fit is something that comes with experience. Once you start building your own repertoire, you'll start seeing patterns too and know instinctively what solutions to apply.&lt;/p&gt;
&lt;h3&gt;&lt;a href="#conclusion" id="conclusion"&gt;&lt;/a&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;Software development is fun and rewarding, but can also be frustrating, particularily for inexperienced programmers who don't know how to start approaching a problem. Getting stuck can be intimidating but is something that I think new programmers need to become friendly with. I hope this post can give some ideas on what actions to take to get that inspiration flowing!&lt;/p&gt;
&lt;p&gt;Thanks again to the organizers of ClojureBridge Berlin!&lt;/p&gt;
&lt;/div&gt;&lt;div&gt;&lt;a href="/"&gt;Back&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="footer"&gt;&lt;p&gt;&amp;copy; 2015-2018 Johannes Staffans&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/html&gt;</content><author><name>Johannes Staffans</name></author><category term="software development"></category><category term="getting started"></category><category term="advice"></category><category term="clojurebridge"></category><category term="clojure"></category></entry><entry><id>urn:uuid:eb792ad5-e2cb-465f-b9b0-be0627cb9cb6</id><title>A look at running Clojure on AWS Lambda</title><link href="https://jstaffans.github.io/posts/2015-12-30-clojure-lambda.html" type="text/html" title="A look at running Clojure on AWS Lambda" rel="alternate"></link><published>2015-12-30T00:00:00Z</published><updated>2015-12-30T00:00:00Z</updated><content type="html" xml:base="https://jstaffans.github.io/posts/2015-12-30-clojure-lambda.html">&lt;!DOCTYPE html&gt;
&lt;html&gt;&lt;head&gt;&lt;meta charset="utf-8"&gt;&lt;meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible"&gt;&lt;meta content="width=device-width, initial-scale=1, maximum-scale=1" name="viewport"&gt;&lt;meta content="Johannes Staffans" itemprop="author" name="author"&gt;&lt;title&gt;Johannes Staffans - A look at running Clojure on AWS Lambda&lt;/title&gt;&lt;link href="https://fonts.googleapis.com/css?family=Merriweather:400,700|Open+Sans:400,700" rel="stylesheet"&gt;&lt;link href="/styles/main.css" rel="stylesheet" type="text/css"&gt;&lt;/head&gt;&lt;div&gt;&lt;div class="header"&gt;&lt;div class="header__content clearfix"&gt;&lt;div class="sm-col sm-col-8"&gt;&lt;div&gt;personal website and blog of&lt;/div&gt;&lt;h1 class="header__headline"&gt;&lt;a href="/"&gt;Johannes Staffans&lt;/a&gt;&lt;/h1&gt;&lt;/div&gt;&lt;div class="sm-col flex-column"&gt;&lt;div&gt;&lt;a href="/"&gt;posts&lt;/a&gt;&lt;span&gt; &amp;middot; &lt;/span&gt;&lt;a href="/pages/about.html"&gt;about&lt;/a&gt;&lt;/div&gt;&lt;div class="pt1"&gt;elsewhere&lt;/div&gt;&lt;div&gt;&lt;a href="https://github.com/jstaffans"&gt;github&lt;/a&gt;&lt;span&gt; &amp;middot; &lt;/span&gt;&lt;a href="https://www.linkedin.com/in/jstaffans"&gt;linkedin&lt;/a&gt;&lt;span&gt; &amp;middot; &lt;/span&gt;&lt;a href="https://twitter.com/jstaffans"&gt;@jstaffans&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="clearfix"&gt;&lt;svg class="left border-triangle" version="1.1" xmlns="http://www.w3.org/2000/svg"&gt;&lt;polygon class="mask" points="0,0 30,0 30,30 0,30"&gt;&lt;/polygon&gt;&lt;polygon points="0,15 30,0 30,30"&gt;&lt;/polygon&gt;&lt;/svg&gt;&lt;svg class="right border-triangle" version="1.1" xmlns="http://www.w3.org/2000/svg"&gt;&lt;polygon class="mask" points="0,0 30,0 30,30 0,30"&gt;&lt;/polygon&gt;&lt;polygon points="30,15 0,30 0,0"&gt;&lt;/polygon&gt;&lt;/svg&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="container"&gt;&lt;div&gt;&lt;div class="flex items-baseline justify-between"&gt;&lt;h2&gt;A look at running Clojure on AWS Lambda&lt;/h2&gt;&lt;div&gt;&lt;span&gt;30.12.2015&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;p&gt;Lambda is the name of the serverless function execution service that has been part of the Amazon Web Services ecosystem since late 2014. The evolution of the Lamba service has been quite rapid during the last year, with one of the recent additions being support for execution of Java code. And as we know, where there's Java, there can be Clojure, so during a recent project I decided to implement some of the backend parts using the AWS Lambda service.&lt;/p&gt;
&lt;h3&gt;&lt;a href="#advantages" id="advantages"&gt;&lt;/a&gt;Advantages&lt;/h3&gt;
&lt;p&gt;The obvious advantage of using Lambda is that you do not have to worry about server infrastructure, instead you are just deploying a function and letting AWS worry about scaling and so on. I think that having the function be the unit of deployment is a natural step to take when doing functional programming. Clojure of course works splendidly in this setting.&lt;/p&gt;
&lt;h3&gt;&lt;a href="#limitations" id="limitations"&gt;&lt;/a&gt;Limitations&lt;/h3&gt;
&lt;p&gt;One well-known limitation of running Clojure on AWS Lambda is the JVM startup time. This is a serious problem for an application that requires fast responses. In this case, you can still use ClojureScript running on Node.js, which is another execution environment that Lambda supports. If, like me, you can tolerate function executions that are sometimes very slow, Clojure works just fine. Lambda will also generally run subsequent invocations of your function using the same, warmed-up JVMs, so it's usually only the first few executions that are very slow.&lt;/p&gt;
&lt;p&gt;Another limitation that one might hit is the 50 Mb size limit of the deployment artifact. 50 Mb might seem like a lot, but you can quickly reach that limit if you're not careful about avoiding pulling in heavy dependencies in your project. &lt;a href="https://github.com/mcohen01/amazonica"&gt;Amazonica&lt;/a&gt; is an example of a library that has a lot of transient dependencies. Liberal use of &lt;code&gt;:exclusions&lt;/code&gt; in the &lt;code&gt;:dependencies&lt;/code&gt; section of your Leiningen project file helps:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ss"&gt;:dependencies&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="nv"&gt;amazonica&lt;/span&gt; &lt;span class="s"&gt;"0.3.39"&lt;/span&gt; 
                &lt;span class="ss"&gt;:exclusions&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;com.amazonaws/aws-java-sdk-datapipeline&lt;/span&gt;
                             &lt;span class="nv"&gt;com.amazonaws/aws-java-sdk-devicefarm&lt;/span&gt;
                             &lt;span class="nv"&gt;...&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;One serious limitation that isn't immediately obvious is that Lambda functions have no way to communicate with private RDS databases. This is because permissions are granted to a Lambda function based on its (IAM) execution role whereas RDS access is security group- and therefore IP-address-based. The IP address of a Lambda executor is not known to the user, so you would have to open up access to large chunks (the whole published AWS IP range, essentially) to grant access to a Lambda function. Addressing this limitation seems to at least be &lt;a href="https://forums.aws.amazon.com/thread.jspa?threadID=166946&amp;amp;start=25&amp;amp;tstart=0"&gt;on the AWS Lambda roadmap&lt;/a&gt;, but no dates have been given yet.&lt;/p&gt;
&lt;h3&gt;&lt;a href="#practical-issues" id="practical-issues"&gt;&lt;/a&gt;Practical issues&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Deployment&lt;/strong&gt; to AWS Lambda requires some command-line magic - I created a Jenkins job that runs Leiningen, tests the code and deploys a new version to Lambda. There are some things that need configuring, mainly how much memory to reserve for the function (this correlates directly with how much you pay per function invocation as well). I found 384 Mb to be the lowest possible amount for my relatively simple data-crunching function. Lower than that and the function would simply hang and time out.&lt;/p&gt;
&lt;p&gt;Since Lambda is somewhat of a black box execution environment, &lt;strong&gt;logging&lt;/strong&gt; is crucial. Logs can be found in CloudWatch, but you have to remember to give the function an execution IAM role that is authorized to create log streams - the &lt;a href="http://docs.aws.amazon.com/lambda/latest/dg/intro-permission-model.html#lambda-intro-execution-role"&gt;docs&lt;/a&gt; have more to say on that.&lt;/p&gt;
&lt;p&gt;Your application will probably also need some &lt;strong&gt;configuration&lt;/strong&gt;, maybe in the form of an API key or threadpool settings (yes, threadpools are fine to use with Lambda). Lambda unfortunately lacks support for environment variables similar to what other AWS deployment tools like Elastic Beanstalk and OpsWorks have, so you have to get a bit more creative.&lt;/p&gt;
&lt;p&gt;Usually, some setup that makes local development easy and while avoiding placing sensitive values in the source-code repository is a good way to go and I ended up using the &lt;a href="https://github.com/levand/immuconf"&gt;immuconf&lt;/a&gt; library in combination with an S3 bucket. The blueprint for the configuration is a checked-in &lt;code&gt;resources/config.edn&lt;/code&gt; file, which can be overridden by both a file in an S3 bucket and a file that is available only locally:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;ns &lt;/span&gt;&lt;span class="nv"&gt;lambda-example.config&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:require&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;clojure.java.io&lt;/span&gt; &lt;span class="ss"&gt;:as&lt;/span&gt; &lt;span class="nv"&gt;io&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;amazonica.aws.s3&lt;/span&gt; &lt;span class="ss"&gt;:refer&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;get-object&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
            &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;immuconf.config&lt;/span&gt; &lt;span class="ss"&gt;:as&lt;/span&gt; &lt;span class="nv"&gt;conf&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;clojure.tools.logging&lt;/span&gt; &lt;span class="ss"&gt;:as&lt;/span&gt; &lt;span class="nv"&gt;log&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:refer-clojure&lt;/span&gt; &lt;span class="ss"&gt;:exclude&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;get&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defn- &lt;/span&gt;&lt;span class="nv"&gt;base-config&lt;/span&gt;
  &lt;span class="p"&gt;[]&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;io/resource&lt;/span&gt; &lt;span class="s"&gt;"config.edn"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defn- &lt;/span&gt;&lt;span class="nv"&gt;s3-config&lt;/span&gt;
  &lt;span class="p"&gt;[]&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;try&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:input-stream&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;get-object&lt;/span&gt;
        &lt;span class="ss"&gt;:bucket-name&lt;/span&gt; &lt;span class="s"&gt;"my-config-bucket"&lt;/span&gt;
        &lt;span class="ss"&gt;:key&lt;/span&gt; &lt;span class="s"&gt;"production/config.edn"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;catch&lt;/span&gt; &lt;span class="nv"&gt;Exception&lt;/span&gt; &lt;span class="nv"&gt;_&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;log/warn&lt;/span&gt; &lt;span class="s"&gt;"S3 config not available!"&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defn- &lt;/span&gt;&lt;span class="nv"&gt;local-config&lt;/span&gt;
  &lt;span class="p"&gt;[]&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;when &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;.exists&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;io/as-file&lt;/span&gt; &lt;span class="s"&gt;"local.edn"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="s"&gt;"local.edn"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;def &lt;/span&gt;&lt;span class="nv"&gt;config&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;apply &lt;/span&gt;
    &lt;span class="nv"&gt;conf/load&lt;/span&gt; 
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;filter &lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;partial not= &lt;/span&gt;&lt;span class="nv"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
      &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="nf"&gt;base-config&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;s3-config&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;local-config&lt;/span&gt;&lt;span class="p"&gt;)])))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a href="#execution" id="execution"&gt;&lt;/a&gt;Execution&lt;/h3&gt;
&lt;p&gt;Lambda functions are versatile in that they can be triggered by almost any type of event in the AWS universe. I opted for subscribing to an SNS topic, but you can also trigger functions based on for example changes in an S3 bucket or updates to a DynamoDB table.&lt;/p&gt;
&lt;p&gt;The &lt;a href="https://github.com/uswitch/lambada"&gt;lambada&lt;/a&gt; library provides the necessary plumbing for actually executing your function in response to an AWS event.&lt;/p&gt;
&lt;h3&gt;&lt;a href="#conclusion" id="conclusion"&gt;&lt;/a&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;AWS Lambda is a fun, versatile and cheap way of taking the functional programming paradigm one step further by having the function be the unit of deployment. Although there are some kinks such as the lack of environment variable support and restrictions with regards to RDS access, most problems can be worked around. The JVM startup time is a blocker for applications with real-time needs but not a problem for data-crunching background tasks.&lt;/p&gt;
&lt;/div&gt;&lt;div&gt;&lt;a href="/"&gt;Back&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="footer"&gt;&lt;p&gt;&amp;copy; 2015-2018 Johannes Staffans&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/html&gt;</content><author><name>Johannes Staffans</name></author><category term="clojure"></category><category term="lambda"></category><category term="aws"></category></entry><entry><id>urn:uuid:07ae01ec-82fb-418d-9e1f-53040dae2424</id><title>Fun with Specter</title><link href="https://jstaffans.github.io/posts/2015-11-19-fun-with-specter.html" type="text/html" title="Fun with Specter" rel="alternate"></link><published>2015-11-19T00:00:00Z</published><updated>2015-11-19T00:00:00Z</updated><content type="html" xml:base="https://jstaffans.github.io/posts/2015-11-19-fun-with-specter.html">&lt;!DOCTYPE html&gt;
&lt;html&gt;&lt;head&gt;&lt;meta charset="utf-8"&gt;&lt;meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible"&gt;&lt;meta content="width=device-width, initial-scale=1, maximum-scale=1" name="viewport"&gt;&lt;meta content="Johannes Staffans" itemprop="author" name="author"&gt;&lt;title&gt;Johannes Staffans - Fun with Specter&lt;/title&gt;&lt;link href="https://fonts.googleapis.com/css?family=Merriweather:400,700|Open+Sans:400,700" rel="stylesheet"&gt;&lt;link href="/styles/main.css" rel="stylesheet" type="text/css"&gt;&lt;/head&gt;&lt;div&gt;&lt;div class="header"&gt;&lt;div class="header__content clearfix"&gt;&lt;div class="sm-col sm-col-8"&gt;&lt;div&gt;personal website and blog of&lt;/div&gt;&lt;h1 class="header__headline"&gt;&lt;a href="/"&gt;Johannes Staffans&lt;/a&gt;&lt;/h1&gt;&lt;/div&gt;&lt;div class="sm-col flex-column"&gt;&lt;div&gt;&lt;a href="/"&gt;posts&lt;/a&gt;&lt;span&gt; &amp;middot; &lt;/span&gt;&lt;a href="/pages/about.html"&gt;about&lt;/a&gt;&lt;/div&gt;&lt;div class="pt1"&gt;elsewhere&lt;/div&gt;&lt;div&gt;&lt;a href="https://github.com/jstaffans"&gt;github&lt;/a&gt;&lt;span&gt; &amp;middot; &lt;/span&gt;&lt;a href="https://www.linkedin.com/in/jstaffans"&gt;linkedin&lt;/a&gt;&lt;span&gt; &amp;middot; &lt;/span&gt;&lt;a href="https://twitter.com/jstaffans"&gt;@jstaffans&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="clearfix"&gt;&lt;svg class="left border-triangle" version="1.1" xmlns="http://www.w3.org/2000/svg"&gt;&lt;polygon class="mask" points="0,0 30,0 30,30 0,30"&gt;&lt;/polygon&gt;&lt;polygon points="0,15 30,0 30,30"&gt;&lt;/polygon&gt;&lt;/svg&gt;&lt;svg class="right border-triangle" version="1.1" xmlns="http://www.w3.org/2000/svg"&gt;&lt;polygon class="mask" points="0,0 30,0 30,30 0,30"&gt;&lt;/polygon&gt;&lt;polygon points="30,15 0,30 0,0"&gt;&lt;/polygon&gt;&lt;/svg&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="container"&gt;&lt;div&gt;&lt;div class="flex items-baseline justify-between"&gt;&lt;h2&gt;Fun with Specter&lt;/h2&gt;&lt;div&gt;&lt;span&gt;19.11.2015&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;p&gt;&lt;a href="https://github.com/nathanmarz/specter"&gt;Specter&lt;/a&gt; is a new library by Nathan Marz that makes it easier to deal with nested data structures, such as lists of maps of maps. This post explores some less-documented parts of the library.&lt;/p&gt;
&lt;p&gt;For this post, we'll be dealing with a simple movie dataset:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="ss"&gt;:name&lt;/span&gt; &lt;span class="s"&gt;"First Blood"&lt;/span&gt;, &lt;span class="ss"&gt;:director&lt;/span&gt; &lt;span class="s"&gt;"Ted Kotcheff"&lt;/span&gt;, &lt;span class="ss"&gt;:rating&lt;/span&gt; &lt;span class="mf"&gt;7.6&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:name&lt;/span&gt; &lt;span class="s"&gt;"Lethal Weapon 3"&lt;/span&gt;, &lt;span class="ss"&gt;:director&lt;/span&gt; &lt;span class="s"&gt;"Richard Donner"&lt;/span&gt;, &lt;span class="ss"&gt;:rating&lt;/span&gt; &lt;span class="mf"&gt;6.6&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:name&lt;/span&gt; &lt;span class="s"&gt;"Predator"&lt;/span&gt;, &lt;span class="ss"&gt;:director&lt;/span&gt; &lt;span class="s"&gt;"John McTiernan"&lt;/span&gt;, &lt;span class="ss"&gt;:rating&lt;/span&gt; &lt;span class="mf"&gt;7.8&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:name&lt;/span&gt; &lt;span class="s"&gt;"Mad Max Beyond Thunderdome"&lt;/span&gt;, &lt;span class="ss"&gt;:director&lt;/span&gt; &lt;span class="s"&gt;"George Miller"&lt;/span&gt;, &lt;span class="ss"&gt;:rating&lt;/span&gt; &lt;span class="mf"&gt;6.1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:name&lt;/span&gt; &lt;span class="s"&gt;"The Terminator"&lt;/span&gt;, &lt;span class="ss"&gt;:director&lt;/span&gt; &lt;span class="s"&gt;"James Cameron"&lt;/span&gt;, &lt;span class="ss"&gt;:rating&lt;/span&gt; &lt;span class="mf"&gt;8.1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="nv"&gt;...&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Transforming the sequence is simple enough:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;require&lt;/span&gt; &lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;com.rpl.specter&lt;/span&gt; &lt;span class="ss"&gt;:as&lt;/span&gt; &lt;span class="nv"&gt;s&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="nv"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;nil&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;s/transform&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;s/ALL&lt;/span&gt; &lt;span class="ss"&gt;:name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="nv"&gt;clojure.string/upper-case&lt;/span&gt; &lt;span class="nv"&gt;movies&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="ss"&gt;:name&lt;/span&gt; &lt;span class="s"&gt;"FIRST BLOOD"&lt;/span&gt;, &lt;span class="ss"&gt;:director&lt;/span&gt; &lt;span class="s"&gt;"Ted Kotcheff"&lt;/span&gt;, &lt;span class="ss"&gt;:rating&lt;/span&gt; &lt;span class="mf"&gt;7.6&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;, &lt;span class="nv"&gt;...&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In general, transformation is Specter's forte and is covered very well by the &lt;a href="https://github.com/nathanmarz/specter"&gt;documentation&lt;/a&gt;. I was however interested in exploiting Specter for doing analysis and aggregation of data stored in a sequence of nested maps. It is possible to do so with standard Clojure functions, but I like the declarativeness of Specter and wanted to give it a shot.&lt;/p&gt;
&lt;p&gt;Let's for example find all movies by James Cameron with a rating higher than 8.0:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;s/select&lt;/span&gt; 
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;s/ALL&lt;/span&gt; 
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;s/cond-path&lt;/span&gt; 
     &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:director&lt;/span&gt; &lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;= &lt;/span&gt;&lt;span class="s"&gt;"James Cameron"&lt;/span&gt; &lt;span class="nv"&gt;%&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; 
     &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:rating&lt;/span&gt; &lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;&amp;gt; &lt;/span&gt;&lt;span class="nv"&gt;%&lt;/span&gt; &lt;span class="mf"&gt;8.0&lt;/span&gt;&lt;span class="p"&gt;)])]&lt;/span&gt; 
  &lt;span class="nv"&gt;movies&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;8.1&lt;/span&gt; &lt;span class="mf"&gt;8.5&lt;/span&gt; &lt;span class="mf"&gt;8.6&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;(Note: Nathan Marz let me know via Twitter that there's a better to do the following, more on that at the end of the post!)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;So we get the ratings and they are all greater than 8.0, but we have lost the original maps. How do we get those? It turns out that you can reference the &lt;code&gt;VAL&lt;/code&gt; symbol basically anywhere within the selector path. This resolves to whatever value is selected by Specter at this level of nesting. If we example put &lt;code&gt;VAL&lt;/code&gt; at the end, we duplicate the rating:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;s/select&lt;/span&gt; 
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;s/ALL&lt;/span&gt; 
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;s/cond-path&lt;/span&gt; 
     &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:director&lt;/span&gt; &lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;= &lt;/span&gt;&lt;span class="s"&gt;"James Cameron"&lt;/span&gt; &lt;span class="nv"&gt;%&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; 
     &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:rating&lt;/span&gt; &lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;&amp;gt; &lt;/span&gt;&lt;span class="nv"&gt;%&lt;/span&gt; &lt;span class="mf"&gt;8.0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;s/VAL&lt;/span&gt;&lt;span class="p"&gt;])]&lt;/span&gt; 
  &lt;span class="nv"&gt;movies&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="mf"&gt;8.1&lt;/span&gt; &lt;span class="mf"&gt;8.1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;8.5&lt;/span&gt; &lt;span class="mf"&gt;8.5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;8.6&lt;/span&gt; &lt;span class="mf"&gt;8.6&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When working with sequences of maps, it's usually the case that we want to get the whole map back, so we should put &lt;code&gt;VAL&lt;/code&gt; at the beginning of the selector path:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;s/select&lt;/span&gt; 
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;s/ALL&lt;/span&gt; 
   &lt;span class="nv"&gt;s/VAL&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;s/cond-path&lt;/span&gt; 
     &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:director&lt;/span&gt; &lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;= &lt;/span&gt;&lt;span class="s"&gt;"James Cameron"&lt;/span&gt; &lt;span class="nv"&gt;%&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; 
     &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:rating&lt;/span&gt; &lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;&amp;gt; &lt;/span&gt;&lt;span class="nv"&gt;%&lt;/span&gt; &lt;span class="mf"&gt;8.0&lt;/span&gt;&lt;span class="p"&gt;)])]&lt;/span&gt; 
  &lt;span class="nv"&gt;movies&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[[{&lt;/span&gt;&lt;span class="ss"&gt;:name&lt;/span&gt; &lt;span class="s"&gt;"The Terminator"&lt;/span&gt;, &lt;span class="ss"&gt;:director&lt;/span&gt; &lt;span class="s"&gt;"James Cameron"&lt;/span&gt;, &lt;span class="ss"&gt;:rating&lt;/span&gt; &lt;span class="mf"&gt;8.1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="mf"&gt;8.1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="nv"&gt;...&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we get the full map back, but it's wrapped in a collection. We can introduce a helper function for this use case:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defn &lt;/span&gt;&lt;span class="nv"&gt;select-maps&lt;/span&gt; 
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;selector&lt;/span&gt; &lt;span class="nv"&gt;structure&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;-&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;s/select&lt;/span&gt; &lt;span class="nv"&gt;selector&lt;/span&gt; &lt;span class="nv"&gt;structure&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
         &lt;span class="c1"&gt;; the map we're after is always the first argument&lt;/span&gt;
         &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;mapv&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;fn &lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="nv"&gt;m&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="nv"&gt;_&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="nv"&gt;m&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;    
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now working with sequences of maps is more comfortable:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;select-maps&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;s/ALL&lt;/span&gt; 
   &lt;span class="nv"&gt;s/VAL&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;s/cond-path&lt;/span&gt; 
     &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:director&lt;/span&gt; &lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;= &lt;/span&gt;&lt;span class="s"&gt;"James Cameron"&lt;/span&gt; &lt;span class="nv"&gt;%&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; 
     &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:rating&lt;/span&gt; &lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;&amp;gt; &lt;/span&gt;&lt;span class="nv"&gt;%&lt;/span&gt; &lt;span class="mf"&gt;8.0&lt;/span&gt;&lt;span class="p"&gt;)])]&lt;/span&gt; 
  &lt;span class="nv"&gt;movies&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="ss"&gt;:name&lt;/span&gt; &lt;span class="s"&gt;"The Terminator"&lt;/span&gt;, &lt;span class="ss"&gt;:director&lt;/span&gt; &lt;span class="s"&gt;"James Cameron"&lt;/span&gt;, &lt;span class="ss"&gt;:rating&lt;/span&gt; &lt;span class="mf"&gt;8.1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nv"&gt;...&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Specter's path definition functions can be exploited to get e.g. movies of James Cameron that have an either very bad or very good rating:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;select-maps&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;s/ALL&lt;/span&gt; 
   &lt;span class="nv"&gt;s/VAL&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;s/cond-path&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:director&lt;/span&gt; &lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;= &lt;/span&gt;&lt;span class="s"&gt;"James Cameron"&lt;/span&gt; &lt;span class="nv"&gt;%&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;s/multi-path&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:rating&lt;/span&gt; &lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;&amp;gt; &lt;/span&gt;&lt;span class="nv"&gt;%&lt;/span&gt; &lt;span class="mf"&gt;8.5&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:rating&lt;/span&gt; &lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;&amp;lt; &lt;/span&gt;&lt;span class="nv"&gt;%&lt;/span&gt; &lt;span class="mf"&gt;6.0&lt;/span&gt;&lt;span class="p"&gt;)]))]&lt;/span&gt; 
  &lt;span class="nv"&gt;movies&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;=&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="ss"&gt;:name&lt;/span&gt; &lt;span class="s"&gt;"Terminator 3: Judgment Day"&lt;/span&gt;, 
  &lt;span class="ss"&gt;:director&lt;/span&gt; &lt;span class="s"&gt;"James Cameron"&lt;/span&gt;, &lt;span class="ss"&gt;:rating&lt;/span&gt; &lt;span class="mf"&gt;8.6&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:name&lt;/span&gt; &lt;span class="s"&gt;"Piranhas II"&lt;/span&gt;, &lt;span class="ss"&gt;:director&lt;/span&gt; &lt;span class="s"&gt;"James Cameron"&lt;/span&gt;, &lt;span class="ss"&gt;:rating&lt;/span&gt; &lt;span class="mf"&gt;3.5&lt;/span&gt;&lt;span class="p"&gt;}]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So this works, but it's clunky and requires a helper function. Is there an easier way?&lt;/p&gt;
&lt;h4&gt;&lt;a href="#the-right-way" id="the-right-way"&gt;&lt;/a&gt;The right way&lt;/h4&gt;
&lt;p&gt;As pointed out to me by the library author, there's a much better way of accomplishing the above:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;s/select&lt;/span&gt; 
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;s/ALL&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;s/selected?&lt;/span&gt; &lt;span class="ss"&gt;:director&lt;/span&gt; &lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;= &lt;/span&gt;&lt;span class="s"&gt;"James Cameron"&lt;/span&gt; &lt;span class="nv"&gt;%&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;s/selected?&lt;/span&gt; &lt;span class="ss"&gt;:rating&lt;/span&gt; &lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;&amp;gt; &lt;/span&gt;&lt;span class="nv"&gt;%&lt;/span&gt; &lt;span class="mf"&gt;8.0&lt;/span&gt;&lt;span class="p"&gt;))]&lt;/span&gt;
  &lt;span class="nv"&gt;movies&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;selected?&lt;/code&gt; function filters the current value based on whether the selector that follows matches anything. It doesn't mess up the return value like the other examples above. It can of course be combined with conditional paths or multipaths as in the previous example:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;s/select&lt;/span&gt; 
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;s/ALL&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;s/selected?&lt;/span&gt; &lt;span class="ss"&gt;:director&lt;/span&gt; &lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;= &lt;/span&gt;&lt;span class="s"&gt;"James Cameron"&lt;/span&gt; &lt;span class="nv"&gt;%&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;s/selected?&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;s/multi-path&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:rating&lt;/span&gt; &lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;&amp;gt; &lt;/span&gt;&lt;span class="nv"&gt;%&lt;/span&gt; &lt;span class="mf"&gt;8.0&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:rating&lt;/span&gt; &lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;&amp;lt; &lt;/span&gt;&lt;span class="nv"&gt;%&lt;/span&gt; &lt;span class="mf"&gt;6.0&lt;/span&gt;&lt;span class="p"&gt;)]))]&lt;/span&gt;
  &lt;span class="nv"&gt;movies&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;&lt;a href="#conclusion" id="conclusion"&gt;&lt;/a&gt;Conclusion&lt;/h4&gt;
&lt;p&gt;I think Specter is one of the best things to come out of the Clojure ecosystem recently. I find it a lot easier to grasp how to use Specter than for example zippers, which is another popular way of working with nested data structures. It's still a bit dense to get into, though — Specter would benefit greatly from something like the &lt;a href="http://www.learndatalogtoday.org/"&gt;Learn Datalog Today&lt;/a&gt; website!&lt;/p&gt;
&lt;/div&gt;&lt;div&gt;&lt;a href="/"&gt;Back&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="footer"&gt;&lt;p&gt;&amp;copy; 2015-2018 Johannes Staffans&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/html&gt;</content><author><name>Johannes Staffans</name></author><category term="clojure"></category><category term="data structures"></category><category term="specter"></category></entry></feed>